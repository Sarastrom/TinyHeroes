var App = App || {};
App.PDP = App.PDP || {};
App.PDP.Bundle = App.PDP.Bundle || {};

App.PDP.Bundle.Controller = new (function() {
	var $buyingChoicesDesc = $('.section.buyingChoices.descContent'),
		$topLinks = $('.section.bundleContent .inner > div'),
		$tabs = $buyingChoicesDesc.find('.tabLinks li'),
		$sections = $buyingChoicesDesc.find('.sections > div'),
		className = 'current',
		showSection = function(index) {
			$tabs.filter('.' + className).removeClass(className);
			$sections.filter('.' + className).removeClass(className);
			$sections.eq(index).addClass(className);
		};

	$topLinks.on('click', function(e){
		var index = $.inArray(this, $topLinks);
		e.preventDefault();
		showSection(index);
		$(this).addClass(className);
		$tabs.eq(index).addClass(className);
		$(window).trigger('resize');

	});
	$tabs.on('click', function(){
		var index = $.inArray(this, $tabs);
		showSection(index);
		$(this).addClass(className);
		$(window).trigger('resize');

	});
	
});

var App = App || {};
App.PDP = App.PDP || {};

App.PDP.Bundlizer = new(function() {

  $(init);

  function init() {
    var priceInfo = document.getElementById("priceInfo") || document.getElementById("variants") || null;
    if (priceInfo) {
      var $addToBundleCheckboxes = $("[id^='bundlizerListUpdate']").find("input[type='checkbox']");
      for (var i = 0; i < $addToBundleCheckboxes.length; i++) {
        bindCheckboxEvent($addToBundleCheckboxes[i]);
      }
    }
  }

  function bindCheckboxEvent(checkbox) {
    var $checkbox = $(checkbox),
      $submit = $checkbox.siblings("input[type='submit']").hide();

    $checkbox.bind("click", function() {
      this.checked = true;
      $submit.trigger("click");
    });
  }

});

var App = App || {};
App.PDP = App.PDP || {};
App.PDP.Carousel = function() {};

App.PDP.Carousel.prototype.setUpCarousels = function(nodes) {
  /*
   * NB There's quite  bit of CSS in here that should be put into a separate file
   * It has just been done that way to get it done quickly in the first instance.
   **/

  // set up each instance of carousel
  for (var i = 0; i < nodes.length; i++) {
    var node = nodes[i] || null;

    if (node) {
      for (var j = 0; j < node.children.length; j++) {
        if (node.children[j].className.indexOf('clip') != -1) {
          var clip = node.children[j];
          break;
        }
      }

      if (clip) {
        var list = clip.firstElementChild || clip.firstChild;
        var items = list.children;
        var listWidth = 0;
        var containerWidth = $('#userReviews .pagination').width();
        $(list).css('left', '40px');
        // set widths of elements
        for (var j = 0; j < items.length; j++) {  
          var item = items[j];
          var itemWidth = this.getItemDims(item).itemWidth;
          var itemPaddingLeft = this.getItemDims(item).itemPaddingLeft;
          var itemPaddingRight = this.getItemDims(item).itemPaddingRight;
          var itemBorderLeft = this.getItemDims(item).itemBorderLeft;
          var itemBorderRight = this.getItemDims(item).itemBorderRight;

          $(item).css('width', containerWidth);

          listWidth += (containerWidth + 41); // extra pixel for rounding errors
        }

        $(list).css({
          'width': listWidth + 300,
          'position': 'relative'
        });

        // set up controls
        /* 
         * NB Have removed enable/disable controls for now
         **/
        var controls = $(node).children('.pagination').find('a');
        var listPos = 40;
        var dims = this;

        controls.each(function() {
          $(this).bind(
            'click',
            function(e) {
              e.preventDefault();

              if (this.parentNode.className.indexOf('disabled') == -1) {
                var isTransition = false;

                listWidth = dims.getItemDims(list).itemWidth;

                if (this.parentNode.className.indexOf('previous') != -1) {
                  listPos += containerWidth + 40;
                } else {
                  listPos -= containerWidth + 40;
                }

                // determine whether to use CSS or JS for animation, then apply with vars
                var transTime = 1000; // milliseconds

                if (!window.getComputedStyle) {
                  if (list.currentStyle.transitionProperty) {
                    isTransition = true;
                  }
                } else {
                  if (
                    window.getComputedStyle(list).transitionProperty ||
                    window.getComputedStyle(list).OTransitionProperty ||
                    window.getComputedStyle(list).WebkitTransitionProperty ||
                    window.getComputedStyle(list).MozTransitionProperty
                  ) {
                    isTransition = true;
                  }
                }

                if (isTransition) {
                  // animation with CSS
                  list.style.left = listPos + 'px';
                  list.style.WebkitTransitionProperty = 'left';
                  list.style.WebkitTransitionDuration = transTime / 1000 + 's';
                  list.style.MozTransitionProperty = 'left';
                  list.style.MozTransitionDuration = transTime / 1000 + 's';
                  list.style.transitionProperty = 'left';
                  list.style.transitionDuration = transTime / 1000 + 's';
                } else {
                  // animation with JS
                  $(list).animate({ left: listPos },
                    transTime
                  );
                }

                /*
                 * after movement of carousel elements
                 * reset enable/disable attribute of controls
                 **/
                var controlHolderPrev = controls[0].parentNode;
                var controlHolderNext = controls[1].parentNode;

                console.log(parseInt(listPos,10));

                // enable/disable prev control
                if (parseInt(listPos,10) >= 0) {
                  $(controlHolderPrev).addClass('disabled');
                } else {
                  $(controlHolderPrev).removeClass('disabled');
                }

                /* enable/disable next control
                 * base on position of last item relative to edge of carousel
                 **/
                var lastItemLeft = dims.getItemDims(list.children[list.children.length - 1]).itemLeft;
                var lastItemWidth = dims.getItemDims(list.children[list.children.length - 1]).itemWidth;
                var clipRight = dims.getItemDims(clip).itemRight;

                console.log(lastItemLeft);
                console.log(lastItemWidth);
                console.log(clipRight);

                if (
                  this.parentNode.className.indexOf('next') != -1 &&
                  this.parentNode.className.indexOf('enabled') == -1 &&
                  lastItemLeft - lastItemWidth < clipRight
                ) {
                  $(controlHolderNext).addClass('disabled');
                } else {
                  $(controlHolderNext).removeClass('disabled');
                }
              }
            }
          );
        }); // END controls
      } // END if clip
    }
  }
};

App.PDP.Carousel.prototype.addCarouselItem = function(node) {
  console.log('addCarouselItem!');

  for (var i = 0; i < node.children.length; i++) {
    if (node.children[i].className.indexOf('clip') != -1) {
      var clip = node.children[i];
      break;
    }
  }

  if (clip) {
    var list = clip.firstElementChild || clip.firstChild,
      newItem = list.children[list.children.length - 1],
      lastItem = list.children[list.children.length - 2],
      listWidth = this.getItemDims(list).itemWidth,
      lastItemPaddingLeft = this.getItemDims(lastItem).itemPaddingLeft,
      lastItemPaddingRight = this.getItemDims(lastItem).itemPaddingRight,
      lastItemBorderLeft = this.getItemDims(lastItem).itemBorderLeft,
      lastItemBorderRight = this.getItemDims(lastItem).itemBorderRight,
      lastItemWidth = this.getItemDims(lastItem).itemWidth;

    listWidth += lastItemWidth;

    $(newItem).css('width', lastItemWidth - lastItemPaddingLeft - lastItemBorderRight - lastItemBorderLeft - lastItemPaddingRight);
    $(list).css('width', listWidth);
  }
};

App.PDP.Carousel.prototype.getItemDims = function(item) {
  var itemRect = item.getBoundingClientRect();
  var itemPaddingLeft = parseFloat($(item).css('paddingLeft')) || 0;
  var itemPaddingRight = parseFloat($(item).css('paddingRight')) || 0;
  var itemBorderLeft = parseInt($(item).css('borderLeftWidth'), 10) || 0;
  var itemBorderRight = parseInt($(item).css('borderRightWidth'), 10) || 0;
  var itemLeft = itemRect.left;
  var itemRight = itemRect.right;
  var itemWidth = itemRight - itemLeft;

  return {
    'itemLeft': itemLeft,
    'itemRight': itemRight,
    'itemWidth': itemWidth,
    'itemPaddingLeft': itemPaddingLeft,
    'itemPaddingRight': itemPaddingRight,
    'itemBorderLeft': itemBorderLeft,
    'itemBorderRight': itemBorderRight
  };
};

var App = App || {};
App.PDP = App.PDP || {};

App.PDP.YourPrice = new(function() {
  var $pdpPriceContainer = $('#pdpPriceContainers'),
      espotHtml = $('.yourPriceEspot').html(),
      initialResponse = (typeof ajaxInitialReponse == 'undefined') ? '' : ajaxInitialReponse,
      rewardValue,
      convertToNumber = function(num) {
        return parseFloat(num.replace(/[^\d\.]/g, ""));
      },

      checkIfGenerateYourPrice = function(){
        return (typeof initialResponse != 'undefined'
                && typeof initialResponse.userInfo !== 'undefined'
                && initialResponse.userInfo.isLoggedIn == 'true'
                && ((typeof initialResponse.walletInfo != 'undefined' && convertToNumber(initialResponse.walletInfo.walletPriceValue) > 0)
                  || (typeof initialResponse.rewardInfo != 'undefined' && convertToNumber(initialResponse.rewardInfo.rewardPointsPriceValue) > 0)))

      },

      getCurrentProductPrice = function(){
        return $('.conditionContainer:visible').find('.price').html();
      },

      updatePricePDP = function(productPrice) {
        if( $('.yourPriceEspot').length > 0 && productPrice){
          if (!checkIfGenerateYourPrice()) return;

          var intProdPrice = convertToNumber(productPrice);
          var takenFromWallet = (rewardValue > intProdPrice) ? intProdPrice : rewardValue;
          var html = espotHtml.replace('%price%', ((intProdPrice - rewardValue > 0 ) ? (intProdPrice - rewardValue).toFixed(2) : '0.00' ))
                              .replace('%balance%',takenFromWallet),
              $yourPriceContainer = $('<div />', {'class': 'yourPrice', html: html});
          $pdpPriceContainer.find('.yourPrice').remove();
          $pdpPriceContainer.find('.conditionContainer:visible').prepend($yourPriceContainer);
        }
      },

      updatePriceOverlay = function(total, containerHtml) {
        if (!checkIfGenerateYourPrice()) return;

        containerHtml = $('#basketOverlay .basketReview');
        var intTotal = convertToNumber(total),
            productPrice = convertToNumber(getCurrentProductPrice());

        var takenFromWallet = (rewardValue > productPrice) ? productPrice : rewardValue,
            basketTotal = ((intTotal - rewardValue > 0 ) ? (intTotal - rewardValue).toFixed(2) : '0.00' );

        $('.yourPriceOverlayEspot .value span', containerHtml).text(takenFromWallet);
        $('.total .value', containerHtml).text('£' + basketTotal);
      },

      init = function(){
        $(document).ready(function(){
          if (checkIfGenerateYourPrice()) {
            rewardValue = (typeof initialResponse.walletInfo != 'undefined') ? convertToNumber(initialResponse.walletInfo.walletPriceValue) : convertToNumber(initialResponse.rewardInfo.rewardPointsPriceValue);
            updatePricePDP(getCurrentProductPrice());
          }
        });
      };

  // can be a case that AjaxInitialView didnt come back with response yet
  if (initialResponse === '') {
    $(document).ajaxSuccess(function(event, xhr, settings) {
      if (settings.url.indexOf('AjaxInitialView') != -1) {
        initialResponse = window.ajaxInitialReponse;
        init();
      }
    });
  } else {
    init();
  }

  return {
    updatePricePDP: updatePricePDP,
    updatePriceOverlay: updatePriceOverlay
  }
});




App.PDP.FormatSelect = new(function() {

  $(document).ready(function() {
    var $format = $('.panelContainer .dropdownContainers');

    if ($format.length > 0) {
      $format.find('.selected').on('click', function() {
        $(this).parent().parent().find('.dropdown').slideToggle('fast');
      });

      $format.find('.dropdown li').on('click', function() {
        var url = $(this).data('url');

        if (typeof url != 'undefined') {
          Salmon.Global.uiBlocker.blockUI();
          window.location.href = url;
        }
      });
    }
  });
});

App.PDP.ProductInfoTabs = new(function() {

  $(document).ready(function() {
    var $links = $('.descContent:not(.buyingChoices) .head a'),
        $sections = $('.descContent:not(.buyingChoices) > .main'),
        setupEvent = false,
        triggerCoremetrics = function($el) {
          var coremetricTags = $el.data('coremetricstags');
          if (typeof coremetricTags != 'undefined') {
            cmCreateElementTag('PDP Extra Info Tabs','Merchandising', coremetricTags);
          }

        }

    $sections.each(function(){
      if ($(this).text().replace(/\s/g, "").length > 0) {
        $links.eq($.inArray(this, $sections)).css('display','block');
        setupEvent = true;
      }
    });

    if (setupEvent && $links.length > 1) {

      $links.on('click', function(e){
        e.preventDefault();
        $sections.hide();
        $sections.eq($.inArray(this, $links)).show();
        $('.descContent .head .selected').removeClass('selected');
        $(this).addClass('selected');
      });

    }

     //if kit
    if ($links.length == 3) {
      $links.eq(0).trigger('click');
      if (!setupEvent) {
        $('.bundleExtraInfo').hide();
      }
    }

  });
});



App.PDP.Ratings = new(function() {

  new App.Global.Ratings($("#rating, #detailsRating, #secondary div.productCrossSells li.review"));
});

App.PDP.ReviewRatings = new(function() {

  $(document).ready(function() {
    var ratingsLabel = $('<p>').addClass('label');
    var ratingsStars = $('#ratingsContainer .rating').clone();
    var ratingsCount = $('#ratingsContainer .ratingCount').text().slice(1, -1);

    $(ratingsLabel).text('Average based on ' + ratingsCount + ' customers ');
    $(ratingsLabel).appendTo('#userRating');
    $(ratingsStars).appendTo('#userRating');
  });
});

App.PDP.ReviewsController = new(function() {

  $(document).ready(function() {

    var reviews = $('ul.reviewsList').find('li.review div.reviewBody');
    var options = {
      'extraChars': ['&#8221;'] // array of characters to be added to the end (after ellipsis)
    };

    Salmon.Global.TextTruncator(reviews, options);
  });
});


/*
$(document).ready(function() {

  var platformImages = new App.Global.PlatformImages();

  platformImages.setUpImages($('li#platforms'));

  Salmon.Global.Warranties.WarrantiesTermsOverlay();
});

*/


App.PDP.MPItemPriceChange = new(function() {
  $(document).ready(function() {

    $(document).on('click', '#basketOverlay .CTAs.marketplace .keep a', function(e) {
      e.preventDefault();
      $('#basketOverlay .mpStatus').slideToggle();
    });
  });
});


App.PDP.ShowMoreDescription = new(function() {
  $(document).ready(function() {
    var maxHeight = 260,
        $scrollContent = $('.scrollContent'),
        $showMoreButton = $scrollContent.find('.showMore');

    if ($scrollContent[0].scrollHeight > maxHeight) {
      $showMoreButton.on('click', function(e){
        e.preventDefault();
        $scrollContent.toggleClass('opened');
        $showMoreButton.toggleClass('opened');
      })
    } else {
      $showMoreButton.hide();
      $scrollContent.css('height', 'auto');
    }
  });
});


App.PDP.RewardPointsSidebar = new(function() {

  $(document).ready(function() {
    if ($('.section.rewardPoints').length === 0) $('aside').addClass('noReward');
  });
});

var App = App || {};
App.PDP = App.PDP || {};


App.PDP.DeliveryCountdown =  (function() {
	var $container = $('.section.deliveryCountdown'),

		countDownInfo = Game.CurrentPage.CountDownInfo,

		deadline,

		getTodayDateFromTime = function(time){
			var d = new Date(),
				hours = parseInt(time.split(':')[0]),
				minutes = parseInt(time.split(':')[1]);
			d.setHours(hours);
			d.setMinutes(minutes);
			d.setSeconds(0);
			return d;
		},

		getTimeRemaining = function(currentTime){
		  	var t = Date.parse(deadline) - Date.parse(currentTime);
			return {
			    'total': t,
			    'hours': Math.floor( (t/(1000*60*60)) % 24 ),
			    'minutes': Math.floor( (t/1000/60) % 60 )

			};
		},

		isInBetweenTime = function(afterTime, cutoffTime, time){
			deadline = getTodayDateFromTime(cutoffTime);
			return time > getTodayDateFromTime(afterTime) && time < deadline;
		},

		countDownShouldBeDisplayed = function(){

			var timeToDisplayCountdown = deadline;
			timeToDisplayCountdown.setHours(deadline.getHours() - parseInt(countDownInfo.countDownDisplayBeforeTime));
			
			return new Date() > timeToDisplayCountdown;
		},

		displayMessage = function(){
			$container.html('<p class="message">' + countDownInfo.countDownBeforeMessage + '</p>');
		},

		updateInterval = function($hours, $minutes){
			var currentTime = new Date();
			if (isInBetweenTime(countDownInfo.countDownStartTime, countDownInfo.countDownCutoffTime, currentTime)){
				var timeRemaining = getTimeRemaining(currentTime),
					hoursTitle = (timeRemaining.hours == 1) ? 'hour ' : 'hours ',
					minutesTitle = (timeRemaining.minutes == 1) ? 'minute' : 'minutes';

				if (timeRemaining.hours == 0) 
					$hours.hide();
				else
					$hours.html('<span>' + timeRemaining.hours + '</span> ' + hoursTitle);
				
				$minutes.html('<span>' + timeRemaining.minutes + '</span> ' + minutesTitle);
			} else {
				$container.hide();
			}
		},

		displayCountdown = function(){
			var $hours = $('<span />',{class: 'hours'}),
				$minutes = $('<span />', {class: 'minutes'}),
				$time = $('<span />', {class: 'time'}).append($hours).append($minutes);


			$container.html('<p class="after">' + countDownInfo.countDownMessage + '</p>');
			$container.find('span').eq(0).replaceWith($time);

			updateInterval($hours, $minutes);
			setInterval(function(){
				updateInterval($hours, $minutes);
			}, 60000)
		},

		init = function(){
			if ($('.tabLinks li').length == 1 && $('.tabLinks li').eq(0).hasClass('downloadLink')) {
				$container.hide();
				return;
			}
			countDownInfo = Game.CurrentPage.CountDownInfo;
			$container.addClass('visible');
			if (countDownShouldBeDisplayed())
				displayCountdown();
			else
				displayMessage();

		};


	if (
		$container.length > 0 
		&& typeof Game.CurrentPage.CountDownInfo != 'undefined' 
		&& isInBetweenTime(Game.CurrentPage.CountDownInfo.countDownStartTime, Game.CurrentPage.CountDownInfo.countDownCutoffTime, new Date())
	) {
		init();
	} else {
		if ($container.length > 0) $container.hide();
	}
		


	return {
		getTodayDateFromTime: getTodayDateFromTime,
		isInBetweenTime: isInBetweenTime
	}
})();
App.PDP.MarketplaceTableFilteringViewModel = function(master) {

  var PDPMarketplaceTableFilteringModel = function(master) {

    var Filtering = this;
    // $marketplaceItemsList = $('#marketplaceItemsList');

    Filtering.filters = [
      { title: 'All', count: master.marketplaceItemsTotalCount, filter: null }, {
        title: 'New',
        count: master.marketplaceMintItemsCount,
        filter: function(mpItem) {
          return mpItem.provenance == 'Mint';
        }
      }, {
        title: 'Preowned',
        count: master.marketplacePreOwnedItemsCount,
        filter: function(mpItem) {
          return mpItem.provenance == 'PreOwned';
        }
      }
    ];

    Filtering.activeFilter = ko.observable(Filtering.filters[0].filter);
    Filtering.paginationPointer = ko.observable(1);
    Filtering.totalFilteredAmount = ko.observable();
    Filtering.topAmountPaginated = ko.computed(function() {
      return (Filtering.paginationPointer() + 2 > Filtering.totalFilteredAmount()) ? Filtering.totalFilteredAmount() : Filtering.paginationPointer() + 2;
    });
    Filtering.selectedSortValue = ko.observable();
    Filtering.selectedSortValue.subscribe(function(newValue) {
      var sortByFunction;
      switch (newValue) {
        case 'price':
          sortByFunction = function(left, right) {
            return (parseFloat(left.unitPrice) > parseFloat(right.unitPrice)) ? 1 : -1;
          };
          break;
        case 'price_delivery':
          sortByFunction = function(left, right) {
            return (parseFloat(left.totalPrice) > parseFloat(right.totalPrice)) ? 1 : -1;
          };
          break;
        case 'reviews':
          sortByFunction = function(left, right) {
            return (parseFloat(left.vendorNumberOfRatings) > parseFloat(right.vendorNumberOfRatings)) ? 1 : -1;
          };
          break;

      }

      master.marketplaceItems.sort(sortByFunction);
    });

    Filtering.hideNavigation = ko.computed(function() {
      return !(master.marketplaceMintItemsCount() === 0 || master.marketplacePreOwnedItemsCount() === 0);
    });

    Filtering.setActiveFilter = function(model, event) {
      console.log("logging: mark55");
      $(event.currentTarget).siblings('.current').removeClass('current');
      $(event.currentTarget).addClass('current');
      event.preventDefault();
      Filtering.paginationPointer(1);
      Filtering.activeFilter(model.filter);

    };

    Filtering.filteredItems = ko.computed(function() {

      var result;    
      if (Filtering.activeFilter()) result = ko.utils.arrayFilter(master.marketplaceItems(), Filtering.activeFilter());
      else result = master.marketplaceItems();
      Filtering.totalFilteredAmount(result.length);
      return result.slice(Filtering.paginationPointer() - 1, Filtering.paginationPointer() + 2);

        
    });
  };
  return new PDPMarketplaceTableFilteringModel(master);
};



App.PDP.MarketplaceTableSellerDetailsViewModel = function(master) {

  var PDPMarketplaceTableSellersDetailsModel = function(master) {
    var $sellerDetails = $('.sellerDetailsContainer');
    var sellerDetails = this,
      requestUrl = '/webapp/wcs/stores/servlet/m/AJAXMarketplaceSellerDeliveryDetails?msg=&vendorShopId=',

      $selectedSeller;


    sellerDetails.detailsActive = ko.observable(false);
    sellerDetails.details = ko.observable({

      sellerName: "",
      sellerInfo: "",
      sellerShippingDetails: []

    });

    sellerDetails.getSellerDetails = function(model, event) {
      event.preventDefault();

      var sellerId = model.vendorShopId;
      // $currentButton = $(event.currentTarget);
      sellerDetails.sendRequest(sellerId);
    };

    sellerDetails.sendRequest = function(sellerId) {
      // console.log("logging: mark113");
      $.get(requestUrl + sellerId, function(res) {
        // console.log("logging: mark115");
        var details = JSON.parse(res),
          shipping = JSON.parse(details.shipping),
          html;

        html = '<div class="sellerDetails">';
        html += '<h2>' + details.supplier.name + '</h2>';
        html += '<div class="info">' + details.supplier.sellerInfo + '</div>';
        html += '<div class="shipping">';
        for (var i in shipping) {
          html += '<div><div class="label">' + shipping[i].label + '</div><div class="region">' + shipping[i].region + '</div></div>';
        }
        html += '</div>';
        html += '</div>';

        Salmon.Global.Modal.openModal(html, 'sellerDetails');

      });
    };


    sellerDetails.afterSellerDetailsUpdated = function() {
      if (typeof $selectedSeller != 'undefined') {
        $('#marketplaceItemsList .sellerDetailsContainer').remove();
        $selectedSeller.after($sellerDetails.clone());
      }
    };
  };

  return new PDPMarketplaceTableSellersDetailsModel(master);
};




App.PDP.buyButtonsViewModel = function(master, vendorShopId) {

  var PDPMarketplaceBuyButtons = function(master, vendorShopId) {

    var buyButtons = this,
      $pdpPriceTabs = $('#pdpPriceTabs'),
      $mintTabButton = $('#mintTabButton'),
      $mintPriceContainer = $('#mainPDPButtons'),
      $pdpPriceContainers = $('#mainPDPButtons'),
      $outOfStock = $('aside .section.buyingOptions .outOfStock'),
      generateMint = (typeof Game.CurrentPage.MarketplaceInfo != 'undefined' && !Game.CurrentPage.MarketplaceInfo.mintGameAvailable),
      generatePreowned = (typeof Game.CurrentPage.MarketplaceInfo != 'undefined' && !Game.CurrentPage.MarketplaceInfo.preownedGameAvailable),
      tabButtonTemplateName = 'tabButtonTemplate',
      containerTemplateName = 'buyButtonsContainerTemplate',
      addedTab = false,
      generateTemplateHtml = function(data) {

        var $buttonTemp = $('<div />'),
          $containerTemp = $('<div />');
        ko.applyBindingsToNode($buttonTemp[0], { template: { name: tabButtonTemplateName, data: data } });
        ko.applyBindingsToNode($containerTemp[0], { template: { name: containerTemplateName, data: data } });
        var $buttonHtml = $($buttonTemp.html().replace(/data-bind=".*"/g, "")),
          $containerHtml = $($containerTemp.html().replace(/data-bind=".*"/g, ""));

        var conditionClass = data.condition.toLowerCase().replace('-', '');
        if (conditionClass == 'new') {
            conditionClass = 'Mint';
        } else if(conditionClass == 'preowned') {
            conditionClass = 'Preowned';
        }

        $containerHtml.attr('class', 'btn' + conditionClass);

        if (data.condition == 'Pre-owned') {

          //PREOWNED
          //check if game preowned button isnt there first
          if(!$('.btnPreowned').length) {
              if($('.btnMint').length > 0) {
                  $($containerHtml).insertAfter($('.btnMint'));
              } else {
                  $pdpPriceContainers.prepend($containerHtml);
              }
          }

        } else {
            //MINT
            //check if game mint button isnt there first
            if(!$('.btnMint').length) {
                $pdpPriceContainers.prepend($containerHtml);
            }
        }
        $buttonTemp.remove();
        $containerTemp.remove();
      },
      sortByPrice = function(left, right) {
        console.log("logging: mark195");
        return (parseFloat(left.totalPrice) > parseFloat(right.totalPrice)) ? 1 : -1;
      },
      deliveryPrice;

    buyButtons.mintItems = ko.observableArray((typeof vendorShopId !== 'undefined' && vendorShopId !== '') ? master.marketplaceData.mintItems.filter(function(item) {
      return item.vendorShopId == vendorShopId;
    }) : master.marketplaceData.mintItems);
    buyButtons.preOwnedItems = ko.observableArray((typeof vendorShopId !== 'undefined' && vendorShopId !== '') ? master.marketplaceData.preOwnedItems.filter(function(item) {
      return item.vendorShopId == vendorShopId;
    }) : master.marketplaceData.preOwnedItems);
    buyButtons.mintItems.sort(sortByPrice);
    buyButtons.preOwnedItems.sort(sortByPrice);

    buyButtons.promotedItems = ko.observableArray();

    if (generateMint && buyButtons.mintItems().length > 0) {
      var firstMintItem = buyButtons.mintItems()[0],
        templateData = {
          condition: 'New',
          price: '£' + master.processPrice(firstMintItem.unitPrice),
          vendorShopName: firstMintItem.vendorShopName,
          buttonText: 'Buy New',
          deliveryText: 'Delivery from £'+(firstMintItem.deliveryPrice).toFixed(2),
          addToBasketUrl: master.generateAddToBasketUrl(firstMintItem),
          addToWishlistUrl: master.generateAddToWishlistUrl(firstMintItem)
        };
      addedTab = true;
      generateTemplateHtml(templateData);
      $outOfStock.hide();
      buyButtons.mintItems.shift();
      deliveryPrice = firstMintItem.deliveryPrice;
    }

    if (generatePreowned && buyButtons.preOwnedItems().length > 0) {
      var firstPreownedItem = buyButtons.preOwnedItems()[0],
        templateData = {
          condition: 'Pre-owned',
          price: '£' + master.processPrice(firstPreownedItem.unitPrice),
          vendorShopName: firstPreownedItem.vendorShopName,
          buttonText: 'Buy Preowned',
          deliveryText: 'Delivery from £'+(firstPreownedItem.deliveryPrice).toFixed(2),
          addToBasketUrl: master.generateAddToBasketUrl(firstPreownedItem),
          addToWishlistUrl: master.generateAddToWishlistUrl(firstPreownedItem)
        };
      addedTab = true;
      generateTemplateHtml(templateData);
      $outOfStock.hide();
      buyButtons.preOwnedItems.shift();
      deliveryPrice = firstPreownedItem.deliveryPrice;
    }
    if ($outOfStock.length > 0 && !addedTab) {
      $pdpPriceTabs.hide();
    }
    if (addedTab) {
      App.PDP.Marketplace.checkInitialHash();
      if ($('.buyingOptions #pdpPriceTabs a').length > 1 ) $pdpPriceTabs.show();

      if (typeof vendorShopId !== 'undefined' && vendorShopId.toString().length > 0) App.PDP.Marketplace.generateDeliveryBox(deliveryPrice);
    }
    buyButtons.promotedItems(buyButtons.mintItems().concat(buyButtons.preOwnedItems()));
    if (buyButtons.promotedItems().length > 0) {
      ko.applyBindings({
        promotedItems: buyButtons.promotedItems().slice(0, 3),
        master: master
      }, $('aside .section.moreBuyingOptions')[0]);
      $('aside .section.moreBuyingOptions').show();
    } else {
      $('aside .section.moreBuyingOptions').hide();
    }


  };

  return new PDPMarketplaceBuyButtons(master, vendorShopId);
};

// $(document).on('click', '.moreBuyingOptions .seeAll, .otherOffersStackedCTA', function(event) {
//   event.preventDefault();
//   $("html, body").animate({ scrollTop: $('.section.buyingChoices').offset().top - 45 });
// });

App.PDP.MarketplaceViewModel = function(config) {

  var PDPMarketplaceTableViewModel = function(config) {

    var self = this,
      handleMoreOffersCTA = function() {
        if (self.marketplaceItems().length > 0) {
          $('.otherOffersStackedCTA span').html("&pound;" + self.processPrice(self.marketplaceLowestPrice())).parent().on('click', function(e){
            e.preventDefault();
            $("html, body").animate({ scrollTop: $('.section.buyingChoices').offset().top - 45 });
          });
        } else {
          $('.otherOffersStackedCTA').hide();
          //$('.MarketplaceDeliveryinfo_PDP').hide();
        }
      };

    self.marketplaceData = ko.observableArray();
    self.marketplaceItems = ko.observableArray();

    self.marketplaceMintItemsCount = ko.observable();
    self.marketplacePreOwnedItemsCount = ko.observable();
    self.marketplaceLowestPrice = ko.observable();
    self.marketplaceItemsTotalCount = ko.computed(function() {

      return self.marketplaceMintItemsCount() + self.marketplacePreOwnedItemsCount();
    });

    self.promotedItems = ko.observableArray();

    // ************************************** \\
    // *             Seller details         * \\
    // ************************************** \\
    self.sellerDetails = new App.PDP.MarketplaceTableSellerDetailsViewModel(self);

    // ************************************** \\
    // *    Filtering of the items table    * \\
    // ************************************** \\
    self.Filtering = new App.PDP.MarketplaceTableFilteringViewModel(self);

    // ************************************** \\
    // *           Buy Tabs logic           * \\
    // ************************************** \\
    /* self.buyButtons = new buyButtons(self); */




    // ************************************** \\
    // *          Helpers function          * \\
    // ************************************** \\

    self.processDeliveryPrice = function(price) {
      return (parseFloat(price) !== 0) ? 'Delivery from £' + parseFloat(price).toFixed(2) : "Free delivery";
    };

    self.processPrice = function(price) {
      return parseFloat(price).toFixed(2);
    };
    self.expandDescription = function(model, event){
      var $button = $(event.currentTarget),
          $span = $button.parent().find('.description');

      $span.text(model.description);
      $button.hide();

    }

    self.expandTopDescription = function(model, event){
      var $button = $(event.currentTarget),
          $container = $button.parent().parent().find('.descriptionContainer');

      $container.slideToggle('fast');
      $button.toggleClass('opened')
    }

    self.processRatingClass = function(rating) {
      return "rating" + rating;
    };

    self.processCondition = function(condition) {
      console.log("logging: mark327");
      return (condition == 'PreOwned') ? 'Pre-owned' : condition;
    };

    self.generateAddToBasketUrl = function(itemData) {
      console.log("logging: mark332");
      var itemSpecificParams = ['vendorOfferId', 'catEntryId_1', 'productId_1', 'unitPrice', 'partNumber'],
        queryString = '';
      if (itemData.catEntryId) {
        itemData.catEntryId_1 = itemData.catEntryId;
        itemData.productId_1 = itemData.catEntryId_1;
      }

      for (var i in itemSpecificParams) {
        var param = itemSpecificParams[i];
        queryString += '&' + param + '=' + itemData[param];
      }
      queryString += '&marketplaceItem=true'
      return config.addToBasketUrl + config.addToBasketUrlParams + queryString;
    };

    self.generateVendorUrl = function(vendorId) {
      return config.vendorUrl + vendorId;
    };

    self.generateVendorDeliveryDetailsUrl = function(vendorId){
      return config.vendorUrl + vendorId + '#sellerDeliveryInfo';
    }    

    self.generateThumbnailSrc = function(vendorId) {
      return Salmon.Global.PageContext.MARKETPLACE_SELLER_LOGO_URL_SMALL + '/' + vendorId + '.png';
      //return '//img.game.co.uk/images/mkt/sellers/53x53/2076.png';
    };

    self.generateAddToWishlistUrl = function(itemData) {
      console.log("logging: mark360");
      return config.addToWishlistUrl + config.addToWishlistUrlParams + '&catEntryId=' + itemData.catEntryId;
    };

    self.getLowestPrice = function() {

      var lowestPrice = 9999,
        mpItems = self.marketplaceItems();

      for (var i in mpItems) {
        if (mpItems[i].unitPrice < lowestPrice) lowestPrice = mpItems[i].unitPrice;
      }

      return lowestPrice;

    };

    self.getMarketplaceData = function() {

      if (typeof Game.CurrentPage.PageInfo.ProductID != "undefined") {
        var options = Game.CurrentPage.MarketplaceInfo,
          vendorShopId = (typeof $('body').data('vendorid') != 'undefined') ? $('body').data('vendorid') : '';
        options.productId = Game.CurrentPage.PageInfo.ProductID;

        $.get(config.marketplaceRequestUrl, options, function(res) {
          self.marketplaceData = JSON.parse(res);
          self.marketplaceMintItemsCount(self.marketplaceData.mintItems.length);
          self.marketplacePreOwnedItemsCount(self.marketplaceData.preOwnedItems.length);
          self.marketplaceItems(self.marketplaceData.mintItems.concat(self.marketplaceData.preOwnedItems));
          self.marketplaceItems.sort(function(left, right) {
            return (parseFloat(left.unitPrice) > parseFloat(right.unitPrice)) ? 1 : -1;
          });

          if (vendorShopId !== '') {
            self.marketplaceItems(self.marketplaceItems().filter(function(item) {
              return item.vendorShopId == vendorShopId;
            }));
            if (self.marketplaceItems().length == 1 || (self.marketplaceMintItemsCount() == 1 && self.marketplacePreOwnedItemsCount() == 1)) self.marketplaceItems([]);
          }

          ko.applyBindings(new App.PDP.buyButtonsViewModel(self, vendorShopId), $('aside .section.buyingOptions')[0]);
          self.marketplaceLowestPrice(self.getLowestPrice());
          handleMoreOffersCTA();
        });
      }

    };

    self.getMarketplaceData();
  };
  return new PDPMarketplaceTableViewModel(config);
};



App.PDP.Marketplace = (function(){
  "use strict";

  var config = {
    marketplaceRequestUrl: '/webapp/wcs/stores/servlet/MarketplaceSupplierItemsInterface',
    addToBasketUrl: '/webapp/wcs/stores/servlet/OrderChangeServiceItemAdd',
    addToBasketUrlParams: '?errorViewName=AjaxActionErrorResponse&quantity=1&page=pdpPage&updateable=0&URL=AjaxMiniShoppingBagView&storeId=' + Game.Global.Vars.storeId + '&langId=' + Game.Global.Vars.langId + '&catalogId=' + Game.Global.Vars.catalogId,
    addToWishlistUrl: '/webapp/wcs/stores/servlet/mInterestItemAdd',
    addToWishlistUrlParams: '?catalogId=10201&categoryId=&langId=44&storeId=10151&mobileFlag=true&URL=',
    vendorUrl: '/webapp/wcs/stores/servlet/MarketplaceSellerDetailsView?catalogId=' + Game.Global.Vars.catalogId + '&langId=' + Game.Global.Vars.langId + '&storeId=' + Game.Global.Vars.storeId + '&URL=mMarketplaceSellerDetailsView&vendorShopId=',

    //We need to pass it to marketplace viewmodel to trigger after ajax comes back

    isSafari:  /^((?!chrome).)*safari/i.test(navigator.userAgent)
  };

  var $elements = new function(){
    this.buyOptionsSection = $('aside .section.buyingOptions');
    this.marketplaceTable = $('#marketplaceTable');
  }

  var perfectPartnersControler = (function(){
    var $perfectPartnersContainers = $(".perfectPartnersContainer"),
        changePerfectPartner = function(provenance){
          // Removed as this logic is now handled by BE
          // $perfectPartnersContainers.hide();

          // if (provenance === 'new') {
          //   provenance = 'mint';
          // };

          // if (isNaN(provenance)){
          //   if ((provenance == 'preorder' || provenance == 'preowned' || provenance == 'download') && $perfectPartnersContainers.filter('#' + provenance + 'PerfectPartnerSection').length == 0) {
          //     if ($perfectPartnersContainers.filter('#mintPerfectPartnerSection').length != 0) {
          //       $perfectPartnersContainers.filter('#mintPerfectPartnerSection').show();
          //     } else {
          //       return;
          //     }
          //   } else {
          //     if (provenance == 'mint' && $perfectPartnersContainers.filter('#mintPerfectPartnerSection').length == 0)
          //       return;
          //     else
          //       $perfectPartnersContainers.filter('#' + provenance + 'PerfectPartnerSection').show();
          //   }


          // } else {
          //   if (typeof $perfectPartnersContainers.eq(provenance) == 'undefined') return;
          //   $perfectPartnersContainers.eq(provenance).show();
          // }

        }

    return {
      changePerfectPartner: changePerfectPartner
    }
  })();

  var linkedPartnersControler = (function(){
    var $linkedPartnersContainers = $('.linkedPartnersContainer'),
        changeLinkedPartner = function(provenance){
          $linkedPartnersContainers.hide();

          if (provenance === 'new') {
            provenance = 'mint';
          };

          if (isNaN(provenance)){
            if (provenance == 'preowned' || provenance == 'download' || provenance == 'preorder') {
              if ($linkedPartnersContainers.filter('#mintLinkedPartnerSection').length != 0) {
                $linkedPartnersContainers.filter('#mintLinkedPartnerSection').show();
              } else {
                return;
              }
            } else {
              if (provenance == 'mint' && $linkedPartnersContainers.filter('#mintLinkedPartnerSection').length == 0)
                return;
              else
                $linkedPartnersContainers.filter('#' + provenance + 'LinkedPartnerSection').show();
            }


          } else {
            if (typeof $linkedPartnersContainers.eq(provenance) == 'undefined') return;
            $linkedPartnersContainers.eq(provenance).show();
          }

        }

    return {
      changeLinkedPartner: changeLinkedPartner
    }
  })();
  var scrollToMoreOffersHandler = function(){
    $elements.otherOffersButton.on('click',function(e){
      e.preventDefault();
      $elements.sections.marketplaceTable.slideToggleSection();
      $("html, body").animate({ scrollTop: $elements.sections.marketplaceTable.offset().top - 45 });
    });
  }

  var buyButtonsHandler = function(){

    var $sectionLinks = $elements.buyOptionsSection.find('.tabLinks li'),
      $sections = $elements.buyOptionsSection.find('.tabs > div'),
      selectSection = function(section){
        if (isNaN(section) && ($sections.filter('.' + section + 'Tab').length == 0 || $sectionLinks.filter('.' + section + 'Link').length == 0)) return;
        $elements.buyOptionsSection.find('.tabLinks li.current').removeClass('current');
        $elements.buyOptionsSection.find('.tabs > .current').removeClass('current');

        if (isNaN(section)) {
          $sections.filter('.' + section + 'Tab').addClass('current');
          $sectionLinks.filter('.' + section + 'Link').addClass('current');

        } else {
          $sections.eq(section).addClass('current');
          $sectionLinks.eq(section).addClass('current');
        }
        // Removed as this logic is now handled by BE
        //perfectPartnersControler.changePerfectPartner(section);
        linkedPartnersControler.changeLinkedPartner(section);




      },

      checkInitialHash = function(){
        var hash = document.location.hash;
        $sectionLinks = $elements.buyOptionsSection.find('.tabLinks li');
        $sections = $elements.buyOptionsSection.find('.tabs > div');

        if (hash) {
          switch (hash) {
            case '#preowned':
              selectSection('preowned');
              break;

            case '#':
              selectSection('new');
              break;

            case '#new':
              selectSection('new');
              break;

            case '#download':
              selectSection('download');
              break;

            case '#preorder':
              selectSection('preorder');
              break;
          }
        } else {
          if ($('.buyingOptions .tabLinks li.current').length == 0) {
            $sectionLinks.eq(0).addClass('current');
            $sections.eq(0).addClass('current');
          }
          var currentCondition = 'new';

          if ($sectionLinks.length > 0) {
            currentCondition = $sectionLinks.filter('.selected').attr('id').replace('TabButton','');
          };
          // Removed as this logic is now handled by BE
          //perfectPartnersControler.changePerfectPartner(currentCondition);
          linkedPartnersControler.changeLinkedPartner(currentCondition);
        }
      };

    $(document).on('click', '.buyingOptions .tabLinks li', function(){
      $sectionLinks = $elements.buyOptionsSection.find('.tabLinks li');
      $sections = $elements.buyOptionsSection.find('.tabs > div');
      var index = $.inArray(this, $elements.buyOptionsSection.find('.tabLinks li'));
      selectSection(index);
    });
    if ($sections.length == 1) {
      $sectionLinks.eq(0).addClass('current');
      $sections.eq(0).addClass('current');
    }
    checkInitialHash();
    App.PDP.showStockCheckerTitle();

    return {
      checkInitialHash: checkInitialHash
    }

  }

  var currentConditionEspot = function(){

    var currentOffer;
    $('#pdpPriceTabs a').each(function(){
      if ($(this).hasClass('selected')) {
        currentOffer = $(this).attr('id');
        return false;
      }
    });

    var mintContainer = $('.Gameitemdeliveryinfo_PDP_new');
    var preoContainer = $('.Gameitemdeliveryinfo_PDP_preo');
    var mpContainer = $('.MarketplaceDeliveryinfo_PDP');
    var isMpItem = $('#preownedPriceContainer').find('.vendorName').length;

    if (currentOffer === 'mintTabButton') {
      mintContainer.css('display','inline');
      preoContainer.hide();
      mpContainer.hide();
    } else if (currentOffer === 'preownedTabButton') {
      mintContainer.hide();

      if (isMpItem === 0) {
        preoContainer.css('display','inline');
        mpContainer.hide();
      } else {
        preoContainer.hide();
        mpContainer.css('display','inline');
      }
    }
  };

  var deliveryESpot = function(price, hash) {
    var currentPdpPrice = price;
    var currentHash;
    var locationHash = window.location.hash.replace('#','').toLowerCase();

    if (typeof hash !== 'undefined') {
      currentHash = hash;
    } else if (locationHash !== '') {
      currentHash = locationHash;
    } else {
       currentHash = 'new';
    }

    if (currentHash === 'mint') {
      currentHash = 'new';
    }

    if (typeof currentPdpPrice === 'undefined') {
      if (currentHash === 'preowned') {
        currentPdpPrice = parseFloat($('#preownedPriceContainer').find('.price').text().trim().replace(/£|&pound;/g,''),10);
      } else {
        currentPdpPrice = parseFloat($('.conditionContainer:first-child').find('.price').text().trim().replace(/£|&pound;/g,''),10);
      }
    }

    var $Gameitemdeliveryinfo_PDP_new = $('.Gameitemdeliveryinfo_PDP_new');
    var $Gameitemdeliveryinfo_PDP_preo = $('.Gameitemdeliveryinfo_PDP_preo');
    var $DPDdeliveryinfo_PDP_new = $('.DPDdeliveryinfo_PDP_new');
    var $DPDdeliveryinfo_PDP_preowned = $('.DPDdeliveryinfo_PDP_preowned');
    var $DPDdeliveryinfo_PDP_preorder = $('.DPDdeliveryinfo_PDP_preorder');
    var $PreorderDeliveryinfo_PDP = $('.PreorderDeliveryinfo_PDP');
    var $DownloadsEspot_PDP = $('.DownloadsEspot_PDP');
    var $MarketplaceDeliveryinfo_PDP = $('.MarketplaceDeliveryinfo_PDP');

    $Gameitemdeliveryinfo_PDP_new.hide();
    $Gameitemdeliveryinfo_PDP_preo.hide();
    $DPDdeliveryinfo_PDP_new.hide();
    $DPDdeliveryinfo_PDP_preowned.hide();
    $DPDdeliveryinfo_PDP_preorder.hide();
    $PreorderDeliveryinfo_PDP.hide();
    $DownloadsEspot_PDP.hide();
    $MarketplaceDeliveryinfo_PDP.hide();

    if (currentPdpPrice <= 150) {
      if ($Gameitemdeliveryinfo_PDP_new.length > 0 && currentHash === 'new') {
        $Gameitemdeliveryinfo_PDP_new.show();
      }

      if ($Gameitemdeliveryinfo_PDP_preo.length > 0 && currentHash === 'preowned') {
        $Gameitemdeliveryinfo_PDP_preo.show();
      }

      if ($PreorderDeliveryinfo_PDP.length > 0 && currentHash === 'preorder') {
        $PreorderDeliveryinfo_PDP.show();
      }

      if ($DownloadsEspot_PDP.length > 0 && currentHash === 'download') {
        $DownloadsEspot_PDP.show();
      }
    } else {
      if ($DPDdeliveryinfo_PDP_new.length > 0 && currentHash === 'new') {
        $DPDdeliveryinfo_PDP_new.show();
      }

      if ($DPDdeliveryinfo_PDP_preowned.length > 0 && currentHash === 'preowned') {
        $DPDdeliveryinfo_PDP_preowned.show();
      }

      if ($DPDdeliveryinfo_PDP_preorder.length > 0 && currentHash === 'preorder') {
        $DPDdeliveryinfo_PDP_preorder.show();
      }

      if ($DownloadsEspot_PDP.length > 0 && currentHash === 'download') {
        $DownloadsEspot_PDP.show();
      }
    }
    if ($MarketplaceDeliveryinfo_PDP.length > 0 || $('.otherOffersStackedCTA').length > 0) {
    	$MarketplaceDeliveryinfo_PDP.show();
    }

    currentConditionEspot();
  };

  App.PDP.showStockCheckerTitle = function(){
	  $(window).on('load', function(){
	  	var isGameMintSelected = Game.CurrentPage.MarketplaceInfo.mintGameAvailable && $('#mintTabButton').hasClass('selected');
	  	var isGamePreOwnedSelected = Game.CurrentPage.MarketplaceInfo.preownedGameAvailable && $('#preownedTabButton').hasClass('selected');
	  	var isOOS = $('#preorderPriceContainer').length==0 && $('#mintPriceContainer').length==0 && $('#preownedPriceContainer').length==0 && $('#downloadPriceContainer').length==0;
	  	var isKitMintOrPreowned = Game.CurrentPage.MarketplaceInfo.isKit && (Game.CurrentPage.MarketplaceInfo.mintGameAvailable || Game.CurrentPage.MarketplaceInfo.preownedGameAvailable);
	    if($('#GAMEStockChecker').length && (isGameMintSelected || isGamePreOwnedSelected || isKitMintOrPreowned || isOOS)) {
	    	if($('.newInstoreStockChecker').length > 0) {
	    		$('.newInstoreStockChecker').show();
	    	}
	    	$('#GAMEStockChecker').show();
	    } else {
	    	if($('.newInstoreStockChecker').length) {
	    		$('.newInstoreStockChecker').hide();
	    	}
	    	$('#GAMEStockChecker').hide();
	    }
  	});
	};

  var buyButtonsHandlerStacked = function(){
    var $window = $(window),
        $pdpCTAsSection = $('.buyingOptions #pdpCTAs'),
        $buySectionTabs = $('.buyingOptions #pdpPriceTabs a'),
        $buySectionMainContainer = $('.buyingOptions #pdpPriceContainers'),
        $buySectionContainers = $('.buyingOptions .conditionContainer'),

        highlightIfFromPreowned = function(){

          if (document.referrer.indexOf('/preowned/') > -1 && $('#preownedTabButton').length > 0) {
            setTimeout(function(){
              $('#mintPriceContainer').hide();
              $('#preownedPriceContainer').show();
              $('#preownedTabButton').addClass('selected');
              $('#mintTabButton').removeClass('selected');
            }, 150);
          }

        },
        selectSection = function(condition){
          if (condition == 'new') condition = 'mint';
          if ($buySectionContainers.filter('#' + condition + 'PriceContainer').length == 0) return;
          $buySectionTabs.filter('.selected').removeClass('selected');
          $buySectionContainers.hide();
          $buySectionTabs.filter('#' + condition + 'TabButton').addClass('selected');
          $buySectionContainers.filter('#' + condition + 'PriceContainer').show();

          var currentPdpPrice = parseFloat($buySectionContainers.filter('#' + condition + 'PriceContainer').find('.price').text().trim().replace(/£|&pound;/g,''),10);
          deliveryESpot(currentPdpPrice);
          currentConditionEspot();
          // Removed as this logic is now handled by BE
          //perfectPartnersControler.changePerfectPartner(condition);
          linkedPartnersControler.changeLinkedPartner(condition);
          //Update your price
          if ($('.yourPriceEspot').length > 0) {
            App.PDP.YourPrice.updatePricePDP($buySectionContainers.filter('#' + condition + 'PriceContainer').find('.price').text());
          }

          $('.section.deliveryInfo .cc').toggleClass('hide');

        },
        checkInitialHash = function(){
            var hash = document.location.hash;
            $buySectionTabs = $('.buyingOptions #pdpPriceTabs a');
            $buySectionContainers = $('.buyingOptions .conditionContainer');

          if ($buySectionTabs.length == 1) $buySectionTabs.parent().hide();
          if (hash) {
              switch (hash) {
                  case '#preowned':
                    selectSection('preowned');
                    break;

                  case '#':
                    selectSection('new');
                    break;

                  case '#new':
                    selectSection('new');
                    break;

                  case '#download':
                    selectSection('download');
                    break;

                  case '#preorder':
                    selectSection('preorder');
                    break;
              }
            } else {
              if ($buySectionTabs.length > 0) {
                $buySectionTabs.removeClass('selected');
                $buySectionTabs.eq(0).addClass('selected');
                var currentCondition = $buySectionTabs.filter('.selected').attr('id').replace('TabButton','');
                // Removed as this logic is now handled by BE
                //perfectPartnersControler.changePerfectPartner(currentCondition);
                linkedPartnersControler.changeLinkedPartner(currentCondition);
              }

            }
        }

    if( $buySectionTabs.length == 1) $pdpCTAsSection.addClass('oneType');
    checkInitialHash();
    App.PDP.showStockCheckerTitle();


    $(document).on('click', '.buyingOptions #pdpPriceTabs a', function(e){
      e.preventDefault();
      $buySectionTabs = $('.buyingOptions #pdpPriceTabs a');
      $buySectionContainers = $('.buyingOptions .conditionContainer');
      var setCondition = $(this).attr('id').replace('TabButton','').toLowerCase();
      selectSection(setCondition);
      deliveryESpot(null, setCondition);
      currentConditionEspot();
      App.PDP.showStockCheckerTitle();
    });
    highlightIfFromPreowned();

    return {
      checkInitialHash: checkInitialHash
    }

  }
  var generateDeliveryBox = function(deliveryCost){
    var $deliverySection = $('<div />', {class: 'section mpDelivery', html: '<div class="inner"></div>'});

    if (deliveryCost == 0) {
      $deliverySection.find('.inner').html(Game.Global.StoreText.MpFreeDeliveryText);
    } else {
      $deliverySection.find('.inner').html(Game.Global.StoreText.MpDeliveryText);
      $deliverySection.find('span').html('&pound' + parseFloat(deliveryCost).toFixed(2));
    }
    $('.section.buyingOptions').after($deliverySection);
  }
  var init = function(pageOptions) {

    config = $.extend({}, config, pageOptions);
    config.$elements = $elements;
    ko.applyBindings(App.PDP.MarketplaceViewModel(config), $elements.marketplaceTable[0]);

    //scrollToMoreOffersHandler();
    buyButtonsHandler = (Salmon.Global.FeatureToggles.getFeature('PDPStackedButtons'))? buyButtonsHandlerStacked() : buyButtonsHandler();
    deliveryESpot();

  };


  if (Game && Game.CurrentPage.PageName == 'pdp') init();

  return {
    checkInitialHash: buyButtonsHandler.checkInitialHash,
    generateDeliveryBox: generateDeliveryBox

  }

})();

$(document).ready(function() {

  if (Game.featureToggles.NewHeaderAndFooter) {
    // thumbslider used to have no var included, changed during linting, if problems arise this could be the cause
    var slidesToFit = 1;
    if ($(window).width() > 768 && $(window).width() <= 1000) {
      slidesToFit = 2;
    } else if ($(window).width() > 1000 && $(window).width() <= 1700) {
      slidesToFit = 3;
    } else if ($(window).width() > 1700) {
      slidesToFit = 4;
    }
    $('.thumbSliderContainer').each(function(){
      var sliderOptions = {
        autoScroll: false,
        resizeSlides: false,
        slidesToFit: (Game.CurrentPage.PageName == 'pdpPackage') ? slidesToFit + 1 : slidesToFit,
        elements: {
          sliderContainer: $(this)
        }
      }
      if (Game.CurrentPage.PageName == 'pdpPackage') sliderOptions.containerWidth = 465;

      thumbSlider = new Salmon.Global.SimpleSlider.newSlider(sliderOptions);

    });
  }




  if (Game.featureToggles.NewHeaderAndFooter) {
    var pointer;
    var $slides = $('.thumbSlider ul li');
    var $currentSlides = [];
    var $slideImages = $slides.find('img');
    var $slideLinks = $slides.find('a');
    var arrows = '<span class="arrow prev">&nbsp;</span><span class="arrow next">&nbsp;</span>';
    var arrowClass;
    var limeLightIframe = '<iframe width="640" height="320" type="text/html" src="//link.videoplatform.limelight.com/media/?mediaId=%mediaId%&showInlinePlaylistOnLoad=false&width=620&height=300" frameborder="0" allowfullscreen="true" ></iframe>';


    var embedImage = function(index) {
      var $modal = $('.modal.opened');
      var target = $currentSlides.eq(index).find('a').attr('href');
      var $nextImg = '<img src="' + target + '"/>';
      $modal.find('img').remove();
      $modal.find('iframe').remove();
      $modal.find('.modalContent').append($nextImg);
    };

    var embedYoutube = function(index) {
      var $modal = $('.modal.opened');
      var target = $currentSlides.eq(index).attr('data-youtubeid');
      var isList = $currentSlides.eq(index).hasClass('list');
      if (!isList) {
        var $nextVid = '<iframe width="420" height="315" src="//www.youtube.com/embed/' + target + '"></iframe>';
      } else {
        var $nextVid = '<iframe width="420" height="315" src="//www.youtube.com/embed/videoseries?list=' + target + '"  frameborder="0" allowfullscreen></iframe>';
      }
      $modal.find('img').remove();
      $modal.find('iframe').remove();
      $modal.find('.modalContent').append($nextVid);
    };
    var embedLimelight = function(index) {
      var $modal = $('.modal.opened');
      var target = $currentSlides.eq(index).attr('data-limelightid');
      var $nextVid = limeLightIframe.replace('%mediaId%', target);
      $modal.find('img').remove();
      $modal.find('iframe').remove();
      $modal.find('.modalContent').append($nextVid);
    };
    var loadImage = function(index) {
      var nextSlideIndex = index;
      if (index == '-1') {
        nextSlideIndex = $currentSlides.length - 1;
        pointer = $currentSlides.length -1;
      }
      if (index >= $currentSlides.length) {
        nextSlideIndex = 0;
        pointer = 0;
      }
      if ($currentSlides.eq(pointer).hasClass('youtube')) {
        embedYoutube(nextSlideIndex);
      } else if ($currentSlides.eq(pointer).hasClass('limelight')) {
        embedLimelight(nextSlideIndex);
      } else {
        embedImage(nextSlideIndex);
      }

    };
    $(document).on('click', '.modal.opened .arrow', function() {
      if ($(this).hasClass('next')) {
        pointer += 1;
      } else {
        pointer -= 1;
      }
      if ($slides.length > 1) {
        loadImage(pointer, $(this));
      }
    });
    $slides.bind('click', function(e) {
      e.preventDefault();
      var $this = $(this);
      var target;
      var html;
      var arrowClass = '';
      var arrows = '<span class="arrow prev ' + arrowClass + '">&nbsp;</span><span class="arrow next">&nbsp;</span>';

      var openModal = function() {
        Salmon.Global.Modal.openModal(html, 'screenshotsModal', true);

      };
      $currentSlides = $this.parent().find('li');
      if ($slides.length == 1) {
        arrowClass = 'inactive';
      }
      if ($this.hasClass('youtube') || $this.hasClass('youtubelist')) {
        target = $this.attr('data-youtubeid');
        var isList = $this.hasClass('list');
        if (!isList) {
          html = arrows + '<iframe width="420" height="315" src="//www.youtube.com/embed/' + target + '"></iframe>';
        } else {
          html = arrows + '<iframe width="420" height="315" src="//www.youtube.com/embed/videoseries?list=' + target + '"  frameborder="0" allowfullscreen></iframe>';
        }
        openModal();
      } else if ($this.hasClass('limelight')) {
        target = $this.attr('data-limelightid');

        html = arrows + limeLightIframe.replace('%mediaId%', target);
        openModal();

      } else {
        target = $this.find('a').attr('href');

        if (typeof GameCloudinary !== 'undefined' && target.search('https://img.game.co.uk') > -1) {
          target = target.replace('https://img.game.co.uk', 'game_img');
          html = arrows + '<img data-src="' + target + '" class="cloudinaryImg"/>';
         
          setTimeout(function(){
            GameCloudinary.init();
          },10);

        } else {
          html = arrows + '<img src="' + target + '"/>';
        }
        
        openModal();
      }
      pointer = $.inArray($this[0], $currentSlides);
    });
    // $arrows = $('.modal.opened .arrow');

    $('body').find('.scrollContent').each(function() {
      var $scrollContent = $(this);
      var containerWidth = $scrollContent.width();
      if ($scrollContent.find('img')) {
        // $img used to have no var included, changed during linting, if problems arise this could be the cause
        var $img = $scrollContent.find('img').first();


        $img.on('load', function() {
          var imgHeight = $img.height();
          var imgWidth = $img.width();
          $scrollContent.css('height', imgHeight + 40);
          if (imgWidth > containerWidth) {
            $img.width = '100%';
          }
        });



      } else {
        $scrollContent.css('height', '160px');
      }
    });
  }


});

App.PDP.PerfectPartners = (function(){
	var $section = $('.section.perfectPartners .boughtTogether'),
		$products = $section.find('.perfectPartnerProducts > div'),
		$priceSection = $section.find('.main .totals h3>span'),
		$buyButton = $section.find('.totals .addAllToBasket'),
		$boughtTogetherCheckboxes = $('.pp_checkBox>input'),
		addedCount = 0,
		lastSuccessRes,
		atLeastOneOutOfStock = false,
		productsBuyUrls = [],
		generateProductsBuyUrls = function(){
			var urls = [];
			$products.each(function(){
				urls.push($(this).data('buyurl'))
			});
			productsBuyUrls = urls;
		},
		callCoremetrics = function(script){
			var $script = $(script);
			for (var i = 0; i < $script.length; i++) {
			  if ($script[i].innerHTML) {
			    var scriptHtml = $script[i].innerHTML.replace("<!--", "").replace("//-->", "").replace(/^\s*/, "").replace(/\s*$/, "");
			    if (scriptHtml.indexOf("cmSet") !== 0) {
			      eval(scriptHtml);
			    }
			  }
			}
		},
		updateProducts = function(res){
			if (typeof res.errorMessage == 'undefined') {
				$products.eq(addedCount).addClass('added');
				lastSuccessRes = res;
			} else {
				$products.eq(addedCount).addClass('outOfStock');
				atLeastOneOutOfStock = true;
			}
			callCoremetrics(res.coremetrics);

		},

		updateMiniBasket = function(){
			var $amount = $('header .miniBasketContainer .text'),
				$dropdownCart = $('header .dropdownCart');

			$amount.text(parseInt(lastSuccessRes.orderQuantity));
			$dropdownCart.html(lastSuccessRes.itemsListHtml);

		},

		setupFinalOverlay = function(){
			if (typeof lastSuccessRes != 'undefined') {
				Salmon.Global.Modal.openModal(lastSuccessRes.recentlyAddedHtml, 'basketOverlay');

				var $modal = $('#basketOverlay'),
					$productImages = $products.filter('.added').find('img');

				$modal.find('.imageContainer').append($productImages.clone());
				addedCount = 0;
				updateMiniBasket();
				$products.removeClass('added').removeClass('outOfStock');
				$section.find('.loader').remove();

				GameCloudinary.doDelayedCloudinaryInit();

				if (atLeastOneOutOfStock) $modal.find('h2').after('<div class="outOfStockMessage">Sorry, some of the products are out of stock now</div>')
			} else {
				Salmon.Global.Modal.openModal('<div class="inner outOfStock">Sorry, products are out of stock now</div>','basketOverlayOutOfStock');
				$section.hide();
			}

		},

		responseSuccess = function(res) {
			updateProducts(res);
			if (addedCount == productsBuyUrls.length - 1) {
				setTimeout(setupFinalOverlay(res), 1500);
			} else {
				addedCount++;
				sendRequest(productsBuyUrls[addedCount]);
			}
		},

		sendRequest = function(url){
			if (addedCount == productsBuyUrls.length - 1) url += '&lastPerfectPartner=true&perfectPartnersAmount=' + $products.length;
 			$.ajax({
 			  url: url + '',
 			  dataType: "json",
 			  success: responseSuccess
 			});
		},

		init = function(){
			$buyButton.on('click', function(e){
				e.preventDefault();

				if(!$(this).hasClass('disabled')) {
					$products = $(this).parent().parent().find('.perfectPartnerProducts > div.addItem');
					generateProductsBuyUrls();
					$section.append('<div class="loader"></div>');
					sendRequest(productsBuyUrls[addedCount]);
				}

			});

			$boughtTogetherCheckboxes.on('change', function() {
				$(this).closest('.pp_product').toggleClass('addItem');

				var thisPrice = parseFloat($(this).closest('.pp_product').find('.price').html().replace('£',''));
				var totalPrice = parseFloat($priceSection.html().replace('£',''));

				if($(this).closest('.pp_product').hasClass('addItem')) {
					totalPrice = (totalPrice+thisPrice);
				} else {
					totalPrice = (totalPrice-thisPrice);
				}

				$priceSection.html('£'+totalPrice.toFixed(2));

				if(totalPrice==0) {
					$buyButton.addClass('disabled');
				} else {
					$buyButton.removeClass('disabled');
				}

			});

		};

		
		if (!window.GameRepack.features['ADDTOBASKET_OVERLAY_ON']) {
			init();
		};
})();

var App = App || {};
App.PDP = App.PDP || {};

App.PDP.Reviews = new(function() {

  var node = document.getElementById("userReviews") || null;

  if (node) {

    var $node = $(node),
      $reviews = $node.find("ul.reviewsList"),
      $reviewControls = $node.find("div.reviewsControl"),
      $reviewWrite = $node.find("div.reviewWrite"),
      articleKey = null,
      pluckUser = {},
      userWroteReview = false,
      totalItems = 0,
      currentPage = 1,
      currentResultsPerPageIndex = 0,
      sortType = "",
      sortOrder = "",
      allRatings = {
        RATING_5: 0,
        RATING_4: 0,
        RATING_3: 0,
        RATING_2: 0,
        RATING_1: 0
      },
      config = {
        resultsPageLoad: 5,
        resultsAjaxLoad: 1
      },
      initialised = false;

    function init() {

      if (!node || !App.Global.Pluck.Check()) return;

      if (document.getElementById("userReviews")) {
        articleKey = new PluckSDK.ExternalResourceKey();
        articleKey.Key = node.getAttribute("rel");
        getUser();
        //getReviewPage(currentPage);
      }
    }

    init();
  }

  function getUser() {
    
    PluckSDK.SendRequests([(new PluckSDK.UserRequest())], userCallback);
  }

  function userCallback(responses) {
    
    if (responses.length > 0) {
      pluckUser = responses[0].User;
    } else {
      pluckUser.IsAnonymous = true;
    }
    getReviewPage(currentPage);
  }

  function getReviewPage(pageNumber) {
    
    var request = new PluckSDK.ReviewsPageRequest();

    if (pageNumber > 1) {
      request.ItemsPerPage = config.resultsAjaxLoad;
    } else {
      request.ItemsPerPage = config.resultsPageLoad;
    }

    request.OneBasedOnPage = pageNumber;
    request.ReviewedKey = articleKey;
    request.SortType = new PluckSDK.ReviewRatingSort({ SortOrder: "Descending" });
    PluckSDK.SendRequests([request], showReviewsCallback);
  }

  function showReviewsCallback(responses) {
    
    if (responses.length > 0) {
      if (responses[0].Items.length > 0) {
        var carousel = new App.PDP.Carousel();

        $('#userReviews > p').remove();

        currentPage = responses[0].OneBasedOnPage + responses[0].ItemsPerPage - 1;
        totalItems = responses[0].TotalItems;
        sortType = responses[0].SortType.ObjectType;
        sortOrder = responses[0].SortType.SortOrder;

        for (var i = 0; i < responses[0].Items.length; i++) {
          new App.PDP.Reviews.Review(
            $reviews, // node
            responses[0].Items[i], // review
            { "pluckUser": pluckUser, "parentKey": articleKey } // options
          );
        }

        if (initialised === false) {
          // initial set up
          renderPagination();
          carousel.setUpCarousels([node]);
          initialised = true;
        } else {
          carousel.addCarouselItem(node);
        }

        if (totalItems > responses[0].ItemsPerPage) {
          getAllArticleReviews(totalItems);
        } else {
          allReviewsCallback(responses);
        }
      } else {
        getReviewWriteForm();
      }
    }
  }

  function getAllArticleReviews(count) {
    
    var request = new PluckSDK.ReviewsPageRequest();

    request.ItemsPerPage = count;
    request.OneBasedOnPage = 1;
    request.ReviewedKey = articleKey;

    PluckSDK.SendRequests([request], allReviewsCallback);
  }

  function allReviewsCallback(responses) {
    
    if (responses.length > 0) {
      for (var i = 0; i < responses[0].Items.length; i++) {
        var review = responses[0].Items[i];
        allRatings["RATING_" + review.Rating] = allRatings["RATING_" + review.Rating] + 1;
        if (review.ReviewedBy.UserKey.Key === pluckUser.UserKey.Key) {
          userWroteReview = true;
        }
      }

      getReviewWriteForm();
    }
  }

  function renderPagination() {
    
    var $pagination = $(App.PDP.Reviews.Template.PAGINATION_CONTROLS),
      next = $pagination.find("div.next"),
      prev = $pagination.find("div.previous");

    // disable next control
    if (totalItems <= 5 || currentPage == totalItems) {
      $(next).addClass('disabled');
    }

    $(prev)
      .append(
        $(document.createElement('a'))
        .attr("href", "#")
        .text("Prev")
      );

    $(next)
      .append(
        $(document.createElement('a'))
        .attr("href", "#")
        .text("Next")
        .bind("click", function() {
          if (currentPage < totalItems) {
            getReviewPage(currentPage + 1);
          }

          if (currentPage < totalItems - 1) {
            $(next).addClass('enabled');
          } else {
            $(next).removeClass('enabled');
          }

          return false;
        })
      );

    $('#userReviews > .header').after($pagination);
  }

  function getReviewWriteForm() {
    
    $reviewWrite.empty();

    if (pluckUser.IsAnonymous) {
      renderRegisterLink();
    } else {
      renderFormToggle();
      renderReviewWriteForm();
    }
  }

  function renderRegisterLink() {
    
    $reviewWrite.append(App.PDP.Reviews.Template.REGISTER);
  }

  function renderFormToggle() {
    
    $reviewWrite.append(App.PDP.Reviews.TemplateNew.FORM_TOGGLE);
    $('.toggleReviewForm').bind("click", function() {
      $('.reviewWrite').find('.write').slideToggle();
    });
  }

  function renderReviewWriteForm() {
    if (!userWroteReview) {
      var $write = (!Salmon.Global.FeatureToggles.getFeature('NewHeaderAndFooter')) ? $(App.PDP.Reviews.Template.WRITE_REVIEW) : $(App.PDP.Reviews.TemplateNew.WRITE_REVIEW);


      addRating($write.find("div.rating"));

      $write.find("textarea")
        .bind("focus", function() {
          // var $el = $(this);
          if (this.value === Salmon.Global.StoreText.pluck.review.WRITE_REVIEW_BODY_TEXT) {
            this.value = "";
          }
        })
        .bind("blur", function() {
          if ($.trim(this.value) === "") {
            this.value = Salmon.Global.StoreText.pluck.review.WRITE_REVIEW_BODY_TEXT;
          } else {
            $("#reviewErrorSummary").find("ul").find("li").find("a[href*='#writeReviewBody']").parent().remove();
            clearErrorSumary();
          }
        });

      $write.find("#writeReviewTitle")
        .bind("blur", function() {
          if ($.trim(this.value) === "") {} else {
            $("#reviewErrorSummary").find("ul").find("li").find("a[href*='#writeReviewTitle']").parent().remove();
            clearErrorSumary();
          }
        });

      var $writeForm = $write.find("form"),
        writeForm = $writeForm.get(0);

      if (writeForm) {
        

        $writeForm.bind("submit", function(event) {
          event.preventDefault();

      
          var reviewAction = new PluckSDK.ReviewActionRequest();
          reviewAction.ReviewedKey = articleKey;
          reviewAction.ReviewTitle = document.getElementById("writeReviewTitle").value;
          reviewAction.ReviewBody = document.getElementById("writeReviewBody").value;
          reviewAction.OnPageUrl = location.href + "#userReviews";
          reviewAction.OnPageTitle = $('h1').text().replace(/^\s*/, "").replace(/\s*$/, "");
          reviewAction.ReviewRating = parseInt(document.getElementById("writeReviewRating").value,10);
          Salmon.Global.uiBlocker.blockUI();
          PluckSDK.SendRequests([reviewAction], reviewActionCallback);
        
        });
      }

      $reviewWrite.append($write);
    }
  }

  function addRating($rating) {
    
    for (var i = 0; i < 5; i++) {
      $rating.append($(document.createElement("span")).addClass("rate").text(i + 1));
    }

    $rating.css("cursor", "pointer");
    $rating.find("span")
      .bind("mouseover", function() {
        var $el = $(this),
          ratingValue = parseInt($el.text(),10);

        if (!isNaN(ratingValue)) {
          $el.parent().removeClass("setRating0 setRating1 setRating2 setRating3 setRating4 setRating5").addClass("setRating" + ratingValue);
        }
      })
      .bind("click", function() {
        var $el = $(this),
          ratingValue = parseInt($el.text(),10);

        if (!isNaN(ratingValue)) {
          $rating.find("input[name='writeReviewRating']").val(ratingValue);
        }
        document.getElementById("reviewStar").style.border = "";
        $("#reviewErrorSummary").find("ul").find("li").find("a[href*='#writeReviewRating']").parent().remove();
        clearErrorSumary();
      });

    $rating.bind("mouseleave", function() {
      $(this).removeClass("setRating1 setRating2 setRating3 setRating4 setRating5");
      $(this).addClass("setRating" + $(this).find("input[name='writeReviewRating']").val());
    });
  }

  function reviewActionCallback(responses) {
    Salmon.Global.uiBlocker.unblockUI();
    if (responses.length > 0) {
      if (
        responses[0].ResponseStatus.StatusCode === "ProcessingException" &&
        responses[0].Exceptions[0].ExceptionCode === "DirtyWordFilterTriggered"
      ) {
        $reviewWrite.find("div.reviewFilter").find("span.reviewFiltered").text("Please edit or remove the following word(s), then resubmit your content: " + responses[0].Exceptions[0].Value + ".");
      } else {
        //initialised = false; 
        $reviewWrite.remove();
        //$reviews.html(''); 
        //getReviewPage(1);
        $('.sUserReviews.header').append('<span class="success">Thank you! Your review was added!</span>');
      }
    }
  }
});

function clearErrorSumary() {
  
  if ($("#reviewErrorSummary").find("ul").find("li").length === 0) {
    $("#reviewErrorSummary").find("ul").remove();
    $("#reviewErrorSummary").find("h4").remove();
    $("#reviewErrorSummary").find("span").remove();
    $("#reviewErrorSummary").addClass("errorSummary hide");
  }
}

App.PDP.Reviews.Review = (function(node, review, options) {
  
  var $node = $(node),
    // $loginReturnURL = $("input[name=catEntryURL").val(),
    pluckUser = {},
    config = {
      parentKey: null,
      pluckUser: { IsAnonymous: true }
    },
    $review = (!Salmon.Global.FeatureToggles.getFeature('NewHeaderAndFooter')) ? $(App.PDP.Reviews.Template.REVIEW_ITEM) : $(App.PDP.Reviews.TemplateNew.REVIEW_ITEM),
    $reviewTools = $(App.PDP.Reviews.Template.REVIEW_TOOLS), // null,
    $reviewComment = null,
    $reviewRecommend = null,
    $reviewReport = null,
    $userFollow = null,
    // reviewKey = review.ReviewKey.Key,
    reviewerKey = review.ReviewedBy.UserKey.Key,
    reviewerName = review.ReviewedBy.DisplayName,
    reviewerPhoto = review.ReviewedBy.AvatarPhotoUrl,
    // reviewerUrl = Salmon.Global.PageContext.PLUCK_PERSONA_URL + "&" + review.ReviewedBy.PersonaUrl.split("?")[1],
    reviewDate = App.Global.Pluck.TimeDifference(review.DatePosted),
    reviewTitle = review.Title,
    reviewRating = Math.floor(review.Rating),
    reviewBody = review.Body;

  init();

  function init() {
    
    $.extend(config, options);

    pluckUser = config.pluckUser;

    $review.find("div.reviewerPhoto").append($(document.createElement("img")).attr({ src: reviewerPhoto, alt: reviewerName }));
    $review.find("p.reviewerName").append(reviewerName);
    $review.find("p.reviewDate").text(reviewDate);
    $review.find("p.reviewTitle").text(reviewTitle);
    $review.find("span.reviewRating").addClass("rating rating" + reviewRating);
    $review.find("p.reviewBody").html(reviewBody);
    $review.find("p.moreLink a").bind('click', openReview);
    $reviewTools.find("li.writeAComment a").bind('click', openReview);
    $node.append($review);
  }

  function openReview(e) {
    
    var div = document.createElement('div');
    var ul = document.createElement('ul');
    var options = null;

    new App.PDP.Reviews.Review(ul, review, options);

    loadComments(review);

    div.appendChild(ul);
    div.style.width = 862 + 'px';

    Salmon.Global.Modal.openModal(div);

    e.preventDefault();

    if (pluckUser.IsAnonymous || pluckUser.UserKey.Key === reviewerKey) {
      if (!pluckUser.IsAnonymous) {
        $reviewTools = $(ul).find("div.reviewTools").append(App.PDP.Reviews.Template.REVIEW_TOOLS);
        $reviewComment = $reviewTools.find("li.writeAComment a");
        $reviewTools.find("li.recommend a").remove();
        $reviewTools.find("li.report a").remove();
        $reviewTools.find("li.follow a").remove();
      }
    } else {
      $reviewTools = $(ul).find("div.reviewTools").append(App.PDP.Reviews.Template.REVIEW_TOOLS);
      $reviewComment = $reviewTools.find("li.writeAComment a");
      $reviewRecommend = $reviewTools.find("li.recommend a");
      $reviewReport = $reviewTools.find("li.report a");
      $userFollow = $reviewTools.find("li.follow a");

      if (config.parentKey) {
        if (!review.ItemScore.CurrentUserHasScored) {
          $reviewRecommend.bind("click", recommendReview);
        } else {
          $reviewRecommend.replaceWith(Salmon.Global.StoreText.pluck.review.RECOMMENDED);
        }

        if (!review.AbuseCounts.CurrentUserHasReportedAbuse) {
          $reviewReport.bind("click", showReportOptions);
        } else {
          $reviewReport.replaceWith(Salmon.Global.StoreText.pluck.review.REPORTED);
        }
      }

      if (!review.ReviewedBy.FriendshipStatus.IsFriend) {
        $userFollow.bind("click", followUser);
      } else {
        $userFollow.replaceWith(Salmon.Global.StoreText.pluck.controls.user.FRIEND);
      }

      // bind required events to the reviews in light-box
      $reviewComment
        .unbind('click')
        .bind('click', getAddCommentForm);
    }
  }

  function getAddCommentForm() {
    
    var $addComment = $(App.PDP.Reviews.Template.WRITE_COMMENT),
      $textarea = $addComment.find("textarea"),
      $submit = $addComment.find("input[type='submit']"),
      reviews = document.getElementById("userReviews"),
      container = this;

    while (container.parentNode.className.indexOf('item') == -1) {
      container = container.parentNode;
    }

    container.parentNode.appendChild($addComment[0]);

    $textarea.focus();

    $submit.bind("click", function() {
      
      if ($textarea.val() !== "") {
        var action = new PluckSDK.CommentActionRequest();

        action.Body = $textarea.val();
        action.Categories = [(new PluckSDK.DiscoveryCategory({ Name: "games" }))];
        action.CommentedOnKey = review.ReviewKey;
        action.OnPageUrl = location.href + "#userReviews";
        action.OnPageTitle = reviews.getAttribute("title");

        PluckSDK.SendRequests([action], addCommentCallback);
      }
    });

    return false;
  }

  function addCommentCallback(responses) {
    
    if (responses.length > 0) {
      if (responses[0].ResponseStatus.StatusCode === "OK") {
        $("#dialogue").find("li.review").find("div.writeComment").remove();
        loadComments(review);
      }

      // if filtered out because of dirty words
      else if (
        responses[0].ResponseStatus.StatusCode === "ProcessingException" &&
        responses[0].Exceptions[0].ExceptionCode === "DirtyWordFilterTriggered"
      ) {
        $("#dialogue").find("li.review").find("div.writeComment").find("div.commentFilter").find("span.commentFiltered").text("Please edit or remove the following word(s), then resubmit your content: " + responses[0].Exceptions[0].Value + ".");
      }
    }
  }

  function loadComments(review) {
    var request = new PluckSDK.CommentsPageRequest();

    request.CommentedOnKey = review.ReviewKey;
    request.OneBasedOnPage = 1;
    request.ItemsPerPage = 1000;

    PluckSDK.SendRequests([request], renderComments);
  }

  function renderComments(responses) {
    if (responses && responses.length > 0) {
      if (responses[0].Items.length > 0) {
        var comments = $('#dialogue').find('.comments')[0];

        $(comments).empty();

        for (var i = 0; i < responses[0].Items.length; i++) {
          new App.Global.Pluck.Comment(
            comments, // node
            responses[0].Items[i], // comment
            { nestedComments: false } // options
          );
        }
      }
    }
  }

  function recommendReview() {
    
    var action = new PluckSDK.SetItemScoreActionRequest();

    action.ParentKey = config.parentKey;
    action.Score = 1;
    action.ScoreId = "Review";
    action.TargetKey = review.ReviewKey;

    PluckSDK.SendRequests([action], recommendationCallback);

    return false;
  }

  function recommendationCallback(responses) {
    
    if (responses.length > 0) {
      if (responses[0].ResponseStatus.StatusCode === "OK") {
        $reviewRecommend.replaceWith(Salmon.Global.StoreText.pluck.review.RECOMMENDED);
      }
    }
  }

  function followUser() {
    
    var action = new PluckSDK.AddFriendActionRequest();
    action.FriendUserKey = review.ReviewedBy.UserKey;

    var request = new PluckSDK.UserRequest();
    request.UserKey = review.ReviewedBy.UserKey;

    PluckSDK.SendRequests([action, request], followUserCallback);

    return false;
  }

  function followUserCallback(responses) {
    
    if (responses.length > 1) {
      if (responses[0].ResponseStatus.StatusCode === "OK") {
        if (responses[1].ResponseStatus.StatusCode === "OK") {
          var user = responses[1].User || null;
          if (user) {
            if (user.FriendshipStatus.IsPendingFriend) {
              $userFollow.replaceWith(Salmon.Global.StoreText.pluck.controls.user.FRIENDSHIP_REQUESTED);
            } else if (user.FriendshipStatus.IsFriend) {
              $userFollow.replaceWith(Salmon.Global.StoreText.pluck.controls.user.FRIEND);
            }
          }
        }
      }
    }
  }

  function showReportOptions() {
    
    var $reportOptions = $(App.PDP.Reviews.Template.REVIEW_REPORT),
      options = (Salmon.Global.StoreText.pluck.review.REPORT_OPTIONS).split(",");

    for (var i = 0; i < options.length; i++) {
      $reportOptions.append(
        $(document.createElement("option"))
        .attr("value", options[i])
        .text(options[i])
      );
    }

    $reportOptions.focus();
    $reportOptions.bind("change", reportReview);
    $reviewReport.replaceWith($reportOptions);

    return false;
  }

  function reportReview() {
    
    var action = new PluckSDK.ReportAbuseActionRequest();
    action.AbuseOnKey = review.ReviewKey;
    action.Reason = this.value;

    PluckSDK.SendRequests([action], reportReviewCallback);
  }

  function reportReviewCallback(responses) {
    
    if (responses.length > 0) {
      if (responses[0].ResponseStatus.StatusCode === "OK") {
        $reviewTools.find("li.report select").replaceWith(Salmon.Global.StoreText.pluck.review.REPORTED);
      }
    }
  }
});

App.PDP.Reviews.Template = {

  REGISTER: '<a class="register" href="' + Salmon.Global.PageContext.LOGON_FORM_URL + window.location.protocol + "//" + window.location.host + window.location.pathname + '?activeTab=userReviews&shouldCachePage=false"><span>' + Salmon.Global.StoreText.pluck.review.REGISTER_TO_WRITE_A_REVIEW + '</span></a>',
  WRITE_REVIEW: '<div class="write">' +
    '<form>' +
    '<div id="reviewErrorSummary" class="errorSummary hide"></div>' +
    '<div id="reviewStar" class="rating rating0">' +
    '<input id="writeReviewRating" name="writeReviewRating" value="0" />' +
    '</div>' +
    '<div class="field">' +
    '<div class="indicator">' +
    '<label for="writeReviewTitle">' +
    Salmon.Global.StoreText.pluck.review.WRITE_REVIEW_TITLE_LABEL +
    '</label>' +
    '</div>' +
    '<div class="element">' +
    '<div class="elementWrapper">' +
    '<input class="text" id="writeReviewTitle" name="writeReviewTitle" maxlength="100" />' +
    '</div>' +
    '</div>' +
    '</div>' +
    '<div class="field">' +
    '<div class="indicator">' +
    '<label for="writeReviewBody">' +
    Salmon.Global.StoreText.pluck.review.WRITE_REVIEW_BODY_LABEL +
    '</label>' +
    '</div>' +
    '<div class="element">' +
    '<div class="elementWrapper">' +
    '<textarea name="writeReviewBody" id="writeReviewBody">' +
    Salmon.Global.StoreText.pluck.review.WRITE_REVIEW_BODY_TEXT +
    '</textarea>' +
    '</div>' +
    '</div>' +
    '</div>' +
    '<div class="reviewFilter">' +
    '<span class="reviewFiltered" style="color:red"></span>' +
    '</div>' +
    '<ul class="action">' +
    '<li class="secondary">' +
    '<input type="submit" class="update" id="submitReview" name="submitReview" value="' +
    Salmon.Global.StoreText.pluck.review.SUBMIT_REVIEW +
    '"/>' +
    '</li>' +
    '</ul>' +
    '</form>' +
    '</div>',
  WRITE_COMMENT: '<div class="writeComment"><div class="field"><div class="element"><div class="elementWrapper"><textarea id="addComment" name="addComment"></textarea></div></div></div><div class="commentFilter"><span class="commentFiltered" style="color:red"></span></div><ul class="action"><li class="secondary"><input type="submit" class="update" id="submitComment" name="submitComment" value="' + Salmon.Global.StoreText.pluck.review.SUBMIT_COMMENT + '" /></li></ul></div>',
  REVIEW_ITEM: '<li class="item review">' +
    '<div class="reviewContent">' +
    '<p class="reviewTitle"></p>' +
    '<span class="reviewRating"></span>' +
    '<p class="reviewBody"></p>' +
    '<p class="moreLink">' +
    '<a href="#">See more &#8230;</a>' +
    '</p>' +
    '</div>' +
    '<div class="reviewInfo">' +
    '<p class="reviewerName"></p>' +
    '<div class="reviewerPhoto"></div>' +
    '<div class="reviewerInfo">' +
    '<p class="reviewDate"></p>' +
    '<div class="reviewTools"></div>' +
    '</div>' +
    '</div>' +
    '<div class="comments"></div>' +
    '</li>',
  REVIEW_TOOLS: '<ul class="tools">' +
    '<li class="recommend toolLike">' +
    '<a href="#recommend">' +
    Salmon.Global.StoreText.pluck.review.RECOMMEND +
    '</a>' +
    '</li>' +
    '<li class="follow toolPlus">' +
    '<a href="#follow">' +
    Salmon.Global.StoreText.pluck.controls.user.ADD_AS_FRIEND +
    '</a>' +
    '</li>' +
    '<li class="report toolWarn">' +
    '<a href="#report">' +
    Salmon.Global.StoreText.pluck.review.REPORT +
    '</a>' +
    '</li>' +
    '<li class="writeAComment">' +
    '<a href="#writeComment">' +
    Salmon.Global.StoreText.pluck.review.WRITE_A_COMMENT +
    '</a>' +
    '</li>' +
    '</ul>',
  REVIEW_REPORT: '<select name="report"><option value="">' + Salmon.Global.StoreText.pluck.review.REPORT_LABEL + '</option></select>',
  PAGINATION_CONTROLS: '<div class="pagination">' +
    '<div class="previous disabled"></div>' +
    '<div class="next"></div>' +
    '</div>'
};

App.PDP.Reviews.TemplateNew = {

  FORM_TOGGLE: '<button class="btn secondary toggleReviewForm">' + Salmon.Global.StoreText.pluck.review.WRITE_REVIEW_BODY_LABEL + '</button>',
  REGISTER: '<a class="register" href="' + Salmon.Global.PageContext.LOGON_FORM_URL + window.location.protocol + "//" + window.location.host + window.location.pathname + '?activeTab=userReviews&shouldCachePage=false"><span>' + Salmon.Global.StoreText.pluck.review.REGISTER_TO_WRITE_A_REVIEW + '</span></a>',
  WRITE_REVIEW: '<div class="write">' +
    '<form>' +
    '<div id="reviewErrorSummary" class="errorSummary hide"></div>' +
    '<div class="writeReviewScore">' +
    '<label for="writeReviewTitle">' +
    '<span>' +
    Salmon.Global.StoreText.pluck.review.WRITE_REVIEW_TITLE_LABEL +
    '</span>' +
    '<input class="text" id="writeReviewTitle" name="writeReviewTitle" maxlength="100" type="text" placeholder="' +
    Salmon.Global.StoreText.pluck.review.WRITE_REVIEW_TITLE_LABEL +
    '" />' +
    '</label>' +
    '<div id="reviewStar" class="rating rating0">' +
    '<input id="writeReviewRating" name="writeReviewRating" value="0" type="number" />' +
    '</div>' +
    '</div>' +
    '<label for="writeReviewBody">' +
    '<span>' +
    Salmon.Global.StoreText.pluck.review.WRITE_REVIEW_BODY_LABEL +
    '</span>' +
    '<textarea name="writeReviewBody" id="writeReviewBody">' +
    Salmon.Global.StoreText.pluck.review.WRITE_REVIEW_BODY_TEXT +
    '</textarea>' +
    '</label>' +
    '<div class="reviewFilter">' +
    '<span class="reviewFiltered" style="color:red"></span>' +
    '</div>' +
    '<input type="submit" class="update" id="submitReview" name="submitReview" value="' +
    Salmon.Global.StoreText.pluck.review.SUBMIT_REVIEW +
    '"/>' +
    '</form>' +
    '</div>',
  WRITE_COMMENT: '<div class="writeComment"><div class="field"><div class="element"><div class="elementWrapper"><textarea id="addComment" name="addComment"></textarea></div></div></div><div class="commentFilter"><span class="commentFiltered" style="color:red"></span></div><ul class="action"><li class="secondary"><input type="submit" class="update" id="submitComment" name="submitComment" value="' + Salmon.Global.StoreText.pluck.review.SUBMIT_COMMENT + '" /></li></ul></div>',
  REVIEW_ITEM: '<li class="item review">' +
    '<div class="reviewContent">' +
    '<p class="reviewTitle"></p>' +
    '<span class="reviewRating"></span>' +
    '<div class="reviewInfo">' +
    '<p class="reviewerName"></p>' +
    '<div class="reviewerPhoto"></div>' +
    '<div class="reviewerInfo">' +
    '<p class="reviewDate"></p>' +
    '<div class="reviewTools"></div>' +
    '</div>' +
    '</div>' +
    '<p class="reviewBody"></p>' +
    '<p class="moreLink">' +
    '<a href="#">See more &#8230;</a>' +
    '</p>' +
    '</div>' +
    '<div class="comments"></div>' +
    '</li>',
  REVIEW_TOOLS: '<ul class="tools">' +
    '<li class="recommend toolLike">' +
    '<a href="#recommend">' +
    Salmon.Global.StoreText.pluck.review.RECOMMEND +
    '</a>' +
    '</li>' +
    '<li class="follow toolPlus">' +
    '<a href="#follow">' +
    Salmon.Global.StoreText.pluck.controls.user.ADD_AS_FRIEND +
    '</a>' +
    '</li>' +
    '<li class="report toolWarn">' +
    '<a href="#report">' +
    Salmon.Global.StoreText.pluck.review.REPORT +
    '</a>' +
    '</li>' +
    '<li class="writeAComment">' +
    '<a href="#writeComment">' +
    Salmon.Global.StoreText.pluck.review.WRITE_A_COMMENT +
    '</a>' +
    '</li>' +
    '</ul>',
  REVIEW_REPORT: '<select name="report"><option value="">' + Salmon.Global.StoreText.pluck.review.REPORT_LABEL + '</option></select>',
  PAGINATION_CONTROLS: '<div class="pagination">' +
    '<div class="previous disabled"></div>' +
    '<div class="next"></div>' +
    '</div>'
};

var App = App || {};
App.PDP = App.PDP || {};
App.PDP.WishlistOptions = new(function() {

  var options = null,
    $options = null,
    position = {};

  $(init);

  function init() {
    options = document.getElementById("wishlistOptions") || null;
    if (!options) return;

    $options = $(options).addClass("jsWishlistOptions");

    var $optionForms = $options.find("form");

    var addToWishListAJAXURL = $options.find("input[name='addToWishListAJAXURL']").get(0),
      url = (addToWishListAJAXURL) ? $(addToWishListAJAXURL).val() : null;

    if (url) {
      $options.find("form").bind("submit", function(event) {
        // var $node = $(this);
        event.preventDefault();
        $.ajax({
          url: url,
          data: $(this).serialize(),
          dataType: "json",
          success: function(json) {

            new App.PDP.CrossSellSwitcher(json);

            if (json.coremetrics) {
              callCoremetrics(json.coremetrics);
            }
          },
          complete: function() {
            Adoro.Dialogue.hideDialogue();
          }
        });
      });
    }

    var multipleOptions = ($optionForms.length > 1) ? true : false;

    if (multipleOptions) {
      $options.bind("click", function(e) {
        position.left = e.pageX;
        position.top = e.pageY;
        showDialogue();
        return false;
      });
    } else {
      var $wishlistSubmit = $options.find("form:first").find("input[type='submit']").bind("click", function(event) {
        event.stopPropagation();
      });

      $options.bind("click", function() {
        $wishlistSubmit.trigger("click");
      });
    }
  }

  function showDialogue() {
    Adoro.Dialogue.setHtml($options.find("div.wishlistWrapper").clone(true).get(0));
    Adoro.Dialogue.showDialogue({
      closeOnOverlayClick: true,
      overlayOpacity: "0.5",
      x: position.left,
      y: position.top - Adoro.Dialogue.getDimensions().h,
      container: document.getElementById("content")
    });
  }

  function callCoremetrics(script) {
    var $script = $(script);
    for (var i = 0; i < $script.length; i++) {
      if ($script[i].innerHTML) {
        var scriptHtml = $script[i].innerHTML.replace("<!--", "").replace("//-->", "").replace(/^\s*/, "").replace(/\s*$/, "");
        if (scriptHtml.indexOf("cmSet") !== 0) {
          //alert(scriptHtml);
          eval(scriptHtml);
        }
      }
    }
  }
});
