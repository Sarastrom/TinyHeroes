Salmon.Global.uiBlocker = (function() {

    var config = {
            loaderClass: 'loader'
        },
        timer;

    var init = function(options) {
        config = $.extend(true, config, options);
    };
    var generateUiLoader = function(text) {

        return $('<span />', {
            class: config.loaderClass,
            html: (typeof text != 'undefined') ? text : 'LOADING'
        });
    };
    var blockUI = function(timeoutCallback, timeoutSeconds) {

        var $uiBlocker = $('<div id="uiBlocker"></div>');
        $uiBlocker.append(generateUiLoader());
        $('body').append($uiBlocker);

        if (typeof timeoutCallback === "function") {

            timeoutSeconds = (typeof timeoutSeconds === 'number') ? timeoutSeconds : config.UIBlocker.DefaultTimeoutSeconds;
            timeoutSeconds = timeoutSeconds * 1000;

            timer = setTimeout(timeoutCallback, timeoutSeconds);

        }

    };

    var unblockUI = function() {
        clearTimeout(timer);
        $('#uiBlocker').remove();
    };

    var insertLoader = function($element, text) {
        $element.append(generateUiLoader(text));
    };

    var removeLoader = function($element) {
        if ($element.find('.' + config.loaderClass).length > 0) $element.find('.' + config.loaderClass).remove();
    };

    return {
        init: init,
        blockUI: blockUI,
        unblockUI: unblockUI,
        insertLoader: insertLoader,
        removeLoader: removeLoader
    };
})();

var App = App || {};
App.Checkout = App.Checkout || {};
App.Checkout.NewPayPalEspot = {
  init : function() {
    var self = this;

    this.paypalCreditEspot = $('#paypalCreditEspot');
    this.paypalCreditMonthlyAmount = null;
    this.paypalCreditMonthlyAmountTerm = null;
    this.paypalCreditObj;
    this.optionsContent = $('#paypalCreditCalcExamples');
    this.optionsTabTemplate;
    this.optionsTabContentTemplate;

    self.getData();
  },
  sortByTerm : function(a, b){
    var aTest = a.credit_financing.term;
    var bTest = b.credit_financing.term;
    return ((aTest < bTest) ? -1 : ((aTest > bTest) ? 1 : 0));
  },
  activateEventListeners : function() {
    var self = this;
    self.paypalCreditEspot.on('click', '.openModal', function(event){
      event.preventDefault();
      $('body').addClass('paypalCreditOverlay');
      Salmon.Global.Modal.openModal($('#paypalcreditespotContent').html(), 'paypalcreditespotContent');
      self.bindEventsForTabs();
    });    
  },
  bindEventsForTabs : function(){
    var self = this;
    $('.paypalCreditEspotTabs li').on('click', function(){
      self.paypalCalcTabbing($(this));
    });
  },
  paypalCalcTabbing : function(ele){
    var target = $(ele).attr('data-target');
    var tabs = $('.modal .paypalCreditEspotTabs li');
    var tabContents = $('.modal .paypalCreditEspotTabsContent ul');
    $.each(tabs, function(i, tab){
      $(tab).attr('id') === $(ele).attr('id') ? $(tab).addClass('active') : $(tab).removeClass('active');
    });
    $.each(tabContents, function(i, tabContent){
      $(tabContent).attr('id') === target ? $(tabContent).addClass('active') : $(tabContent).removeClass('active');
    })
  },
  getData : function(){
    var self = this;

    if (typeof this.paypalCreditEspot !== 'undefined' && this.paypalCreditEspot.length > 0 && self.paypalCreditEspot.attr('data-paypalcreditespot').length) {
      this.paypalCreditObj = JSON.parse(self.paypalCreditEspot.attr('data-paypalcreditespot'));
      self.buildPayPalCreditTable();
    }
    
    self.activateEventListeners();
  },
  buildPayPalCreditTable : function(){
    var self = this;
    var itemIndex = 1;
    var lowestPrice = 0;
    var lowestPriceTerm = 0;

    if(typeof self.paypalCreditObj !== 'undefined' && typeof self.paypalCreditObj.financing_options !== 'undefined' && self.paypalCreditObj.financing_options.length){
      $.each(self.paypalCreditObj.financing_options[0].qualifying_financing_options.sort(self.sortByTerm), function(index, value){

        if (typeof value.monthly_payment !== 'undefined') {
          
          var term = value.credit_financing.term;
          var monthly = parseFloat(value.monthly_payment.value, 10).toFixed(2);
          var apr = value.credit_financing.apr;
          var purchase_value = $('#paypalCreditCalcExamples').attr('data-purchaseprice');
          var total_cost = parseFloat(value.total_cost.value, 10).toFixed(2);
          var isActive = itemIndex === 1 ? 'active' : '';

          if (self.paypalCreditMonthlyAmount === null || self.paypalCreditMonthlyAmount > monthly) {
            self.paypalCreditMonthlyAmount = monthly;
            self.paypalCreditMonthlyAmountTerm = term;
          }

          self.optionsTabTemplate = [
            '<li id="tab' + itemIndex + '" data-target="content' + itemIndex + '" class="' + isActive + '">' + term + ' Months</li>'
          ].join('\n');

          self.optionsTabContentTemplate = [
            '<ul id="content' + itemIndex + '" class="' + isActive + '">',
              '<li><span>Monthly payments:</span> &pound;' + monthly + '</li></br>',
              '<li><span>Instalment rate:</span> ' + apr + ' % p.a. (fixed)</li>',
              '<li><span>Cost of purchase:</span> &pound;' + purchase_value + '</li>',
              '<li><span>Total inc. interest:</span> &pound;' + total_cost + '</li>',
            '</ul>'
          ].join('\n');

          if (itemIndex <= 4) {
            itemIndex++;
            self.optionsContent.find('.paypalCreditEspotTabs').append(self.optionsTabTemplate);
            self.optionsContent.find('.paypalCreditEspotTabsContent').append(self.optionsTabContentTemplate);
          } else {
            return false;
          }
        }
      });
      self.buildRate();
    }        
  },
  buildRate : function() {
    var self = this;

    self.paypalCreditEspot.find('.paypalCreditMonthlyAmount').each(function(index, element){
      $(element).html('&pound;' + self.paypalCreditMonthlyAmount);
    });
    self.paypalCreditEspot.find('.paypalCreditMonthlyAmountTerm').each(function(index, element){
      $(element).html(self.paypalCreditMonthlyAmountTerm);
    });
  }
};

$(document).ready(function() {
  if ($('[data-paypalcreditespot]').length > 0) {
    if ($('#paypal-button').length > 0 || $('#usePaypal').length > 0) {
      $('[data-paypalcreditespot]').hide();
    } else {
      App.Checkout.NewPayPalEspot.init();
    }
  };
});
var Configuration = Configuration || {};
Configuration.ProductLister = Configuration.ProductLister || {}

Configuration.ProductLister.TopTen = {
  expanderOptions: { }
}

Configuration.ProductLister.Truncator = {
  node: "div.fn",
  fontSize: 22, 
  selector: "a, span.unlinked"
}

Configuration.ProductLister.TopTen = {
  fontSize: 14  
}

Configuration.PDP = Configuration.PDP || {};
Configuration.PDP.Recommendations = {
  productsToDisplay: 6
}

Configuration.PDP.PostAdd = {
  truncator: {
    node: "div.fn a.uri",
    fontSize: 14,
    lines: 2
  }
};

Configuration.Articles = Configuration.Articles || {};

Configuration.Articles.Truncator = {
  node: "div.fn",
  fontSize: 14, 
  selector: "a",
  lines: 2
};

Configuration.Articles.Comment = {
  Template: {
    WRITE_COMMENT:  '<div class="writeComment"><div class="field"><div class="element"><div class="elementWrapper"><textarea id="addComment" name="addComment"></textarea></div></div></div><ul class="action"><li class="secondary"><input type="submit" class="update" id="submitComment" name="submitComment" value="Post comments" /></li></ul></div>',
    COMMENT_ITEM: '<div class="comment">' + 
              '<div class="commentInfo">' + 
                '<div class="commenterPhoto"></div>' + 
                '<div class="arr"></div>' + 
                '<div class="commentInfo">' + 
                  '<div class="commenterName"></div>' + 
                  '<div class="commentDate"></div>' + 
                  '<div class="commentTools"></div>' + 
                '</div>' + 
              '</div>' + 
              '<div class="commentContent">' + 
                '<div class="commentBody"></div>' + 
                // <ul><li class="writeAComment"><a href="#writeComment">' + Salmon.Global.StoreText.pluck.review.WRITE_A_COMMENT + '</a></li></ul>
              '</div>' + 
            '</div>',
    COMMENT_TOOLS:  '<ul class="tools"><li class="recommend"><a href="#recommend">Like</a></li><li class="follow"><a href="#follow">Add as friend</a></li><li class="report"><a href="#report">Report abuse</a></li></ul>',
    COMMENT_REPORT: '<select name="report"><option value="">Report reason</option></select>'
  }
};

Configuration.Basket = Configuration.Basket || {};

Configuration.Basket.Recommendations = {};

Configuration.Wishlist = Configuration.Wishlist || {};

Configuration.Wishlist.Truncator = {
  node: "div.fn",
  fontSize: 24, 
  selector: "span.title"
};

Configuration.QuickLook = {
  linkPriceInfoToPDP: true,
  truncator: {
    node: "h3 a",
    fontSize: 20
  }
};

Configuration.UserAlerts = Configuration.UserAlerts || {};

Configuration.UserAlerts.Truncator = {
  node: "td.title div:first-child",
  fontSize: 22, 
  selector: "a"
};

Configuration.Competition = Configuration.Competition || {};

Configuration.Competition.Truncator = { }


var App = App || {};
App.Global = App.Global || {};

App.Global.Ajax = function() {};

function getResponse(request) {
  if (request.responseXML && request.responseXML.documentElement) {
    return request.responseXML.documentElement;
  } else {
    return request.responseText;
  }
}

App.Global.Ajax.prototype.getData = function(method, url, options, callback) {
  var data = {},
    request;

  if (options.test) {
    // for testing
    var response = {};

    response.status = 200;

    if (options.test == 'test-1') {
      response.content = '{"mint":{"lowestPrice":1.1,"total":13},"preOwned":{"lowestPrice":1.28,"total":12},"mintItems":[{"provenance":"Mint","totalPrice":104.33,"unitPrice":101.2,"vendorRating":4,"vendorShopName":"mirakl0007","published":true,"vendorNumberOfRatings":88,"availableQuantity":100,"deliveryPrice":3.13,"catEntryId":173810,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0007","partNumber":"997083-0007","premiumVendor":false},{"provenance":"Mint","totalPrice":1.6,"unitPrice":1.1,"vendorRating":2,"vendorShopName":"mirakl0008","published":true,"vendorNumberOfRatings":14,"availableQuantity":100,"deliveryPrice":0.5,"catEntryId":173811,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0008","partNumber":"997083-0008","premiumVendor":false},{"provenance":"Mint","totalPrice":42.0,"unitPrice":41.2,"vendorRating":1,"vendorShopName":"mirakl0009","published":true,"vendorNumberOfRatings":101,"availableQuantity":100,"deliveryPrice":0.8,"catEntryId":173812,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0009","partNumber":"997083-0009","premiumVendor":false},{"provenance":"Mint","totalPrice":1.1,"unitPrice":1.1,"vendorRating":0,"vendorShopName":"mirakl0010","published":true,"vendorNumberOfRatings":0,"availableQuantity":100,"deliveryPrice":0.0,"catEntryId":173813,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0010","partNumber":"997083-0010","premiumVendor":false},{"provenance":"Mint","totalPrice":2.4,"unitPrice":1.2,"vendorRating":5,"vendorShopName":"mirakl0011","published":true,"vendorNumberOfRatings":22,"availableQuantity":100,"deliveryPrice":1.2,"catEntryId":173814,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0011","partNumber":"997083-0011","premiumVendor":false},{"provenance":"Mint","totalPrice":null,"unitPrice":null,"vendorRating":0,"vendorShopName":"mirakl0001","published":true,"vendorNumberOfRatings":0,"availableQuantity":null,"deliveryPrice":null,"catEntryId":173804,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0001","partNumber":"997083-0001","premiumVendor":false},{"provenance":"Mint","totalPrice":5.3,"unitPrice":1.1,"vendorRating":4,"vendorShopName":"mirakl0012","published":true,"vendorNumberOfRatings":81,"availableQuantity":100,"deliveryPrice":4.2,"catEntryId":173815,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0012","partNumber":"997083-0012","premiumVendor":false},{"provenance":"Mint","totalPrice":91.2,"unitPrice":91.1,"vendorRating":1,"vendorShopName":"mirakl0002","published":true,"vendorNumberOfRatings":51,"availableQuantity":100,"deliveryPrice":0.1,"catEntryId":173805,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0002","partNumber":"997083-0002","premiumVendor":true},{"provenance":"Mint","totalPrice":7.34,"unitPrice":1.2,"vendorRating":3,"vendorShopName":"mirakl0013","published":true,"vendorNumberOfRatings":19,"availableQuantity":100,"deliveryPrice":6.14,"catEntryId":173816,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0013","partNumber":"997083-0013","premiumVendor":false},{"provenance":"Mint","totalPrice":1.49,"unitPrice":1.2,"vendorRating":2,"vendorShopName":"mirakl0003","published":true,"vendorNumberOfRatings":148,"availableQuantity":100,"deliveryPrice":0.29,"catEntryId":173806,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0003","partNumber":"997083-0003","premiumVendor":false},{"provenance":"Mint","totalPrice":11.23,"unitPrice":11.1,"vendorRating":3,"vendorShopName":"mirakl0004","published":true,"vendorNumberOfRatings":99,"availableQuantity":100,"deliveryPrice":0.13,"catEntryId":173807,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0004","partNumber":"997083-0004","premiumVendor":false},{"provenance":"Mint","totalPrice":2.71,"unitPrice":1.2,"vendorRating":4,"vendorShopName":"mirakl0005","published":true,"vendorNumberOfRatings":2,"availableQuantity":100,"deliveryPrice":1.51,"catEntryId":173808,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0005","partNumber":"997083-0005","premiumVendor":false},{"provenance":"Mint","totalPrice":4.09,"unitPrice":1.1,"vendorRating":5,"vendorShopName":"mirakl0006","published":true,"vendorNumberOfRatings":13,"availableQuantity":100,"deliveryPrice":2.99,"catEntryId":173809,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0006","partNumber":"997083-0006","premiumVendor":false}],"preOwnedItems":[{"provenance":"PreOwned","totalPrice":8.28,"unitPrice":3.99,"vendorRating":3,"vendorShopName":"mirakl0018","published":true,"vendorNumberOfRatings":14,"availableQuantity":100,"deliveryPrice":4.29,"catEntryId":173821,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0018","partNumber":"997083-0018","premiumVendor":false},{"provenance":"PreOwned","totalPrice":208.49,"unitPrice":207.39,"vendorRating":1,"vendorShopName":"mirakl0019","published":true,"vendorNumberOfRatings":77,"availableQuantity":100,"deliveryPrice":1.1,"catEntryId":173822,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0019","partNumber":"997083-0019","premiumVendor":false},{"provenance":"PreOwned","totalPrice":7.99,"unitPrice":7.5,"vendorRating":0,"vendorShopName":"mirakl0020","published":true,"vendorNumberOfRatings":0,"availableQuantity":100,"deliveryPrice":0.49,"catEntryId":173823,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0020","partNumber":"997083-0020","premiumVendor":false},{"provenance":"PreOwned","totalPrice":52.5,"unitPrice":50.0,"vendorRating":2,"vendorShopName":"mirakl0021","published":true,"vendorNumberOfRatings":155,"availableQuantity":100,"deliveryPrice":2.5,"catEntryId":173824,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0021","partNumber":"997083-0021","premiumVendor":false},{"provenance":"PreOwned","totalPrice":5.99,"unitPrice":2.99,"vendorRating":2,"vendorShopName":"mirakl0022","published":true,"vendorNumberOfRatings":0,"availableQuantity":100,"deliveryPrice":3.0,"catEntryId":173825,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0022","partNumber":"997083-0022","premiumVendor":false},{"provenance":"PreOwned","totalPrice":24.98,"unitPrice":9.99,"vendorRating":3,"vendorShopName":"mirakl0023","published":true,"vendorNumberOfRatings":2,"availableQuantity":100,"deliveryPrice":14.99,"catEntryId":173826,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0023","partNumber":"997083-0023","premiumVendor":false},{"provenance":"PreOwned","totalPrice":2.0,"unitPrice":2.0,"vendorRating":5,"vendorShopName":"mirakl0024","published":true,"vendorNumberOfRatings":18,"availableQuantity":100,"deliveryPrice":0.0,"catEntryId":173827,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0024","partNumber":"997083-0024","premiumVendor":false},{"provenance":"PreOwned","totalPrice":6.99,"unitPrice":6.99,"vendorRating":6,"vendorShopName":"mirakl0025","published":true,"vendorNumberOfRatings":23,"availableQuantity":100,"deliveryPrice":0.0,"catEntryId":173828,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0025","partNumber":"997083-0025","premiumVendor":false},{"provenance":"PreOwned","totalPrice":51.2,"unitPrice":51.1,"vendorRating":1,"vendorShopName":"mirakl0014","published":true,"vendorNumberOfRatings":51,"availableQuantity":100,"deliveryPrice":0.1,"catEntryId":173817,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0014","partNumber":"997083-0014","premiumVendor":true},{"provenance":"PreOwned","totalPrice":1.28,"unitPrice":0.99,"vendorRating":2,"vendorShopName":"mirakl0015","published":true,"vendorNumberOfRatings":148,"availableQuantity":100,"deliveryPrice":0.29,"catEntryId":173818,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0015","partNumber":"997083-0015","premiumVendor":false},{"provenance":"PreOwned","totalPrice":9.87,"unitPrice":8.1,"vendorRating":5,"vendorShopName":"mirakl0016","published":true,"vendorNumberOfRatings":259,"availableQuantity":100,"deliveryPrice":1.77,"catEntryId":173819,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0016","partNumber":"997083-0016","premiumVendor":false},{"provenance":"PreOwned","totalPrice":7.98,"unitPrice":4.99,"vendorRating":2,"vendorShopName":"mirakl0017","published":true,"vendorNumberOfRatings":16,"availableQuantity":100,"deliveryPrice":2.99,"catEntryId":173820,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0017","partNumber":"997083-0017","premiumVendor":false}]}';
    } else if (options.test == 'test-2') {
      response.content = '{"mint":{"lowestPrice":1.1,"total":0},"preOwned":{"lowestPrice":1.28,"total":12},"mintItems":[{"provenance":"Mint","totalPrice":104.33,"unitPrice":101.2,"vendorRating":4,"vendorShopName":"mirakl0007","published":false,"vendorNumberOfRatings":88,"availableQuantity":100,"deliveryPrice":3.13,"catEntryId":173810,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0007","partNumber":"997083-0007","premiumVendor":false},{"provenance":"Mint","totalPrice":1.6,"unitPrice":1.1,"vendorRating":2,"vendorShopName":"mirakl0008","published":false,"vendorNumberOfRatings":14,"availableQuantity":100,"deliveryPrice":0.5,"catEntryId":173811,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0008","partNumber":"997083-0008","premiumVendor":false},{"provenance":"Mint","totalPrice":42.0,"unitPrice":41.2,"vendorRating":1,"vendorShopName":"mirakl0009","published":false,"vendorNumberOfRatings":101,"availableQuantity":100,"deliveryPrice":0.8,"catEntryId":173812,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0009","partNumber":"997083-0009","premiumVendor":false},{"provenance":"Mint","totalPrice":1.1,"unitPrice":1.1,"vendorRating":0,"vendorShopName":"mirakl0010","published":false,"vendorNumberOfRatings":0,"availableQuantity":100,"deliveryPrice":0.0,"catEntryId":173813,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0010","partNumber":"997083-0010","premiumVendor":false},{"provenance":"Mint","totalPrice":2.4,"unitPrice":1.2,"vendorRating":5,"vendorShopName":"mirakl0011","published":false,"vendorNumberOfRatings":22,"availableQuantity":100,"deliveryPrice":1.2,"catEntryId":173814,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0011","partNumber":"997083-0011","premiumVendor":false},{"provenance":"Mint","totalPrice":null,"unitPrice":null,"vendorRating":0,"vendorShopName":"mirakl0001","published":false,"vendorNumberOfRatings":0,"availableQuantity":null,"deliveryPrice":null,"catEntryId":173804,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0001","partNumber":"997083-0001","premiumVendor":false},{"provenance":"Mint","totalPrice":5.3,"unitPrice":1.1,"vendorRating":4,"vendorShopName":"mirakl0012","published":false,"vendorNumberOfRatings":81,"availableQuantity":100,"deliveryPrice":4.2,"catEntryId":173815,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0012","partNumber":"997083-0012","premiumVendor":false},{"provenance":"Mint","totalPrice":91.2,"unitPrice":91.1,"vendorRating":1,"vendorShopName":"mirakl0002","published":false,"vendorNumberOfRatings":51,"availableQuantity":100,"deliveryPrice":0.1,"catEntryId":173805,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0002","partNumber":"997083-0002","premiumVendor":true},{"provenance":"Mint","totalPrice":7.34,"unitPrice":1.2,"vendorRating":3,"vendorShopName":"mirakl0013","published":false,"vendorNumberOfRatings":19,"availableQuantity":100,"deliveryPrice":6.14,"catEntryId":173816,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0013","partNumber":"997083-0013","premiumVendor":false},{"provenance":"Mint","totalPrice":1.49,"unitPrice":1.2,"vendorRating":2,"vendorShopName":"mirakl0003","published":false,"vendorNumberOfRatings":148,"availableQuantity":100,"deliveryPrice":0.29,"catEntryId":173806,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0003","partNumber":"997083-0003","premiumVendor":false},{"provenance":"Mint","totalPrice":11.23,"unitPrice":11.1,"vendorRating":3,"vendorShopName":"mirakl0004","published":false,"vendorNumberOfRatings":99,"availableQuantity":100,"deliveryPrice":0.13,"catEntryId":173807,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0004","partNumber":"997083-0004","premiumVendor":false},{"provenance":"Mint","totalPrice":2.71,"unitPrice":1.2,"vendorRating":4,"vendorShopName":"mirakl0005","published":false,"vendorNumberOfRatings":2,"availableQuantity":100,"deliveryPrice":1.51,"catEntryId":173808,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0005","partNumber":"997083-0005","premiumVendor":false},{"provenance":"Mint","totalPrice":4.09,"unitPrice":1.1,"vendorRating":5,"vendorShopName":"mirakl0006","published":false,"vendorNumberOfRatings":13,"availableQuantity":100,"deliveryPrice":2.99,"catEntryId":173809,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0006","partNumber":"997083-0006","premiumVendor":false}],"preOwnedItems":[{"provenance":"PreOwned","totalPrice":8.28,"unitPrice":3.99,"vendorRating":3,"vendorShopName":"mirakl0018","published":true,"vendorNumberOfRatings":14,"availableQuantity":100,"deliveryPrice":4.29,"catEntryId":173821,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0018","partNumber":"997083-0018","premiumVendor":false},{"provenance":"PreOwned","totalPrice":208.49,"unitPrice":207.39,"vendorRating":1,"vendorShopName":"mirakl0019","published":true,"vendorNumberOfRatings":77,"availableQuantity":100,"deliveryPrice":1.1,"catEntryId":173822,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0019","partNumber":"997083-0019","premiumVendor":false},{"provenance":"PreOwned","totalPrice":7.99,"unitPrice":7.5,"vendorRating":0,"vendorShopName":"mirakl0020","published":true,"vendorNumberOfRatings":0,"availableQuantity":100,"deliveryPrice":0.49,"catEntryId":173823,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0020","partNumber":"997083-0020","premiumVendor":false},{"provenance":"PreOwned","totalPrice":52.5,"unitPrice":50.0,"vendorRating":2,"vendorShopName":"mirakl0021","published":true,"vendorNumberOfRatings":155,"availableQuantity":100,"deliveryPrice":2.5,"catEntryId":173824,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0021","partNumber":"997083-0021","premiumVendor":false},{"provenance":"PreOwned","totalPrice":5.99,"unitPrice":2.99,"vendorRating":2,"vendorShopName":"mirakl0022","published":true,"vendorNumberOfRatings":0,"availableQuantity":100,"deliveryPrice":3.0,"catEntryId":173825,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0022","partNumber":"997083-0022","premiumVendor":false},{"provenance":"PreOwned","totalPrice":24.98,"unitPrice":9.99,"vendorRating":3,"vendorShopName":"mirakl0023","published":true,"vendorNumberOfRatings":2,"availableQuantity":100,"deliveryPrice":14.99,"catEntryId":173826,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0023","partNumber":"997083-0023","premiumVendor":false},{"provenance":"PreOwned","totalPrice":2.0,"unitPrice":2.0,"vendorRating":5,"vendorShopName":"mirakl0024","published":true,"vendorNumberOfRatings":18,"availableQuantity":100,"deliveryPrice":0.0,"catEntryId":173827,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0024","partNumber":"997083-0024","premiumVendor":false},{"provenance":"PreOwned","totalPrice":6.99,"unitPrice":6.99,"vendorRating":6,"vendorShopName":"mirakl0025","published":true,"vendorNumberOfRatings":23,"availableQuantity":100,"deliveryPrice":0.0,"catEntryId":173828,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0025","partNumber":"997083-0025","premiumVendor":false},{"provenance":"PreOwned","totalPrice":51.2,"unitPrice":51.1,"vendorRating":1,"vendorShopName":"mirakl0014","published":true,"vendorNumberOfRatings":51,"availableQuantity":100,"deliveryPrice":0.1,"catEntryId":173817,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0014","partNumber":"997083-0014","premiumVendor":true},{"provenance":"PreOwned","totalPrice":1.28,"unitPrice":0.99,"vendorRating":2,"vendorShopName":"mirakl0015","published":true,"vendorNumberOfRatings":148,"availableQuantity":100,"deliveryPrice":0.29,"catEntryId":173818,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0015","partNumber":"997083-0015","premiumVendor":false},{"provenance":"PreOwned","totalPrice":9.87,"unitPrice":8.1,"vendorRating":5,"vendorShopName":"mirakl0016","published":true,"vendorNumberOfRatings":259,"availableQuantity":100,"deliveryPrice":1.77,"catEntryId":173819,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0016","partNumber":"997083-0016","premiumVendor":false},{"provenance":"PreOwned","totalPrice":7.98,"unitPrice":4.99,"vendorRating":2,"vendorShopName":"mirakl0017","published":true,"vendorNumberOfRatings":16,"availableQuantity":100,"deliveryPrice":2.99,"catEntryId":173820,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0017","partNumber":"997083-0017","premiumVendor":false}]}';
    } else if (options.test == 'test-3') {
      response.content = '{"mint":{"lowestPrice":1.1,"total":13},"preOwned":{"lowestPrice":1.28,"total":12},"mintItems":[{"provenance":"Mint","totalPrice":104.33,"unitPrice":101.2,"vendorRating":4,"vendorShopName":"mirakl0007","published":true,"vendorNumberOfRatings":88,"availableQuantity":100,"deliveryPrice":3.13,"catEntryId":173810,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0007","partNumber":"997083-0007","premiumVendor":false},{"provenance":"Mint","totalPrice":1.6,"unitPrice":1.1,"vendorRating":2,"vendorShopName":"mirakl0008","published":true,"vendorNumberOfRatings":14,"availableQuantity":100,"deliveryPrice":0.5,"catEntryId":173811,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0008","partNumber":"997083-0008","premiumVendor":false},{"provenance":"Mint","totalPrice":42.0,"unitPrice":41.2,"vendorRating":1,"vendorShopName":"mirakl0009","published":true,"vendorNumberOfRatings":101,"availableQuantity":100,"deliveryPrice":0.8,"catEntryId":173812,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0009","partNumber":"997083-0009","premiumVendor":false},{"provenance":"Mint","totalPrice":1.1,"unitPrice":1.1,"vendorRating":0,"vendorShopName":"mirakl0010","published":true,"vendorNumberOfRatings":0,"availableQuantity":100,"deliveryPrice":0.0,"catEntryId":173813,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0010","partNumber":"997083-0010","premiumVendor":false},{"provenance":"Mint","totalPrice":2.4,"unitPrice":1.2,"vendorRating":5,"vendorShopName":"mirakl0011","published":true,"vendorNumberOfRatings":22,"availableQuantity":100,"deliveryPrice":1.2,"catEntryId":173814,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0011","partNumber":"997083-0011","premiumVendor":false},{"provenance":"Mint","totalPrice":null,"unitPrice":null,"vendorRating":0,"vendorShopName":"mirakl0001","published":true,"vendorNumberOfRatings":0,"availableQuantity":null,"deliveryPrice":null,"catEntryId":173804,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0001","partNumber":"997083-0001","premiumVendor":false},{"provenance":"Mint","totalPrice":5.3,"unitPrice":1.1,"vendorRating":4,"vendorShopName":"mirakl0012","published":true,"vendorNumberOfRatings":81,"availableQuantity":100,"deliveryPrice":4.2,"catEntryId":173815,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0012","partNumber":"997083-0012","premiumVendor":false},{"provenance":"Mint","totalPrice":91.2,"unitPrice":91.1,"vendorRating":1,"vendorShopName":"mirakl0002","published":true,"vendorNumberOfRatings":51,"availableQuantity":100,"deliveryPrice":0.1,"catEntryId":173805,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0002","partNumber":"997083-0002","premiumVendor":false},{"provenance":"Mint","totalPrice":7.34,"unitPrice":1.2,"vendorRating":3,"vendorShopName":"mirakl0013","published":true,"vendorNumberOfRatings":19,"availableQuantity":100,"deliveryPrice":6.14,"catEntryId":173816,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0013","partNumber":"997083-0013","premiumVendor":false},{"provenance":"Mint","totalPrice":1.49,"unitPrice":1.2,"vendorRating":2,"vendorShopName":"mirakl0003","published":true,"vendorNumberOfRatings":148,"availableQuantity":100,"deliveryPrice":0.29,"catEntryId":173806,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0003","partNumber":"997083-0003","premiumVendor":false},{"provenance":"Mint","totalPrice":11.23,"unitPrice":11.1,"vendorRating":3,"vendorShopName":"mirakl0004","published":true,"vendorNumberOfRatings":99,"availableQuantity":100,"deliveryPrice":0.13,"catEntryId":173807,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0004","partNumber":"997083-0004","premiumVendor":false},{"provenance":"Mint","totalPrice":2.71,"unitPrice":1.2,"vendorRating":4,"vendorShopName":"mirakl0005","published":true,"vendorNumberOfRatings":2,"availableQuantity":100,"deliveryPrice":1.51,"catEntryId":173808,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0005","partNumber":"997083-0005","premiumVendor":false},{"provenance":"Mint","totalPrice":4.09,"unitPrice":1.1,"vendorRating":5,"vendorShopName":"mirakl0006","published":true,"vendorNumberOfRatings":13,"availableQuantity":100,"deliveryPrice":2.99,"catEntryId":173809,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0006","partNumber":"997083-0006","premiumVendor":false}],"preOwnedItems":[{"provenance":"PreOwned","totalPrice":8.28,"unitPrice":3.99,"vendorRating":3,"vendorShopName":"mirakl0018","published":true,"vendorNumberOfRatings":14,"availableQuantity":100,"deliveryPrice":4.29,"catEntryId":173821,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0018","partNumber":"997083-0018","premiumVendor":false},{"provenance":"PreOwned","totalPrice":208.49,"unitPrice":207.39,"vendorRating":1,"vendorShopName":"mirakl0019","published":true,"vendorNumberOfRatings":77,"availableQuantity":100,"deliveryPrice":1.1,"catEntryId":173822,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0019","partNumber":"997083-0019","premiumVendor":false},{"provenance":"PreOwned","totalPrice":7.99,"unitPrice":7.5,"vendorRating":0,"vendorShopName":"mirakl0020","published":true,"vendorNumberOfRatings":0,"availableQuantity":100,"deliveryPrice":0.49,"catEntryId":173823,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0020","partNumber":"997083-0020","premiumVendor":false},{"provenance":"PreOwned","totalPrice":52.5,"unitPrice":50.0,"vendorRating":2,"vendorShopName":"mirakl0021","published":true,"vendorNumberOfRatings":155,"availableQuantity":100,"deliveryPrice":2.5,"catEntryId":173824,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0021","partNumber":"997083-0021","premiumVendor":false},{"provenance":"PreOwned","totalPrice":5.99,"unitPrice":2.99,"vendorRating":2,"vendorShopName":"mirakl0022","published":true,"vendorNumberOfRatings":0,"availableQuantity":100,"deliveryPrice":3.0,"catEntryId":173825,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0022","partNumber":"997083-0022","premiumVendor":false},{"provenance":"PreOwned","totalPrice":24.98,"unitPrice":9.99,"vendorRating":3,"vendorShopName":"mirakl0023","published":true,"vendorNumberOfRatings":2,"availableQuantity":100,"deliveryPrice":14.99,"catEntryId":173826,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0023","partNumber":"997083-0023","premiumVendor":false},{"provenance":"PreOwned","totalPrice":2.0,"unitPrice":2.0,"vendorRating":5,"vendorShopName":"mirakl0024","published":true,"vendorNumberOfRatings":18,"availableQuantity":100,"deliveryPrice":0.0,"catEntryId":173827,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0024","partNumber":"997083-0024","premiumVendor":false},{"provenance":"PreOwned","totalPrice":6.99,"unitPrice":6.99,"vendorRating":6,"vendorShopName":"mirakl0025","published":true,"vendorNumberOfRatings":23,"availableQuantity":100,"deliveryPrice":0.0,"catEntryId":173828,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0025","partNumber":"997083-0025","premiumVendor":false},{"provenance":"PreOwned","totalPrice":51.2,"unitPrice":51.1,"vendorRating":1,"vendorShopName":"mirakl0014","published":true,"vendorNumberOfRatings":51,"availableQuantity":100,"deliveryPrice":0.1,"catEntryId":173817,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0014","partNumber":"997083-0014","premiumVendor":false},{"provenance":"PreOwned","totalPrice":1.28,"unitPrice":0.99,"vendorRating":2,"vendorShopName":"mirakl0015","published":true,"vendorNumberOfRatings":148,"availableQuantity":100,"deliveryPrice":0.29,"catEntryId":173818,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0015","partNumber":"997083-0015","premiumVendor":false},{"provenance":"PreOwned","totalPrice":9.87,"unitPrice":8.1,"vendorRating":5,"vendorShopName":"mirakl0016","published":true,"vendorNumberOfRatings":259,"availableQuantity":100,"deliveryPrice":1.77,"catEntryId":173819,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0016","partNumber":"997083-0016","premiumVendor":false},{"provenance":"PreOwned","totalPrice":7.98,"unitPrice":4.99,"vendorRating":2,"vendorShopName":"mirakl0017","published":true,"vendorNumberOfRatings":16,"availableQuantity":100,"deliveryPrice":2.99,"catEntryId":173820,"class":"classcom.salmon.ec.marketplace.dao.MarketplaceItem","vendorShopId":"0017","partNumber":"997083-0017","premiumVendor":false}]}';
    } else if (options.test == 'test-4') {
      response.content = '{"mint":{"lowestPrice":1.1,"total":0},"preOwned":{"lowestPrice":1.28,"total":0},"mintItems":[],"preOwnedItems":[]}';
    } else if (options.test == 'test-5') {
      response.content = '{"supplier": {"name": "MP8","ratingStars": 4,"ratingCount": 500,"sellerIntro": "<p>Dushy AJAX test. Some text to describe the seller and the delivery information here.</p><p>Some more information about delivery options here.</p>"},"shipping": {"UK": "1 - 2","Europe": "4 - 3","World": "10 - 15"}}';
    }

    callback(response);
  } else {
    // production --
    if (options) {
      var i = 0;

      url += '?';

      for (var option in options) {
        i++;
        url += option + '=' + options[option];

        if (Object.keys(options).length != i) {
          url += '&';
        }
      }
    }

    console.log(url);

    if (window.XMLHttpRequest) {
      request = new XMLHttpRequest;
    } else {
      request = new ActiveXObject('Msxml2.XMLHTTP');
    }

    request.open(method, url, true);
    request.send(url);
    /*jshint -W069 */
    request.onreadystatechange = function() {
      switch (this.readyState) {
        case 1:
          // data['status'] = 1; 
          data['content'] = null;
          break;
        case 2:
          // data['status'] = 2; 
          data['content'] = null;
          break;
        case 3:
          // data['status'] = 3; 
          data['content'] = null;
          break;
        case 4:
          // data['status'] = 4; 
          data['content'] = getResponse(this);
          data['status'] = this.status;

          callback(data);

          break;
      }
    };
    // -- production 
  }
};

var App = App || {};
App.Global = App.Global || {};

/**
 * Stores a bunch of re-usable custom events that are specific to the Game application to tap into.
 * If it is a custom event used by a re-useable Salmon component then take a look at Salmon.Global.CustomEvents.js
 * It is not a technical requirement that this namespace is used but it serves two purposes:
 * <br/>1) Re-use by ensuring that you don't create two different instances
 * of a custom event
 * <br/>2) Due to jQuery there is no other way of keeping track of what custom events exist
 * @author Adam Silver
 * @namespace Stores custom events
 * @example 
 * $(document).bind(App.Global.CustomEvents.myCustomEvent, function() {});
 * $(document).trigger(App.Global.CustomEvents.myCustomEvent, {});
 * @requires
 * 	jQuery1.4.2.js
 */
App.Global.CustomEvents = {
	eventName1: "eventName1",
	priceAlertFormValid: "App.Global.CustomEvents.priceAlertFormValid"
};
var App = App || {};
App.Global = App.Global || {};
App.Global.PlatformImages = function() {}; 

App.Global.PlatformImages.prototype.setUpImages = function(node) {
	var platforms = $(node).find('li.platform'); 
	
	function testImage(imgSrc) {
		var testImg = new Image(); 

		$(testImg).attr('src', imgSrc); 

		/* this relies on the fact that logos here are no more than 26 pixels high
		 * it's a bit of a hack but IE8 fails other tests
		**/
		if (testImg.height == 0 || testImg.height > 26) {
			return false; 
		} else {
			return true; 
		}
	}
	
	$(platforms).each(function() {
		var span = $(this).find('span')[0]; 
		var img = $(this).find('img')[0]; 
		var imgSrc = img.src; 
		var isImg = testImage(imgSrc); 
		
		$(img).addClass('hide'); 

		if (isImg) {
			$(img).removeClass('hide'); 
			$(span).addClass('hide'); 
		}
	}); 
}
var App = App || {};
App.Global = App.Global || {};
App.Global.Pluck = App.Global.Pluck || {};

App.Global.Pluck.Check = (function () {
	var pluckOk = true;
	try {
		var pluckCheck = PluckSDK;
	} catch (err) {
		pluckOk = false;
	}
	return pluckOk;
});

App.Global.Pluck.AdjustURL = (function(node, selector) {
	var elementCheck,
		replaceTo = ((Salmon.Global.PageContext.CURRENTURL).split("://")[1]).split("/")[0];
	
	elementCheck = setInterval((function() {
		if ($(node).find(selector).length > 0) {
			clearInterval(elementCheck);
			adjustUrl();
		}
	}), 100);
	
	function adjustUrl() {
		var $links = $("a:not([href~='" + replaceTo + "'])", node);
		for (var i=0; i < $links.length; i++) {
			var oldUrl = $links[i].getAttribute("href");
			if (oldUrl.indexOf("://") >= 0) {
				var replaceFrom = (oldUrl.split("://")[1]).split("/")[0];
				$links[i].href = oldUrl.replace(replaceFrom, replaceTo);
			}
		}
	}
});

App.Global.Pluck.Comment = (function(node, comment, options) {
	var $node = $(node),
		$comment = $(Configuration.Articles.Comment.Template.COMMENT_ITEM),
		$commentTools = null,
		$commentComment = null,
		$commentRecommend = null,
		$commentReport = null,
		$userFollow = null,
		pluckUser = {},
		commentKey = comment.CommentKey.Key,
		commenterKey = comment.Owner.UserKey.Key,
		commenterName = comment.Owner.DisplayName,
		commenterPhoto = comment.Owner.AvatarPhotoUrl,
		commenterUrl = Salmon.Global.PageContext.PLUCK_PERSONA_URL + "&" + comment.Owner.PersonaUrl.split("?")[1],
		commentDate = App.Global.Pluck.TimeDifference(comment.PostedAtTime),
		commentBody = comment.Body, 
		config = {
			nestedComments: true
		};

	init();

	function init() {
		$.extend(config, options);
		renderComment();
	}
	
	function renderComment() {
		$comment.attr("rel", commentKey);
		$comment.find("div.commenterPhoto").append($(document.createElement("img")).attr({ src: commenterPhoto, alt: commenterName }));
		$comment.find("div.commenterName").append($(document.createElement("a")).attr({ href: commenterUrl }).text(commenterName));
		$comment.find("div.commentDate").text(commentDate);
		$comment.find("div.commentBody").html(commentBody);
		PluckSDK.SendRequests([ (new PluckSDK.UserRequest()) ], userCallback);
		
		if (config.nestedComments && comment.InResponseTo) {
			var $parentComment = $node.find("div.comment[rel='" + comment.InResponseTo.Key + "']"),
				$parentComments = $parentComment.find("div.comments");
			
			if ($parentComments.length === 0) {
				$parentComments = $(document.createElement("div")).addClass("comments");
				$parentComment.addClass("hasComments").append($parentComments);
			}
			$parentComments.append($comment);
		} else {
			$node.append($comment);
		}
	}
	
	function userCallback(responses) {
		if (responses.length > 0) {
			pluckUser = responses[0].User;
		} else {
			pluckUser.IsAnonymous = true;
		}

		getCommentTools();
	}

	function getCommentTools() {
		if (pluckUser.IsAnonymous || pluckUser.UserKey.Key === commenterKey) {
			if (config.nestedComments && !comment.InResponseTo && !pluckUser.IsAnonymous) {
				$commentTools = $comment.find("div.commentTools:first").append(Configuration.Articles.Comment.Template.COMMENT_TOOLS);
				$commentComment = $commentTools.find("li.writeAComment a");
				$commentComment.bind("click", getAddCommentForm);
				
				$commentTools.find("li.recommend a").remove();
				$commentTools.find("li.report a").remove();
				$commentTools.find("li.follow a").remove();
			}
		} else {
			$commentTools = $comment.find("div.commentTools:first").append(Configuration.Articles.Comment.Template.COMMENT_TOOLS);
			$commentComment = $commentTools.find("li.writeAComment a");
			$commentRecommend = $commentTools.find("li.recommend a");
			$commentReport = $commentTools.find("li.report a");
			$userFollow = $commentTools.find("li.follow a");
			
			if (!config.nestedComments || comment.InResponseTo) {
				$commentComment.remove();
			} else {
				$commentComment.bind("click", getAddCommentForm);
			}
			
			if (!comment.RecommendationCounts.CurrentUserHasRecommended) {
				$commentRecommend.bind("click", recommendComment);
			} else {
				$commentRecommend.replaceWith(Salmon.Global.StoreText.pluck.review.RECOMMENDED);
			}
			
			if (!comment.Owner.FriendshipStatus.IsFriend) {
				$userFollow.bind("click", followUser);
			} else {
				$userFollow.replaceWith(Salmon.Global.StoreText.pluck.controls.user.FRIEND);
			}
			
			if (!comment.AbuseCounts.CurrentUserHasReportedAbuse) {
				$commentReport.bind("click", showReportOptions);
			} else {
				$commentReport.replaceWith(Salmon.Global.StoreText.pluck.review.REPORTED);
			}
		}
	}
	
	/* 
	 * ... actually not needed at all - is duplicated in App.PDP.Reviews.js
	****/
	function getAddCommentForm() {
		console.log('getAddCommentForm!'); 
		 
		var $addComment = $(Configuration.Articles.Comment.Template.WRITE_COMMENT),
			$textarea = $addComment.find("textarea"),
			$submit = $addComment.find("input[type='submit']");
			// reviews = document.getElementById("userReviews");

		$node.find("div.writeComment").remove();
		$comment.append($addComment);
		
		$textarea.focus();
		
		$submit.bind("click", function() {
			console.log('submit!'); 
			
			if ($textarea.val() !== "") {
				var action = new PluckSDK.CommentActionRequest();
				action.Body = $textarea.val();
				action.Categories = [ (new PluckSDK.DiscoveryCategory({Name:"games"})) ];
				action.CommentedOnKey = comment.Parent.ArticleKey;
				action.InResponseTo = comment.CommentKey;
				action.OnPageUrl = location.href + "#comments";
				action.OnPageTitle = node.getAttribute("title");
	
				PluckSDK.SendRequests([ action ], addCommentCallback);
			}
		});
		
		return false;
	}
	

	/*
	 * not needed - is duplicated in App.PDP.Reviews.js
	****/
	function addCommentCallback(responses) {
		if (responses.length > 0) {
			if (responses[0].ResponseStatus.StatusCode === "OK") {
				$comment.find("div.writeComment").remove();
				loadComments();
			}
		}
	}
	
	function loadComments() {
		var request = new PluckSDK.CommentsPageRequest();
		request.CommentedOnKey = comment.Parent.ArticleKey;
		request.OneBasedOnPage = 1;
		request.ItemsPerPage = 1000;
		
		PluckSDK.SendRequests([ request ], renderComments);
	}
	
	function renderComments(responses) {
		if (responses.length > 0) {
			if (responses[0].ResponseStatus.StatusCode === "OK") {
				$node.empty();
				for (var i = 0; i < responses[0].Items.length; i++) {
					new App.Global.Pluck.Comment($node.get(0), responses[0].Items[i], { nestedComments: true });
				}
			}
		}
	}
	
	function recommendComment() {		
		var action = new PluckSDK.RecommendActionRequest();
		action.RecommendedKey = comment.CommentKey;
		PluckSDK.SendRequests([ action ], recommendationCallback);
		return false;
	}
	
	function recommendationCallback(responses) {
		if (responses.length > 0) {
			if (responses[0].ResponseStatus.StatusCode === "OK") {
				$commentRecommend.replaceWith(Salmon.Global.StoreText.pluck.review.RECOMMENDED);
			}
		}
	}
	
	function followUser() {
		var action = new PluckSDK.AddFriendActionRequest();
		action.FriendUserKey = comment.Owner.UserKey;
		
		var request = new PluckSDK.UserRequest();
		request.UserKey = comment.Owner.UserKey;
		
		PluckSDK.SendRequests([ action, request ], followUserCallback);
		return false;
	}
	
	function followUserCallback(responses) {
		if (responses.length > 1) {
			if (responses[0].ResponseStatus.StatusCode === "OK") {
				if (responses[1].ResponseStatus.StatusCode === "OK") {
					var user = responses[1].User || null;
					if (user) {
						if (user.FriendshipStatus.IsPendingFriend) {
							$userFollow.replaceWith(Salmon.Global.StoreText.pluck.controls.user.FRIENDSHIP_REQUESTED);
						} else if (user.FriendshipStatus.IsFriend) {
							$userFollow.replaceWith(Salmon.Global.StoreText.pluck.controls.user.FRIEND);
						}
					}
				}
			}
		}
	}
	
	function showReportOptions() {
		var $reportOptions = $(Configuration.Articles.Comment.Template.COMMENT_REPORT),
			options = (Salmon.Global.StoreText.pluck.review.REPORT_OPTIONS).split(",");
		
		for (var i = 0; i < options.length; i++) {
			$reportOptions.append(
				$(document.createElement("option"))
					.attr("value", options[i])
					.text(options[i])
			);
		}
		
		$reportOptions.focus();
		$reportOptions.bind("change", reportComment);
		$commentReport.replaceWith($reportOptions);
		return false;
	}
	
	function reportComment() {
		var action = new PluckSDK.ReportAbuseActionRequest();
		action.AbuseOnKey = comment.CommentKey;
		action.Reason = this.value;
		
		PluckSDK.SendRequests([ action ], reportCommentCallback);
	}
	
	function reportCommentCallback(responses) {
		if (responses.length > 0) {
			if (responses[0].ResponseStatus.StatusCode === "OK") {
				$commentTools.find("li.report select").replaceWith(Salmon.Global.StoreText.pluck.review.REPORTED);
			}
		}
	}
});

App.Global.Pluck.TimeDifference = (function(timeStart, timeEnd) {
	if (!timeEnd) {
		timeEnd = new Date();
	}
	
	var difference = (timeEnd - timeStart)/(1000 * 60 * 60 * 24),
	lTempVal; 
		
	if (Math.floor(difference) <= 0) {
		difference = (timeEnd - timeStart)/(1000 * 60 * 60);
		if (Math.floor(difference) <= 0) {
			lTempVal = Math.floor((timeEnd - timeStart)/(1000 * 60));
			if (lTempVal < 0) {
				lTempVal = 0;
			}
			difference = (Salmon.Global.StoreText.pluck.controls.dateTime.MINUTES).replace("{0}", lTempVal);
		} else {
			lTempVal = Math.floor((timeEnd - timeStart)/(1000 * 60 * 60));
			if (lTempVal < 0) {
				lTempVal = 0;
			}
			difference = (Salmon.Global.StoreText.pluck.controls.dateTime.HOURS).replace("{0}", lTempVal);
		}
	} else {
		lTempVal = Math.floor(difference);
		if (lTempVal < 0) {
			lTempVal = 0;
		}
		difference = (Salmon.Global.StoreText.pluck.controls.dateTime.DAYS).replace("{0}", lTempVal);
	}
	
	return difference;
});
var App = App || {};
App.Global = App.Global || {};

App.Global.Ratings = (function($nodes) {
  var nodeLength = $nodes.length,
    requests = new Array(nodeLength);

  init();

  function init() {
    if (nodeLength === 0 || !App.Global.Pluck.Check()) return;

    for (var i = 0; i < nodeLength; i++) {
      var node = $nodes[i];
      var articleId = $(node).attr("rel");

      if (articleId && articleId !== "") {
        var request = new PluckSDK.ArticleRequest();
        request.ArticleKey = new PluckSDK.ExternalResourceKey({ Key: articleId });
        requests[i] = request;
      }
    }

    PluckSDK.SendRequests(requests, getRatingCallback);
  }

  function getRatingCallback(responses) {
    if (responses) {
      for (var i = 0; i < nodeLength; i++) {
        new App.Global.Rating($nodes[i], (requests[i]) ? responses.shift() : null);
      }
    }
  }
});

App.Global.Rating = (function(node, data) {
  var $node = $(node),
    articleId = $node.attr("rel"),
    rating = {
      average: 0,
      currentUser: 0,
      count: 0
    };

  init();

  function init() {
    if (!data || !articleId) {
      addRating();
    } else {
      setRating(data);
    }
  }

  function setRating(ratingData) {
    $node.find(":not(p)").remove();

    if (ratingData.Article) {
      var article = ratingData.Article;
      if (article.Ratings) {
        rating.average = Math.round(article.Ratings.AverageRating);
        rating.currentUser = Math.round(article.Ratings.CurrentUserRating);
        rating.count = Math.round(article.Ratings.NumberOfRatings);
      }
    }

    addRating();
  }

  function setRatingCallback(responses) {
    if (responses[1]) {
      setRating(responses[1]);
    }
  }

  function addRating() {
    var $rating = $(document.createElement("div")).addClass("rating").addClass("rating" + rating.average);

    for (var i = 0; i < 5; i++) {
      $rating.append($(document.createElement("span")).addClass("rate").text(i + 1));
    }

    if (rating.currentUser === 0) {
      $rating.css("cursor", "pointer");

      $rating.find("span")
        .bind("mouseover", function() {
          var $el = $(this),
            ratingValue = parseInt($el.text(),10);

          if (!isNaN(ratingValue)) {
            $el.parent().removeClass("setRating1 setRating2 setRating3 setRating4 setRating5").addClass("setRating" + ratingValue);
          }
        })
        .bind("click", function() {
          var $el = $(this),
            ratingValue = parseInt($el.text(),10),
            articleKey = new PluckSDK.ExternalResourceKey({ Key: articleId });

          if (!isNaN(ratingValue)) {
            var action = new PluckSDK.RateActionRequest();
            action.RateOnKey = articleKey;
            action.Rating = ratingValue;

            var check = new PluckSDK.ArticleRequest();
            check.ArticleKey = articleKey;

            PluckSDK.SendRequests([action, check], setRatingCallback);
          }
        });

      $rating.bind("mouseleave", function() {
        $(this).removeClass("setRating1 setRating2 setRating3 setRating4 setRating5");
      });
    }

    $node.append($rating);
    $(node).append($(document.createElement("div")).addClass("ratingCount").text("(" + rating.count + ")"));
  }
});

/*!
 * @fileOverview TouchSwipe - jQuery Plugin
 * @version 1.6.18
 *
 * @author Matt Bryson http://www.github.com/mattbryson
 * @see https://github.com/mattbryson/TouchSwipe-Jquery-Plugin
 * @see http://labs.rampinteractive.co.uk/touchSwipe/
 * @see http://plugins.jquery.com/project/touchSwipe
 * @license
 * Copyright (c) 2010-2015 Matt Bryson
 * Dual licensed under the MIT or GPL Version 2 licenses.
 *
 */
!function(factory){"function"==typeof define&&define.amd&&define.amd.jQuery?define('test',["jquery"],factory):factory("undefined"!=typeof module&&module.exports?require("jquery"):jQuery)}(function($){"use strict";function init(options){return!options||void 0!==options.allowPageScroll||void 0===options.swipe&&void 0===options.swipeStatus||(options.allowPageScroll=NONE),void 0!==options.click&&void 0===options.tap&&(options.tap=options.click),options||(options={}),options=$.extend({},$.fn.swipe.defaults,options),this.each(function(){var $this=$(this),plugin=$this.data(PLUGIN_NS);plugin||(plugin=new TouchSwipe(this,options),$this.data(PLUGIN_NS,plugin))})}function TouchSwipe(element,options){function touchStart(jqEvent){if(!(getTouchInProgress()||$(jqEvent.target).closest(options.excludedElements,$element).length>0)){var event=jqEvent.originalEvent?jqEvent.originalEvent:jqEvent;if(!event.pointerType||"mouse"!=event.pointerType||0!=options.fallbackToMouseEvents){var ret,touches=event.touches,evt=touches?touches[0]:event;return phase=PHASE_START,touches?fingerCount=touches.length:options.preventDefaultEvents!==!1&&jqEvent.preventDefault(),distance=0,direction=null,currentDirection=null,pinchDirection=null,duration=0,startTouchesDistance=0,endTouchesDistance=0,pinchZoom=1,pinchDistance=0,maximumsMap=createMaximumsData(),cancelMultiFingerRelease(),createFingerData(0,evt),!touches||fingerCount===options.fingers||options.fingers===ALL_FINGERS||hasPinches()?(startTime=getTimeStamp(),2==fingerCount&&(createFingerData(1,touches[1]),startTouchesDistance=endTouchesDistance=calculateTouchesDistance(fingerData[0].start,fingerData[1].start)),(options.swipeStatus||options.pinchStatus)&&(ret=triggerHandler(event,phase))):ret=!1,ret===!1?(phase=PHASE_CANCEL,triggerHandler(event,phase),ret):(options.hold&&(holdTimeout=setTimeout($.proxy(function(){$element.trigger("hold",[event.target]),options.hold&&(ret=options.hold.call($element,event,event.target))},this),options.longTapThreshold)),setTouchInProgress(!0),null)}}}function touchMove(jqEvent){var event=jqEvent.originalEvent?jqEvent.originalEvent:jqEvent;if(phase!==PHASE_END&&phase!==PHASE_CANCEL&&!inMultiFingerRelease()){var ret,touches=event.touches,evt=touches?touches[0]:event,currentFinger=updateFingerData(evt);if(endTime=getTimeStamp(),touches&&(fingerCount=touches.length),options.hold&&clearTimeout(holdTimeout),phase=PHASE_MOVE,2==fingerCount&&(0==startTouchesDistance?(createFingerData(1,touches[1]),startTouchesDistance=endTouchesDistance=calculateTouchesDistance(fingerData[0].start,fingerData[1].start)):(updateFingerData(touches[1]),endTouchesDistance=calculateTouchesDistance(fingerData[0].end,fingerData[1].end),pinchDirection=calculatePinchDirection(fingerData[0].end,fingerData[1].end)),pinchZoom=calculatePinchZoom(startTouchesDistance,endTouchesDistance),pinchDistance=Math.abs(startTouchesDistance-endTouchesDistance)),fingerCount===options.fingers||options.fingers===ALL_FINGERS||!touches||hasPinches()){if(direction=calculateDirection(currentFinger.start,currentFinger.end),currentDirection=calculateDirection(currentFinger.last,currentFinger.end),validateDefaultEvent(jqEvent,currentDirection),distance=calculateDistance(currentFinger.start,currentFinger.end),duration=calculateDuration(),setMaxDistance(direction,distance),ret=triggerHandler(event,phase),!options.triggerOnTouchEnd||options.triggerOnTouchLeave){var inBounds=!0;if(options.triggerOnTouchLeave){var bounds=getbounds(this);inBounds=isInBounds(currentFinger.end,bounds)}!options.triggerOnTouchEnd&&inBounds?phase=getNextPhase(PHASE_MOVE):options.triggerOnTouchLeave&&!inBounds&&(phase=getNextPhase(PHASE_END)),phase!=PHASE_CANCEL&&phase!=PHASE_END||triggerHandler(event,phase)}}else phase=PHASE_CANCEL,triggerHandler(event,phase);ret===!1&&(phase=PHASE_CANCEL,triggerHandler(event,phase))}}function touchEnd(jqEvent){var event=jqEvent.originalEvent?jqEvent.originalEvent:jqEvent,touches=event.touches;if(touches){if(touches.length&&!inMultiFingerRelease())return startMultiFingerRelease(event),!0;if(touches.length&&inMultiFingerRelease())return!0}return inMultiFingerRelease()&&(fingerCount=fingerCountAtRelease),endTime=getTimeStamp(),duration=calculateDuration(),didSwipeBackToCancel()||!validateSwipeDistance()?(phase=PHASE_CANCEL,triggerHandler(event,phase)):options.triggerOnTouchEnd||options.triggerOnTouchEnd===!1&&phase===PHASE_MOVE?(options.preventDefaultEvents!==!1&&jqEvent.cancelable!==!1&&jqEvent.preventDefault(),phase=PHASE_END,triggerHandler(event,phase)):!options.triggerOnTouchEnd&&hasTap()?(phase=PHASE_END,triggerHandlerForGesture(event,phase,TAP)):phase===PHASE_MOVE&&(phase=PHASE_CANCEL,triggerHandler(event,phase)),setTouchInProgress(!1),null}function touchCancel(){fingerCount=0,endTime=0,startTime=0,startTouchesDistance=0,endTouchesDistance=0,pinchZoom=1,cancelMultiFingerRelease(),setTouchInProgress(!1)}function touchLeave(jqEvent){var event=jqEvent.originalEvent?jqEvent.originalEvent:jqEvent;options.triggerOnTouchLeave&&(phase=getNextPhase(PHASE_END),triggerHandler(event,phase))}function removeListeners(){$element.unbind(START_EV,touchStart),$element.unbind(CANCEL_EV,touchCancel),$element.unbind(MOVE_EV,touchMove),$element.unbind(END_EV,touchEnd),LEAVE_EV&&$element.unbind(LEAVE_EV,touchLeave),setTouchInProgress(!1)}function getNextPhase(currentPhase){var nextPhase=currentPhase,validTime=validateSwipeTime(),validDistance=validateSwipeDistance(),didCancel=didSwipeBackToCancel();return!validTime||didCancel?nextPhase=PHASE_CANCEL:!validDistance||currentPhase!=PHASE_MOVE||options.triggerOnTouchEnd&&!options.triggerOnTouchLeave?!validDistance&&currentPhase==PHASE_END&&options.triggerOnTouchLeave&&(nextPhase=PHASE_CANCEL):nextPhase=PHASE_END,nextPhase}function triggerHandler(event,phase){var ret,touches=event.touches;return(didSwipe()||hasSwipes())&&(ret=triggerHandlerForGesture(event,phase,SWIPE)),(didPinch()||hasPinches())&&ret!==!1&&(ret=triggerHandlerForGesture(event,phase,PINCH)),didDoubleTap()&&ret!==!1?ret=triggerHandlerForGesture(event,phase,DOUBLE_TAP):didLongTap()&&ret!==!1?ret=triggerHandlerForGesture(event,phase,LONG_TAP):didTap()&&ret!==!1&&(ret=triggerHandlerForGesture(event,phase,TAP)),phase===PHASE_CANCEL&&touchCancel(event),phase===PHASE_END&&(touches?touches.length||touchCancel(event):touchCancel(event)),ret}function triggerHandlerForGesture(event,phase,gesture){var ret;if(gesture==SWIPE){if($element.trigger("swipeStatus",[phase,direction||null,distance||0,duration||0,fingerCount,fingerData,currentDirection]),options.swipeStatus&&(ret=options.swipeStatus.call($element,event,phase,direction||null,distance||0,duration||0,fingerCount,fingerData,currentDirection),ret===!1))return!1;if(phase==PHASE_END&&validateSwipe()){if(clearTimeout(singleTapTimeout),clearTimeout(holdTimeout),$element.trigger("swipe",[direction,distance,duration,fingerCount,fingerData,currentDirection]),options.swipe&&(ret=options.swipe.call($element,event,direction,distance,duration,fingerCount,fingerData,currentDirection),ret===!1))return!1;switch(direction){case LEFT:$element.trigger("swipeLeft",[direction,distance,duration,fingerCount,fingerData,currentDirection]),options.swipeLeft&&(ret=options.swipeLeft.call($element,event,direction,distance,duration,fingerCount,fingerData,currentDirection));break;case RIGHT:$element.trigger("swipeRight",[direction,distance,duration,fingerCount,fingerData,currentDirection]),options.swipeRight&&(ret=options.swipeRight.call($element,event,direction,distance,duration,fingerCount,fingerData,currentDirection));break;case UP:$element.trigger("swipeUp",[direction,distance,duration,fingerCount,fingerData,currentDirection]),options.swipeUp&&(ret=options.swipeUp.call($element,event,direction,distance,duration,fingerCount,fingerData,currentDirection));break;case DOWN:$element.trigger("swipeDown",[direction,distance,duration,fingerCount,fingerData,currentDirection]),options.swipeDown&&(ret=options.swipeDown.call($element,event,direction,distance,duration,fingerCount,fingerData,currentDirection))}}}if(gesture==PINCH){if($element.trigger("pinchStatus",[phase,pinchDirection||null,pinchDistance||0,duration||0,fingerCount,pinchZoom,fingerData]),options.pinchStatus&&(ret=options.pinchStatus.call($element,event,phase,pinchDirection||null,pinchDistance||0,duration||0,fingerCount,pinchZoom,fingerData),ret===!1))return!1;if(phase==PHASE_END&&validatePinch())switch(pinchDirection){case IN:$element.trigger("pinchIn",[pinchDirection||null,pinchDistance||0,duration||0,fingerCount,pinchZoom,fingerData]),options.pinchIn&&(ret=options.pinchIn.call($element,event,pinchDirection||null,pinchDistance||0,duration||0,fingerCount,pinchZoom,fingerData));break;case OUT:$element.trigger("pinchOut",[pinchDirection||null,pinchDistance||0,duration||0,fingerCount,pinchZoom,fingerData]),options.pinchOut&&(ret=options.pinchOut.call($element,event,pinchDirection||null,pinchDistance||0,duration||0,fingerCount,pinchZoom,fingerData))}}return gesture==TAP?phase!==PHASE_CANCEL&&phase!==PHASE_END||(clearTimeout(singleTapTimeout),clearTimeout(holdTimeout),hasDoubleTap()&&!inDoubleTap()?(doubleTapStartTime=getTimeStamp(),singleTapTimeout=setTimeout($.proxy(function(){doubleTapStartTime=null,$element.trigger("tap",[event.target]),options.tap&&(ret=options.tap.call($element,event,event.target))},this),options.doubleTapThreshold)):(doubleTapStartTime=null,$element.trigger("tap",[event.target]),options.tap&&(ret=options.tap.call($element,event,event.target)))):gesture==DOUBLE_TAP?phase!==PHASE_CANCEL&&phase!==PHASE_END||(clearTimeout(singleTapTimeout),clearTimeout(holdTimeout),doubleTapStartTime=null,$element.trigger("doubletap",[event.target]),options.doubleTap&&(ret=options.doubleTap.call($element,event,event.target))):gesture==LONG_TAP&&(phase!==PHASE_CANCEL&&phase!==PHASE_END||(clearTimeout(singleTapTimeout),doubleTapStartTime=null,$element.trigger("longtap",[event.target]),options.longTap&&(ret=options.longTap.call($element,event,event.target)))),ret}function validateSwipeDistance(){var valid=!0;return null!==options.threshold&&(valid=distance>=options.threshold),valid}function didSwipeBackToCancel(){var cancelled=!1;return null!==options.cancelThreshold&&null!==direction&&(cancelled=getMaxDistance(direction)-distance>=options.cancelThreshold),cancelled}function validatePinchDistance(){return null===options.pinchThreshold||pinchDistance>=options.pinchThreshold}function validateSwipeTime(){var result;return result=!options.maxTimeThreshold||!(duration>=options.maxTimeThreshold)}function validateDefaultEvent(jqEvent,direction){if(options.preventDefaultEvents!==!1)if(options.allowPageScroll===NONE)jqEvent.preventDefault();else{var auto=options.allowPageScroll===AUTO;switch(direction){case LEFT:(options.swipeLeft&&auto||!auto&&options.allowPageScroll!=HORIZONTAL)&&jqEvent.preventDefault();break;case RIGHT:(options.swipeRight&&auto||!auto&&options.allowPageScroll!=HORIZONTAL)&&jqEvent.preventDefault();break;case UP:(options.swipeUp&&auto||!auto&&options.allowPageScroll!=VERTICAL)&&jqEvent.preventDefault();break;case DOWN:(options.swipeDown&&auto||!auto&&options.allowPageScroll!=VERTICAL)&&jqEvent.preventDefault();break;case NONE:}}}function validatePinch(){var hasCorrectFingerCount=validateFingers(),hasEndPoint=validateEndPoint(),hasCorrectDistance=validatePinchDistance();return hasCorrectFingerCount&&hasEndPoint&&hasCorrectDistance}function hasPinches(){return!!(options.pinchStatus||options.pinchIn||options.pinchOut)}function didPinch(){return!(!validatePinch()||!hasPinches())}function validateSwipe(){var hasValidTime=validateSwipeTime(),hasValidDistance=validateSwipeDistance(),hasCorrectFingerCount=validateFingers(),hasEndPoint=validateEndPoint(),didCancel=didSwipeBackToCancel(),valid=!didCancel&&hasEndPoint&&hasCorrectFingerCount&&hasValidDistance&&hasValidTime;return valid}function hasSwipes(){return!!(options.swipe||options.swipeStatus||options.swipeLeft||options.swipeRight||options.swipeUp||options.swipeDown)}function didSwipe(){return!(!validateSwipe()||!hasSwipes())}function validateFingers(){return fingerCount===options.fingers||options.fingers===ALL_FINGERS||!SUPPORTS_TOUCH}function validateEndPoint(){return 0!==fingerData[0].end.x}function hasTap(){return!!options.tap}function hasDoubleTap(){return!!options.doubleTap}function hasLongTap(){return!!options.longTap}function validateDoubleTap(){if(null==doubleTapStartTime)return!1;var now=getTimeStamp();return hasDoubleTap()&&now-doubleTapStartTime<=options.doubleTapThreshold}function inDoubleTap(){return validateDoubleTap()}function validateTap(){return(1===fingerCount||!SUPPORTS_TOUCH)&&(isNaN(distance)||distance<options.threshold)}function validateLongTap(){return duration>options.longTapThreshold&&distance<DOUBLE_TAP_THRESHOLD}function didTap(){return!(!validateTap()||!hasTap())}function didDoubleTap(){return!(!validateDoubleTap()||!hasDoubleTap())}function didLongTap(){return!(!validateLongTap()||!hasLongTap())}function startMultiFingerRelease(event){previousTouchEndTime=getTimeStamp(),fingerCountAtRelease=event.touches.length+1}function cancelMultiFingerRelease(){previousTouchEndTime=0,fingerCountAtRelease=0}function inMultiFingerRelease(){var withinThreshold=!1;if(previousTouchEndTime){var diff=getTimeStamp()-previousTouchEndTime;diff<=options.fingerReleaseThreshold&&(withinThreshold=!0)}return withinThreshold}function getTouchInProgress(){return!($element.data(PLUGIN_NS+"_intouch")!==!0)}function setTouchInProgress(val){$element&&(val===!0?($element.bind(MOVE_EV,touchMove),$element.bind(END_EV,touchEnd),LEAVE_EV&&$element.bind(LEAVE_EV,touchLeave)):($element.unbind(MOVE_EV,touchMove,!1),$element.unbind(END_EV,touchEnd,!1),LEAVE_EV&&$element.unbind(LEAVE_EV,touchLeave,!1)),$element.data(PLUGIN_NS+"_intouch",val===!0))}function createFingerData(id,evt){var f={start:{x:0,y:0},last:{x:0,y:0},end:{x:0,y:0}};return f.start.x=f.last.x=f.end.x=evt.pageX||evt.clientX,f.start.y=f.last.y=f.end.y=evt.pageY||evt.clientY,fingerData[id]=f,f}function updateFingerData(evt){var id=void 0!==evt.identifier?evt.identifier:0,f=getFingerData(id);return null===f&&(f=createFingerData(id,evt)),f.last.x=f.end.x,f.last.y=f.end.y,f.end.x=evt.pageX||evt.clientX,f.end.y=evt.pageY||evt.clientY,f}function getFingerData(id){return fingerData[id]||null}function setMaxDistance(direction,distance){direction!=NONE&&(distance=Math.max(distance,getMaxDistance(direction)),maximumsMap[direction].distance=distance)}function getMaxDistance(direction){if(maximumsMap[direction])return maximumsMap[direction].distance}function createMaximumsData(){var maxData={};return maxData[LEFT]=createMaximumVO(LEFT),maxData[RIGHT]=createMaximumVO(RIGHT),maxData[UP]=createMaximumVO(UP),maxData[DOWN]=createMaximumVO(DOWN),maxData}function createMaximumVO(dir){return{direction:dir,distance:0}}function calculateDuration(){return endTime-startTime}function calculateTouchesDistance(startPoint,endPoint){var diffX=Math.abs(startPoint.x-endPoint.x),diffY=Math.abs(startPoint.y-endPoint.y);return Math.round(Math.sqrt(diffX*diffX+diffY*diffY))}function calculatePinchZoom(startDistance,endDistance){var percent=endDistance/startDistance*1;return percent.toFixed(2)}function calculatePinchDirection(){return pinchZoom<1?OUT:IN}function calculateDistance(startPoint,endPoint){return Math.round(Math.sqrt(Math.pow(endPoint.x-startPoint.x,2)+Math.pow(endPoint.y-startPoint.y,2)))}function calculateAngle(startPoint,endPoint){var x=startPoint.x-endPoint.x,y=endPoint.y-startPoint.y,r=Math.atan2(y,x),angle=Math.round(180*r/Math.PI);return angle<0&&(angle=360-Math.abs(angle)),angle}function calculateDirection(startPoint,endPoint){if(comparePoints(startPoint,endPoint))return NONE;var angle=calculateAngle(startPoint,endPoint);return angle<=45&&angle>=0?LEFT:angle<=360&&angle>=315?LEFT:angle>=135&&angle<=225?RIGHT:angle>45&&angle<135?DOWN:UP}function getTimeStamp(){var now=new Date;return now.getTime()}function getbounds(el){el=$(el);var offset=el.offset(),bounds={left:offset.left,right:offset.left+el.outerWidth(),top:offset.top,bottom:offset.top+el.outerHeight()};return bounds}function isInBounds(point,bounds){return point.x>bounds.left&&point.x<bounds.right&&point.y>bounds.top&&point.y<bounds.bottom}function comparePoints(pointA,pointB){return pointA.x==pointB.x&&pointA.y==pointB.y}var options=$.extend({},options),useTouchEvents=SUPPORTS_TOUCH||SUPPORTS_POINTER||!options.fallbackToMouseEvents,START_EV=useTouchEvents?SUPPORTS_POINTER?SUPPORTS_POINTER_IE10?"MSPointerDown":"pointerdown":"touchstart":"mousedown",MOVE_EV=useTouchEvents?SUPPORTS_POINTER?SUPPORTS_POINTER_IE10?"MSPointerMove":"pointermove":"touchmove":"mousemove",END_EV=useTouchEvents?SUPPORTS_POINTER?SUPPORTS_POINTER_IE10?"MSPointerUp":"pointerup":"touchend":"mouseup",LEAVE_EV=useTouchEvents?SUPPORTS_POINTER?"mouseleave":null:"mouseleave",CANCEL_EV=SUPPORTS_POINTER?SUPPORTS_POINTER_IE10?"MSPointerCancel":"pointercancel":"touchcancel",distance=0,direction=null,currentDirection=null,duration=0,startTouchesDistance=0,endTouchesDistance=0,pinchZoom=1,pinchDistance=0,pinchDirection=0,maximumsMap=null,$element=$(element),phase="start",fingerCount=0,fingerData={},startTime=0,endTime=0,previousTouchEndTime=0,fingerCountAtRelease=0,doubleTapStartTime=0,singleTapTimeout=null,holdTimeout=null;try{$element.bind(START_EV,touchStart),$element.bind(CANCEL_EV,touchCancel)}catch(e){$.error("events not supported "+START_EV+","+CANCEL_EV+" on jQuery.swipe")}this.enable=function(){return this.disable(),$element.bind(START_EV,touchStart),$element.bind(CANCEL_EV,touchCancel),$element},this.disable=function(){return removeListeners(),$element},this.destroy=function(){removeListeners(),$element.data(PLUGIN_NS,null),$element=null},this.option=function(property,value){if("object"==typeof property)options=$.extend(options,property);else if(void 0!==options[property]){if(void 0===value)return options[property];options[property]=value}else{if(!property)return options;$.error("Option "+property+" does not exist on jQuery.swipe.options")}return null}}var VERSION="1.6.18",LEFT="left",RIGHT="right",UP="up",DOWN="down",IN="in",OUT="out",NONE="none",AUTO="auto",SWIPE="swipe",PINCH="pinch",TAP="tap",DOUBLE_TAP="doubletap",LONG_TAP="longtap",HORIZONTAL="horizontal",VERTICAL="vertical",ALL_FINGERS="all",DOUBLE_TAP_THRESHOLD=10,PHASE_START="start",PHASE_MOVE="move",PHASE_END="end",PHASE_CANCEL="cancel",SUPPORTS_TOUCH="ontouchstart"in window,SUPPORTS_POINTER_IE10=window.navigator.msPointerEnabled&&!window.navigator.pointerEnabled&&!SUPPORTS_TOUCH,SUPPORTS_POINTER=(window.navigator.pointerEnabled||window.navigator.msPointerEnabled)&&!SUPPORTS_TOUCH,PLUGIN_NS="TouchSwipe",defaults={fingers:1,threshold:75,cancelThreshold:null,pinchThreshold:20,maxTimeThreshold:null,fingerReleaseThreshold:250,longTapThreshold:500,doubleTapThreshold:200,swipe:null,swipeLeft:null,swipeRight:null,swipeUp:null,swipeDown:null,swipeStatus:null,pinchIn:null,pinchOut:null,pinchStatus:null,click:null,tap:null,doubleTap:null,longTap:null,hold:null,triggerOnTouchEnd:!0,triggerOnTouchLeave:!1,allowPageScroll:"auto",fallbackToMouseEvents:!0,excludedElements:".noSwipe",preventDefaultEvents:!0};$.fn.swipe=function(method){var $this=$(this),plugin=$this.data(PLUGIN_NS);if(plugin&&"string"==typeof method){if(plugin[method])return plugin[method].apply(plugin,Array.prototype.slice.call(arguments,1));$.error("Method "+method+" does not exist on jQuery.swipe")}else if(plugin&&"object"==typeof method)plugin.option.apply(plugin,arguments);else if(!(plugin||"object"!=typeof method&&method))return init.apply(this,arguments);return $this},$.fn.swipe.version=VERSION,$.fn.swipe.defaults=defaults,$.fn.swipe.phases={PHASE_START:PHASE_START,PHASE_MOVE:PHASE_MOVE,PHASE_END:PHASE_END,PHASE_CANCEL:PHASE_CANCEL},$.fn.swipe.directions={LEFT:LEFT,RIGHT:RIGHT,UP:UP,DOWN:DOWN,IN:IN,OUT:OUT},$.fn.swipe.pageScroll={NONE:NONE,HORIZONTAL:HORIZONTAL,VERTICAL:VERTICAL,AUTO:AUTO},$.fn.swipe.fingers={ONE:1,TWO:2,THREE:3,FOUR:4,FIVE:5,ALL:ALL_FINGERS}});

var Salmon = Salmon || {};
Salmon.Components = Salmon.Components || {};

Salmon.Components.GoogleMapsLight = function() {
  var mapElem = document.getElementById('storeMap');
  if (typeof mapElem !== 'undefined') {
    var mapCoords = JSON.stringify({
      lat: parseFloat(mapElem.dataset.lat),
      lng: parseFloat(mapElem.dataset.lng)
    });
    mapCoords = JSON.parse(mapCoords);

    var map = new google.maps.Map(mapElem, {
      center: mapCoords,
      zoom: 14
    });

    var markerIconImage = Salmon.Global.PageContext.IMAGEPATH + 'markers/image.png';
    var storeMarker = new google.maps.Marker({
      position: mapCoords,
      map: map,
      icon: markerIconImage
    });     
  }
}

Salmon.Components.GoogleMaps = function(node, items, options) {
  var map = null,
    bounds,
    config = {
      autoZoom: false,
      zoom: 9
    };

  init();

  function init() {
    if (!node && items.length === 0 && !google.maps.Map) return;

    $.extend(config, options);

    setupGoogleMap();
  }

  function setupGoogleMap() {
    if (items.length <= 0) return;

    config.autoZoom = (items.length > 1) ? config.autoZoom : false;

    var mapOptions = {
      zoom: config.zoom,
      // the word items in line 31 used to read "stores".
      // This is probably a typo as stores is never used in this function
      // but is used in the file that uses this function
      center: new google.maps.LatLng(items[0].lat, items[0].long),
      panControl: true,
      zoomControl: true,
      scaleControl: true,
      mapTypeId: google.maps.MapTypeId.ROADMAP
    };

    map = new google.maps.Map(
      document.getElementById('storeMap'), mapOptions
    );

    if (config.autoZoom) {
      bounds = new google.maps.LatLngBounds();
    }

    var numberedMarkers = (items.length > 1) ? true : false;

    for (var i = 0; i < items.length; i++) {
      var latLng = new google.maps.LatLng(items[i].lat, items[i].long);
      if (config.autoZoom) {
        bounds.extend(latLng);
      }

      createGoogleMapMarker(latLng, items[i].name, items[i].message, false, (numberedMarkers) ? i + 1 : 0);
    }

    if (config.autoZoom) {
      map.fitBounds(bounds);
    }
  }

  function createGoogleMapMarker(point, name, message, userlocation, index) {
    var markerIconImage;

    if (index > 0) {
      markerIconImage = Salmon.Global.PageContext.IMAGEPATH + "markers/image" + index + ".png";
    } else {
      markerIconImage = Salmon.Global.PageContext.IMAGEPATH + "markers/image.png";
    }

    var markerIcon = {
      url: markerIconImage,
      size: new google.maps.Size(30, 36),
      anchor: google.maps.Point(15, 36),
      position: point
    };

    // David I have moved some of these to the marker but not all such as shadowSize, priceImage etc. These may need adding still
    //markerIcon.shadow = Salmon.Global.PageContext.IMAGEPATH + "markers/shadow.png";
    //markerIcon.iconSize = new google.maps.Size(30,36);
    //markerIcon.shadowSize = new google.maps.Size(48,36);
    //markerIcon.iconAnchor = new google.maps.Point(15,36);
    //markerIcon.infoWindowAnchor = new google.maps.Point(15,0);
    //markerIcon.printImage = Salmon.Global.PageContext.IMAGEPATH + "markers/printImage.gif";
    //markerIcon.mozPrintImage = Salmon.Global.PageContext.IMAGEPATH + "markers/mozPrintImage.gif";
    //markerIcon.printShadow = Salmon.Global.PageContext.IMAGEPATH + "markers/printShadow.gif";
    //markerIcon.transparent = Salmon.Global.PageContext.IMAGEPATH + "markers/transparent.png";
    //markerIcon.imageMap = [17,0,19,1,20,2,21,3,22,4,23,5,23,6,24,7,24,8,25,9,25,10,26,11,26,12,26,13,26,14,26,15,26,16,26,17,26,18,26,19,26,20,25,21,25,22,25,23,25,24,24,25,23,26,23,27,22,28,21,29,19,30,18,31,17,32,16,33,15,34,14,34,13,33,12,32,11,31,10,30,9,29,8,28,7,27,6,26,6,25,5,24,4,23,4,22,3,21,3,20,2,19,2,18,2,17,2,16,2,15,2,14,2,13,2,12,2,11,3,10,3,9,4,8,4,7,5,6,5,5,6,4,7,3,8,2,9,1,11,0];

    var marker = new google.maps.Marker({
      anchorPoint: point,
      position: point,
      icon: markerIcon,
      shadow: Salmon.Global.PageContext.IMAGEPATH + "markers/shadow.png",
      map: map
    });

    marker.setMap(map);

    var infoWindow = new google.maps.InfoWindow({
      position: point
    });

    google.maps.event.addListener(marker, 'click', function() {
      var overlayContent = document.createElement('div');

      overlayContent.id = 'overlayContent';
      overlayContent.innerHTML = message;
      infoWindow.setContent(overlayContent);
      infoWindow.open(map);
    });

    return marker;
  }

  function inverseOrder(marker) {
    return google.maps.Overlay.getZIndex(marker.getPoint().lat());
  }
};

var Salmon = Salmon || {};
Salmon.Global = Salmon.Global || {};

/**
 * This control applies functionality for all add-to-basket forms. This control is responsible
 * for submit the forms via AJAX.
 * @author Adam Silver
 * @name AddToBasket
 * @class Singleton
 * @static
 * @constructor
 * @memberOf Salmon.Global
 * @requires jQuery1.4.2.js
 **/
Salmon.Global.AddToBasket = new(function() {

  $(init);

  // the form node inside jQuery collection
  // var $form = null;

  // the jQuery queue name
  var queueName = "AddToBasket";

  // will keep track of whether a product is in the middle of being added to basket
  var status = {
    addingToBasket: false
  };

  /**
   * Add to basket form handler
   * @constructor
   * @private
   * @memberOf Salmon.Global.AddToBasket
   * @class AddToBasketForm Represents an add to basket form for handling AJAX add-to-basket functionality
   * @param {Node} form The form element
   * @return {Object} as instance of AddToBasketForm
   **/
  function AddToBasketForm(form) {
    var $form = $(form);

    $form.unbind("submit").bind("submit", form_onSubmit);

    /**
     * this is called when the form is submitted
     * @name form_onSubmit
     * @memberOf AddToBasketForm
     * @param e the event
     */
    function form_onSubmit(e) {
      //temporary fix
      if ($("body").hasClass("mobile") === false) {
        e.preventDefault();
      }

      addProductToBasket();
    }

    // Makes a call to the MiniBasket recommendations
    function IORecommendation(form, page) {
      var mediaId = $(form).find('input[name="mediaId"]').val() || null; // 198822; //

      if (mediaId) {
        if (page == 'pgProductDetails') {
          new App.PDP.MiniBasketRecommendations(mediaId);
        } else if (page == 'pgProductLister') {
          new App.ProductLister.MiniBasketRecommendations(mediaId);
        } else if (page == 'pgSearchResults') {
          new App.SearchResults.MiniBasketRecommendations(mediaId);
        }
      }
    }

    /**
     * will check if a product is currently being added to basket
     * if it is then the request is added to the queue
     * otherwise the request is called immediately
     * @name addProductToBasket
     * @memberOf AddToBasket
     **/
    function addProductToBasket() {
      // if in the middle of adding a product to basket
      if (status.addingToBasket) {
        // add request to queue

      } else {
        // send request immediately
        sendRequest();
      }
    }

    /**
     * fires the AJAX request
     * when it completes successfully productAdded is called
     * @name sendRequest
     * @memberOf AddToBasket
     **/
    function sendRequest() {
      var url = $form.find('input[name="addToShoppingCartAJAXURL"]').val();
      var data = $form.serialize();

      status.addingToBasket = true;

      return $.ajax({
        url: url,
        data: data,
        dataType: "json",
        success: productAdded
      });
    }

    /**
     * when the AJAX request is successful this function is called
     * will trigger a custom event to notify any listeners
     * will also trigger the next request in the queue, if any exist
     **/
    function productAdded(json) {

      status.addingToBasket = false;
      if (!json) return;
      $(document).trigger(Salmon.Global.CustomEvents.productAddedToBasket, json);
      $(document).dequeue(queueName);

      if ($('div#dialogue div.Recommendations').length > 0) {
        if (document.body.id == 'pgProductDetails') {
          IORecommendation($form, 'pgProductDetails');
        } else if (document.body.id == 'pgProductLister') {
          IORecommendation($form, 'pgProductLister');
        } else if (document.body.id == 'pgSearchResults') {
          IORecommendation($form, 'pgSearchResults');
        }
      }
    }
  }

  function AddToBasketButton() {

    $(document).on('click', '.addToBasketMiniButton', function(e) {
      if ($('body').attr('id') != 'pgBasket') {
        e.preventDefault();
        addProductToBasket($(this));
      }
    });

    function addProductToBasket($elem) {
      if (status.addingToBasket) {

      } else {
        sendRequest($elem);
      }
    }

    function sendRequest($elem) {
      var url = $elem.attr('href').split('?')[0],
        data = $elem.attr('href').split('?')[1];
      status.addingToBasket = true;

      return $.ajax({
        url: url,
        data: data,
        dataType: "json",
        success: productAdded
      });
    }


    function productAdded(json) {
      status.addingToBasket = false;
      if (!json) return;
      $(document).trigger(Salmon.Global.CustomEvents.productAddedToBasket, json);
      $(document).dequeue(queueName);
    }
  }
  /**
   * initialise each instance of the add to basket form
   * @function
   * @private
   * @memberOf Salmon.Global.AddToBasket
   */
  function init() {
    if (!$("body").hasClass("checkout")) {
      var forms = $("form.addToBasketForm");
      for (var i = forms.length - 1; i >= 0; i--) {
        new AddToBasketForm(forms[i]);
      }
    }
    AddToBasketButton();
  }

  this.AddToBasketForm = AddToBasketForm;
});

var Salmon = Salmon || {};
Salmon.Global = Salmon.Global || {};


Salmon.Global.ChangeLocationNew = (function() {
  var $overlay,
    $overlayContent,
    $close,
    $overlayTitle,
    $chosenLocation,
    $searchInput,
    $searchButton,
    $errorField,
    $shopsList,
    $orText,
    $resetStateButton,
    $shareLocationButton,
    $allowLocationText,
    $shopDetails,
    $shopTitle,
    $shopAddress,
    $shopHours,
    $newPostcode,
    $isCollectPlus,
    shops,
    selectedShop,
    selectedShopIndex = 0,
    // locationTimeout,
    mapOptions = {
      zoom: 13
    },
    isGuest = false,
    geolocationAllowed = false,
    geoLocationFailed = false,
    currentLocation,
    requestUrl = '/webapp/wcs/stores/servlet/AJAXGetDeliveryPoints',
    isCollectPlus = false,

    eventListeners = function() {
      $(document).on('click', '.changeLocation', function(e) {
        e.preventDefault();
        showOverlay();
      });

      $(document).on('click', '#locationChangeContainer .shopsList li', function(e) {
        e.preventDefault();
        selectedShopIndex = $.inArray(this, $('#locationChangeContainer .shopsList li'));
        setupShopDetails();
      });

      $(document).on('click', '#locationChangeContainer .searchButton', function(e) {
        e.preventDefault();
        if ($(this).hasClass('inputShown')) {
          currentLocation = $searchInput.val();
          sendRequest("postalCode=" + currentLocation);
          $newPostcode.val(currentLocation);
        } else {
          searchAnotherLocation();
        }
      });
      $(document).on('click', '#locationChangeOverlay', function(e) {

        if ($(e.target).is('#locationChangeOverlay')) {
          e.preventDefault();
          closeOverlay();
        }

      });

      $(document).on('click', '#locationChangeContainer .close ', function(e) {
        e.preventDefault();
        closeOverlay();
      });


      $(document).on('keyup change autocomplete', '#locationChangeContainer input.search', function(e) {
        e.preventDefault();
        validateSearchField($(this));
      });

      //Bind the keydown event for the search textbox, this seems already binded somewhere and will trigger the submit of the form
      //So here we re-bind the event to do the search logic.
      $(document).on('keydown', '#locationChangeContainer input.search', function(e) {
        if (e.keyCode === 13) {
          e.preventDefault();
          validateSearchField($(this));
          if (!$searchButton.hasClass('disabled')) {
            sendRequest("postalCode=" + $searchInput.val());
            currentLocation = $searchInput.val();
          }
        }
      });

      $(document).on('click', '.chooseThisLocation', function(e) {
        if (!isGuest) {
          if (isCollectPlus)
            $('#selectedCCPlusShop').val(selectedShop.shopName);
          else
            $('#selectedCCShop').val(selectedShop.shopName);
          $('#expressCheckoutDetails').addClass('notValidate');

          if (typeof sessionStorage != 'undefined') {
            sessionStorage.setItem(selectedShop.shopName.replace(/ /g, '') + '_shop', JSON.stringify(selectedShop));
          
            if (isCollectPlus) {
              sessionStorage.setItem('selectedCCPlusShopName', selectedShop.shopName);
            } else {
              sessionStorage.setItem('selectedCCShopName', selectedShop.shopName);
            }

          }
          //$('#expressCheckoutDetails').append('<input type="hidden" name="submitStore" value="Choose location" />')
          //$('#expressCheckoutDetails').submit();
        } else {
          e.preventDefault();
          if (typeof(selectedShop) != 'undefined') {
            var shopSelectedEvent = document.createEvent("CustomEvent");
            shopSelectedEvent.initCustomEvent("shopSelectedEvent", true, true, selectedShop);
            window.dispatchEvent(shopSelectedEvent);
            populateAddressFields(selectedShop.address);
          }
          closeOverlay();
        }

      });


      $(document).on('click', '.shareLocation', function(e) {
        e.preventDefault();
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(setupLocationFromGeolocation, geoLocationFail);
        }
      });
    },

    showOverlay = function() {


      $overlay.show();
      $overlayContent.show();
      google.maps.event.trigger(map, 'resize');
      if (typeof shops == 'undefined' && !isGuest) {
        currentLocation = $newPostcode.val();
        if (currentLocation.length > 0) {
          isCollectPlus = ($isCollectPlus.val() == 'true');
          sendRequest("postalCode=" + currentLocation);
          $chosenLocation.text(currentLocation);

        }
      } else {
        setupDefaultLocation();
      }
      if (!isGuest) {
        $searchInput.attr('placeholder', $newPostcode.val());
      }
      $overlay.find('.modalContent').addClass('opened');
      searchAnotherLocation();



      //$searchInput.val($('#deliveryTabs .tab').eq($('#deliveryTabsNavigation a.selected').index()).find('input:text').val());

    },
    setupDOMElements = function() {

      $overlay = $('#locationChangeOverlay');
      $overlayContent = $('#locationChangeContainer');
      $close = $overlayContent.find('.close');
      $overlayTitle = $overlayContent.find('h2 .text');
      $chosenLocation = $overlayContent.find('.chosenLocation');
      $searchInput = $overlayContent.find('input.search');
      $searchButton = $overlayContent.find('.searchButton');
      $orText = $overlayContent.find('.or');
      $resetStateButton = $overlayContent.find('.resetState');
      $allowLocationText = $overlayContent.find('.allowText');
      $shareLocationButton = $overlayContent.find('.shareLocation');
      $errorField = $overlayContent.find('span.error');
      $shopsList = $overlayContent.find('.shopsList');
      $shopDetails = $overlayContent.find('.detailsContainer');
      $shopTitle = $shopDetails.find('h3');
      $shopAddress = $shopDetails.find('.address');
      $shopHours = $shopDetails.find('.hours');
      $newPostcode = $('#newPostcode');
      $isCollectPlus = $('#isCollectPlus');
    },

    setupGoogleMap = function() {
      mapOptions.center = new google.maps.LatLng(selectedShop.latitude, selectedShop.longitude);
      var map = new google.maps.Map($('#map')[0], mapOptions),
        marker = new google.maps.Marker({
          icon: Salmon.Global.PageContext.IMAGEPATH + "markers/image.png",
          position: mapOptions.center,
          title: selectedShop.shopName
        });
      marker.setMap(map);

    },

    setupShops = function(predefinedShops, collectPlus, defaultLocation) {
      if (predefinedShops) shops = predefinedShops;
      if (typeof collectPlus != 'undefined') isCollectPlus = collectPlus;
      if (defaultLocation) {
        currentLocation = defaultLocation;
        $searchInput.attr('placeholder', currentLocation);
      }
      shops = shops.filter(checkIfCCArray);
      $shopsList.html('');
      for (var i in shops) {
        var shop = shops[i];
        $shopsList.append('<li>' + capitalizeShopName(shop.shopName) + '<span>' + parseFloat(shop.distance).toFixed(1) + ' miles</span></li>');


      }
      selectedShopIndex = 0;
      setupShopDetails();
    },

    setupShopDetails = function() {
      var setupShopAddress = function() {
          if (typeof selectedShop.address == "object") {
            var address = "";
            for (var i in selectedShop.address) {
              address += ', ' + selectedShop.address[i];
            }
            $shopAddress.text(address.slice(2, address.length));
          } else {
            $shopAddress.text(selectedShop.address);
          }
        },
        setupShopTimes = function() {
          $shopHours.html('');
          for (var i in selectedShop.times) {
            var timesInfo = selectedShop.times[i];
            if (typeof selectedShop.times[i] == 'object') {
              $shopHours.append(timesInfo.dayOfWeek.slice(0, 3) + ' ' + timesInfo.openTime.slice(0, 5) + ' - ' + timesInfo.closeTime.slice(0, 5) + '<br/>');
            } else {
              $shopHours.append(timesInfo + '<br/>');
            }
          }
        };

      selectedShop = shops[selectedShopIndex];
      $shopTitle.text(capitalizeShopName(selectedShop.shopName));
      setupShopAddress();
      setupShopTimes();
      if (typeof google != "undefined") setupGoogleMap();
      $shopsList.find('.selected').removeClass('selected');
      $($shopsList.find('li')[selectedShopIndex]).addClass('selected');
      $("#selectStore").val(selectedShop.submitAddress);
      $("#addressField1").val(selectedShop.addressField1);

    },

    sendRequest = function(searchQuery) {

      $.get(requestUrl + '?' + searchQuery, function(res) {
        processNewShops(res);
      });

    },

    processNewShops = function(res) {   
      if (res) {
        shops = res.shops;
        if (shops.length === 0) {
          alert(Salmon.Global.CurrentPageStoreText.noShops);
        } else {
          if (!isGuest)
            App.Basket.ExpressCheckout.DeliveryOptionsNew.setDefaultStores(shops);
          else
            App.Checkout.Anonymous.DeliveryTabsNew.setNewShopsAndPostcode(shops, currentLocation);

          setupShops();
          $searchInput.attr('placeholder', currentLocation);
          //resetState();

          if (!$overlayContent.hasClass('opened')) {
            $overlayContent.addClass('opened');
            $overlayTitle.text(Salmon.Global.CurrentPageStoreText.nearestShopsTo);
          }
        }
      }
    },

    validateSearchField = function($field) {

      if (!/^[a-zA-Z0-9 .]*$/.test($field.val())) {
        $errorField.fadeIn().css("display", "block");
        $searchButton.addClass('disabled');
      } else {
        if ($errorField.is(':visible')) $errorField.fadeOut();
        if ($field.val().length > 0) {
          //$chosenLocation.text($field.val());
          $searchButton.removeClass('disabled');
        } else {
          $searchButton.addClass('disabled');
        }
      }

    },

    capitalizeShopName = function(shopName) {

      var shopNameArr = shopName.split(" "),
        capitalizedShopName = "";

      for (var i in shopNameArr) {
        capitalizedShopName += (shopNameArr[i].charAt(0).match(/[a-z]/i)) ? shopNameArr[i].charAt(0).toUpperCase() + shopNameArr[i].slice(1).toLowerCase() : shopNameArr[i].charAt(0) + shopNameArr[i].charAt(1).toUpperCase() + shopNameArr[i].slice(2).toLowerCase();
        capitalizedShopName += " ";
      }

      return capitalizedShopName;

    },

    populateAddressFields = function(address) {
      var $addressFieldsContainer = $('.section.ccAddress');
      for (var key in address) {
        $addressFieldsContainer.find('input[name="' + key + '"]').val(address[key]);
      }
    },

    closeOverlay = function() {

      $overlay.hide();
      $overlayContent.hide().removeClass('opened');


      $overlayTitle.text(Salmon.Global.CurrentPageStoreText.findNearest);
      $searchButton.text(Salmon.Global.CurrentPageStoreText.search);
      resetState();
      $chosenLocation.text('');

    },

    resetState = function() {

      if (!geolocationAllowed) {
        $orText.show();
        $allowLocationText.show();
      }
      $searchInput.hide();
      $searchButton.show()
        .text(Salmon.Global.CurrentPageStoreText.chooseDifferent)
        .removeClass('inputShown')
        .removeClass('disabled');
      $resetStateButton.hide();
      $chosenLocation.text(currentLocation);
    },

    setupDefaultLocation = function() {

      //Only show address for default address if user didnt allow geolocation and it is registered checkout.
      if (shops.length > 0) {
        if (!isGuest) {
          currentLocation = $newPostcode.val();
          $chosenLocation.text(currentLocation);
        } else {
          if ($newPostcode.val().length > 0)
            $chosenLocation.text($newPostcode.val());
          else
            $chosenLocation.text($('#collectionDeliveryPostcode').val());
        }

        $overlayContent.addClass('opened');

        setupGoogleMap();

      }


    },

    geoLocationFail = function(error) {

      if (error.code == error.PERMISSION_DENIED) {
        alert(Salmon.Global.CurrentPageStoreText.geolocationDenied);
      } else {
        alert(Salmon.Global.CurrentPageStoreText.noGeolocation);
      }
      geoLocationFailed = true;
      $orText.hide();
      $shareLocationButton.hide();


    },

    setupLocationFromGeolocation = function(position) {

      //sendRequest('coordinates=' + position.coords.latitude + ',' + position.coords.longitude);
      currentLocation = Salmon.Global.CurrentPageStoreText.yourLocation;

      if (typeof position != "undefined") geoCodeCoordinates(position.coords.latitude, position.coords.longitude);

      $newPostcode.val(currentLocation);
      $shareLocationButton.hide();
      $orText.hide();
    },

    geoCodeCoordinates = function(latitude, longitude) {
      var url = 'https://maps.googleapis.com/maps/api/geocode/json?key=AIzaSyDcpqci0Z0_bZqS6Tw8piP1hDrr2C-mIpI&result_type=postal_code';
      $.get(url + '&latlng=' + latitude + ',' + longitude, function(res) {
        processGeocoding(res);
      });
    },

    /*
    https://maps.googleapis.com/maps/api/geocode/json?latlng=51.2728118896484,-1.10768902301788&key=AIzaSyDUWE8jHJUVm6c6qZmpJV_ja4CjE16ukbU&result_type=postal_code
    */

    processGeocoding = function(res) {
      if (typeof res != "undefined" && typeof res.results != 'undefined' && res.results.length > 0) {
        var closestPostcodeObject = res.results[0];
        if (closestPostcodeObject.address_components[0].types[0] == 'postal_code') {
          $searchInput.val(closestPostcodeObject.address_components[0].long_name);

          sendRequest("postalCode=" + $searchInput.val());

          //currentLocation = $searchInput.val();
          //if (typeof google != "undefined") showGoogleMap(closestPostcodeObject);
          //showNotMyLocation();
        }
      }
    },

    checkIfGeolocationWasDenied = function() {
      if (geoLocationFailed) {
        $orText.hide();
        $shareLocationButton.hide();
      } else {
        $orText.show();
        $shareLocationButton.show();
      }
    },

    searchAnotherLocation = function() {

      currentLocation = $chosenLocation.text();
      //$searchInput.val('');
      $searchInput.fadeIn();
      $searchButton.addClass('inputShown disabled').text('Search');
      checkIfGeolocationWasDenied();

    },
    checkIfCCArray = function(value) {
      var checkIsCollectPlus = false;
      if (typeof value.isCollectPlus == 'string' &&  value.isCollectPlus === 'true') {
        checkIsCollectPlus = true;
      } else {
        checkIsCollectPlus = value.isCollectPlus;
      }
      return checkIsCollectPlus;
    },


    init = function() {
      setupDOMElements();
      if (typeof Salmon.Global.InitialCCShops != 'undefined' && Salmon.Global.InitialCCShops.shops.length > 0) {

        isCollectPlus = ($isCollectPlus.val() == 'true');
        shops = Salmon.Global.InitialCCShops.shops;
        setupShops();
      }
      if ($('body').attr('id') == 'pgDelivery') isGuest = true;

      eventListeners();

    };
  if ($('.changeLocation').length > 0) init();
  return {
    setupShops: setupShops
  };
})();

var Salmon = Salmon || {};
Salmon.Global = Salmon.Global || {};

/**
 * A store for all custom events that are utilised by Salmon reusable components. If a Game specific component
 * needs to notify other controls that something has happened then use App.Global.CustomEvents.js.
 * It is not a technical requirement that this namespace is used but it serves two purposes:
 * <br/>1) Re-use by ensuring that you don't create two different instances
 * of a custom event
 * <br/>2) Due to jQuery there is no other way of keeping track of what custom events exist
 * @author Adam Silver
 * @namespace Stores custom events specifically for Salmon re-usable components
 * @example 
 * $(document).bind(Salmon.Global.CustomEvents.myCustomEvent, function() {});
 * $(document).trigger(Salmon.Global.CustomEvents.myCustomEvent, {});
 * @requires
 * 	jQuery1.4.2.js
 */

Salmon.Global.CustomEvents = {
  productAddedToBasket: "Salmon.Global.CustomEvents.productAddedToBasket",
  customProductAddedToBasket: "Salmon.Global.CustomEvents.customProductAddedToBasket",
  warrantyAddedToTheBasket: "Salmon.Global.CustomEvents.warrantyAddedToTheBasket",
  anonDeliveryUpdated: "Salmon.Global.CustomEvents.anonDeliveryUpdated",
  expressDeliveryUpdated: "Salmon.Global.CustomEvents.expressDeliveryUpdated"
};
Salmon.Global.CustomSelects = (function() {
  var selectClass = "cSelect",
    $selects = $('.' + selectClass),
    generateSelect = function($originalSelect) {
      var $selectContainer = $originalSelect.parent(),
      $optionsNotSelected = $originalSelect.find('option:not(:selected)'),
        $selectedOption = $originalSelect.find('option:selected'),
        $newSelect = $('<ul />', {
          class: "dropdown"
        }),
        $selected = $('<span />', {
          class: "selected",
          text: $selectedOption.text(),
          'data-value': $selectedOption.val()
        }),
        title = $originalSelect.data('title'),
        clicked = false;

      $optionsNotSelected.each(function() {
        var $option = $(this);
        $newSelect.append('<li data-value="' + $option.val() + '">' + $option.text() + '</li>');
      });
      if (typeof title !== 'undefined') $selectContainer.append('<span>' + title + '</span>');
      $selectContainer.append($selected);
      $selectContainer.append($newSelect);
      $originalSelect.hide();


      $selectContainer.on('click tap', '.dropdown li', function() {
        var $currentOption = $(this),
          title = $currentOption.text(),
          val = $currentOption.data('value');

        clicked = true;
        $newSelect.append('<li data-value="' + $selected.data('value') + '">' + $selected.text() + '</li>');
        $selected.text(title).removeClass('active').data('value', val);
        $currentOption.remove();
        $originalSelect.val(val);
        $originalSelect.trigger('change');
        $newSelect.slideUp('fast', function() {
          clicked = false;
        });
      });



      $selectContainer.on('click tap', function() {
        if (clicked === false) {
          if ($selected.hasClass('active')) {
            $newSelect.slideUp('fast');
            $selected.removeClass('active');
          } else {
            $newSelect.slideDown('fast');
            $selected.addClass('active');
          }
        }
      });
    };



  $selects.each(function() {
    generateSelect($(this));
  });
})();

var Salmon = Salmon || {};
Salmon.Global = Salmon.Global || {};

/**
 * This control applies functionality to DeliveryUpdate form in guest checkout. This control is responsible
 * for submit the forms via AJAX.
 * @author Pawel Magrian
 * @name DeliveryUpdate
 * @class Singleton
 * @static
 * @constructor
 * @memberOf Salmon.Global
 * @requires jQuery1.4.2.js
 **/
/* jshint -W069 */

Salmon.Global.DeliveryUpdate = new(function() {
  $(init);

  // the form node inside jQuery collection
  // var $form = null;

  // the jQuery queue name
  var queueName = "DeliveryUpdate";

  // will keep track of whether a delivery is being updated
  var status = {
    updatingDeliveryCharges: false
  };


  var isNewCheckout = Game.featureToggles['NewCHECKOUT'] === true;
  /**
   * Delivery update form handler
   * @constructor
   * @private
   * @memberOf Salmon.Global.DeliveryUpdate
   * @class AnonDeliveryUpdateForm Represents a delivery update form for handling AJAX delivery-update functionality
   * @param {Node} form The form element
   * @return {Object} as instance of AnonDeliveryUpdateForm
   **/
  function AnonDeliveryUpdateForm(form, selectedShippingId, selectedShippingInfo, isClickAndCollect) {
    var $form = $(form);
    updateDelivery();

    /**
     * this is called when the form is submitted
     * @name form_onSubmit
     * @memberOf AnonDeliveryUpdateForm
     * @param e the event
     */
    function form_onSubmit(e) {
      e.preventDefault();
      updateDelivery();
    }

    /**
     * will check if a delivery is currently being updated to basket
     * <br/><br/> if it is then the request is added to the queue
     * <br/><br/> otherwise the request is called immediately
     * @name updateDelivery
     * @memberOf DeliveryUpdate
     **/
    function updateDelivery() {
      // if in the middle of updating delivery charges
      if (status.updatingDeliveryCharges) {
        // add request to queue
        $(document).queue(queueName, function() {
          sendRequest();
        });
      } else {
        // send request immediately
        sendRequest();
      }
    }

    /**
     * fires the AJAX request
     * <br/><br/> when it completes successfully deliveryUpdated is called
     * @name sendRequest
     * @memberOf DeliveryUpdate
     * 
     **/
    function sendRequest() {
      var url = $form.find('input[name="deliveryUpdateAJAXURL"]').val();
      var data = $form.serialize();

      if (typeof isClickAndCollect == 'undefined') {
        isClickAndCollect = 'false';
      }
      // add a name and value of the selected radio button which contains supplier name, subgroup and selected shipModeId to the data object
      data = data + "&selectedShipMode=true" + "&selectedShippingId=" + selectedShippingId + "&selectedShippingInfo=" + selectedShippingInfo + "&collectionSelected=" + isClickAndCollect;

      status.updatingDeliveryCharges = true;

      // this code snippet makes an ajax call to provided URL and returns a JSON object created in DeliveryOptionsRadioJsonResponse.jsp
      // returned json object is used by Salmon.Global.OrderSummaryPanel.Summary to update $shipping and $total in HTML
      return $.ajax({
        url: url,
        data: data,
        dataType: 'json',
        success: deliveryUpdated,
        error: function(jqXHR, exception) {
          if (isNewCheckout) Salmon.Global.uiBlocker.unblockUI();
          if (jqXHR.status === 0) {
            console.log('Not connect.\n Verify Network.');
          } else if (jqXHR.status == 404) {
            console.log('Requested page not found. [404]');
          } else if (jqXHR.status == 500) {
            console.log('Internal Server Error [500].');
          } else if (exception === 'parsererror') {
            console.log('Requested JSON parse failed.');
            console.log(jqXHR);
          } else if (exception === 'timeout') {
            console.log('Time out error.');
          } else if (exception === 'abort') {
            console.log('Ajax request aborted.');
          } else {
            console.log('Uncaught Error.\n' + jqXHR.responseText);
          }
        }
      });
    }

    /**
     * when the AJAX request is successful this function is called
     * <br/><br/>will trigger a custom event to notify any listeners
     * <br/><br/>will also trigger the next request in the queue, if any exist
     */
    function deliveryUpdated(json) {
      status.updatingDeliveryCharges = false;
      if (isNewCheckout) Salmon.Global.uiBlocker.unblockUI();
      if (!json) return;
      $(document).trigger(Salmon.Global.CustomEvents.anonDeliveryUpdated, json);
      $(document).dequeue(queueName);
    }
  }

  /**
   * initialise each instance of the delivery update form
   * @function
   * @private
   * @memberOf Salmon.Global.DeliveryUpdate
   */
  function init() {
    var forms = $('form.deliveryUpdate');
    for (var i = forms.length - 1; i >= 0; i--) {
      new AnonDeliveryUpdateForm(forms[i]);
    }
  }

  this.AnonDeliveryUpdateForm = AnonDeliveryUpdateForm;
});

var Salmon = Salmon || {};
Salmon.Global = Salmon.Global || {};


/**
 * This control applies functionality to DeliveryUpdate form in express checkout. This control is responsible
 * for submit the forms via AJAX.
 * @author Pawel Magrian
 * @name DeliveryUpdateExpress
 * @class Singleton
 * @static
 * @constructor
 * @memberOf Salmon.Global
 * @requires jQuery1.4.2.js
 **/
Salmon.Global.DeliveryUpdateExpress = new(function() {
  $(init);

  // the form node inside jQuery collection
  // var $form = null;

  // the jQuery queue name
  var queueName = "DeliveryUpdateExpress";

  // will keep track of whether a delivery is being updated
  var status = {
    updatingDeliveryCharges: false
  };

  /**
   * Delivery update form handler
   * @constructor
   * @private
   * @memberOf Salmon.Global.DeliveryUpdate
   * @class AnonDeliveryUpdateForm Represents a delivery update form for handling AJAX delivery-update functionality
   * @param {Node} form The form element
   * @return {Object} as instance of AnonDeliveryUpdateForm
   **/
  function DeliveryUpdateExpressForm(form, selectedShippingId, selectedShippingInfo, isClickAndCollect) {
    var $form = $(form);
    updateExpressDelivery();

    /**
     * this is called when the form is submitted
     * @name form_onSubmit
     * @memberOf AnonDeliveryUpdateForm
     * @param e the event
     */
    function form_onSubmit(e) {
      e.preventDefault();
      updateExpressDelivery();
    }

    /**
     * will check if a delivery is currently being updated to basket
     * <br/><br/> if it is then the request is added to the queue
     * <br/><br/> otherwise the request is called immediately
     * @name updateExpressDelivery
     * @memberOf DeliveryUpdate
     **/
    function updateExpressDelivery() {
      // if in the middle of updating delivery charges
      if (status.updatingDeliveryCharges) {
        // add request to queue
        $(document).queue(queueName, function() {
          sendRequest();
        });
      } else {
        // send request immediately
        sendRequest();
      }
    }

    /**
     * fires the AJAX request
     * <br/><br/> when it completes successfully expressDeliveryUpdated is called
     * @name sendRequest
     * @memberOf DeliveryUpdate
     * 
     **/
    function sendRequest() {
      var url = $form.find('input[name="expDeliveryUpdateAJAXURL"]').val();
      Salmon.Global.uiBlocker.blockUI();
      var data = $form.serialize();
      if (typeof isClickAndCollect == 'undefined') {
        isClickAndCollect = 'false';
      }
      var QueryStringToJSON = function(string) {
        var pairs = string.split('&');

        var result = {};
        pairs.forEach(function(pair) {
          pair = pair.split('=');
          result[pair[0]] = decodeURIComponent(pair[1] || '');
        });

        return JSON.parse(JSON.stringify(result));
      };
      var jsonFromData = QueryStringToJSON(data);
      jsonFromData.selectedShipMode = true;
      jsonFromData.selectedShippingId = selectedShippingId;
      jsonFromData.selectedShippingInfo = selectedShippingInfo;
      jsonFromData.collectionSelected = isClickAndCollect;
      if (typeof jsonFromData.homeDeliveryPostcode != 'undefined') jsonFromData.homeDeliveryPostcode = jsonFromData.homeDeliveryPostcode.replace(/\+/, '');
      data = $.param(jsonFromData);
      status.updatingDeliveryCharges = true;

      // this code snippet makes an ajax call to provided URL and returns a JSON object created in DeliveryOptionsRadioJsonResponse.jsp
      // returned json object is used by Salmon.Global.OrderSummaryPanel.Summary to update $shipping and $total in HTML
      return $.ajax({
        url: url,
        data: data,
        dataType: 'json',
        success: expressDeliveryUpdated,
        error: function(jqXHR, exception) {
          Salmon.Global.uiBlocker.unblockUI();
          if (jqXHR.status === 0) {
            console.log('Not connect.\n Verify Network.');
          } else if (jqXHR.status == 404) {
            console.log('Requested page not found. [404]');
          } else if (jqXHR.status == 500) {
            console.log('Internal Server Error [500].');
          } else if (exception === 'parsererror') {
            console.log('Requested JSON parse failed.');
            console.log(jqXHR);
          } else if (exception === 'timeout') {
            console.log('Time out error.');
          } else if (exception === 'abort') {
            console.log('Ajax request aborted.');
          } else {
            console.log('Uncaught Error.\n' + jqXHR.responseText);
          }
        }
      });
    }

    /**
     * when the AJAX request is successful this function is called
     * <br/><br/>will trigger a custom event to notify any listeners
     * <br/><br/>will also trigger the next request in the queue, if any exist
     */
    function expressDeliveryUpdated(json) {
      Salmon.Global.uiBlocker.unblockUI();
      status.updatingDeliveryCharges = false;
      if (!json) return;
      $(document).trigger(Salmon.Global.CustomEvents.expressDeliveryUpdated, json);
      $(document).dequeue(queueName);
    }
  }

  /**
   * initialise each instance of the delivery update form
   * @function
   * @private
   * @memberOf Salmon.Global.DeliveryUpdate
   */
  function init() {
    var forms = $('form.deliveryUpdateExpress');
    for (var i = forms.length - 1; i >= 0; i--) {
      new DeliveryUpdateExpressForm(forms[i]);
    }
  }

  this.DeliveryUpdateExpressForm = DeliveryUpdateExpressForm;
});

var Salmon = Salmon || {};
Salmon.Global = Salmon.Global || {};

/**
 * This control applies functionality to DeliveryUpdate form in guest checkout. This control is responsible
 * for submit the forms via AJAX.
 * @author Pawel Magrian
 * @name DeliveryUpdate
 * @class Singleton
 * @static
 * @constructor
 * @memberOf Salmon.Global
 * @requires jQuery1.4.2.js
 **/
Salmon.Global.DeliveryUpdateMobile = new(function() {
  $(init);

  // the form node inside jQuery collection
  // var $form = null;

  // the jQuery queue name
  var queueName = "DeliveryUpdate";

  // will keep track of whether a delivery is being updated
  var status = {
    updatingDeliveryCharges: false
  };

  /**
   * Delivery update form handler
   * @constructor
   * @private
   * @memberOf Salmon.Global.DeliveryUpdate
   * @class DeliveryUpdateMobileForm Represents a delivery update form for handling AJAX delivery-update functionality
   * @param {Node} form The form element
   * @return {Object} as instance of DeliveryUpdateMobileForm
   **/
  function DeliveryUpdateMobileForm(form, selectedShippingId, selectedShippingInfo, isClickAndCollect) {
    var $form = $(form);
    updateDelivery();

    /**
     * this is called when the form is submitted
     * @name form_onSubmit
     * @memberOf DeliveryUpdateMobileForm
     * @param e the event
     **/
    function form_onSubmit(e) {
      e.preventDefault();
      updateDelivery();
    }

    /**
     * will check if a delivery is currently being updated to basket
     * <br/><br/> if it is then the request is added to the queue
     * <br/><br/> otherwise the request is called immediately
     * @name updateDelivery
     * @memberOf DeliveryUpdate
     **/
    function updateDelivery() {
      // if in the middle of updating delivery charges
      if (status.updatingDeliveryCharges) {
        // add request to queue
        $(document).queue(queueName, function() {
          sendRequest();
        });
      } else {
        // send request immediately
        sendRequest();
      }
    }

    /**
     * fires the AJAX request
     * <br/><br/> when it completes successfully deliveryUpdated is called
     * @name sendRequest
     * @memberOf DeliveryUpdate
     * 
     **/
    function sendRequest() {
      var url;

      if ($form.find('input[name="expDeliveryUpdateAJAXURL"]').length > 0) {
        url = $form.find('input[name="expDeliveryUpdateAJAXURL"]').val();
      } else {
        url = $form.find('input[name="deliveryUpdateAJAXURL"]').val();
      }
      var data = $form.serialize();
      var QueryStringToJSON = function(string) {
        var pairs = string.split('&');

        var result = {};
        pairs.forEach(function(pair) {
          pair = pair.split('=');
          result[pair[0]] = decodeURIComponent(pair[1] || '');
        });

        return JSON.parse(JSON.stringify(result));
      };
      var jsonFromData = QueryStringToJSON(data);
      jsonFromData.selectedShipMode = true;
      jsonFromData.selectedShippingId = selectedShippingId;
      jsonFromData.selectedShippingInfo = selectedShippingInfo;
      jsonFromData.collectionSelected = isClickAndCollect;
      if (typeof jsonFromData.homeDeliveryPostcode != 'undefined') jsonFromData.homeDeliveryPostcode = jsonFromData.homeDeliveryPostcode.replace(/\+/g, '');
      if (typeof jsonFromData.postCode != 'undefined') jsonFromData.postCode = jsonFromData.postCode.replace(/\+/g, '');

      data = $.param(jsonFromData);
      status.updatingDeliveryCharges = true;

      $("#preloader").fadeIn("fast");

      // this code snippet makes an ajax call to provided URL and returns a JSON object created in DeliveryOptionsRadioJsonResponse.jsp
      // returned json object is used by Salmon.Global.OrderSummaryPanel.Summary to update $shipping and $total in HTML
      return $.ajax({
        url: url,
        data: data,
        dataType: 'json',
        success: deliveryUpdated,
        error: function(jqXHR, exception) {
          if (jqXHR.status === 0) {
            console.log('Not connect.\n Verify Network.');
          } else if (jqXHR.status == 404) {
            console.log('Requested page not found. [404]');
          } else if (jqXHR.status == 500) {
            console.log('Internal Server Error [500].');
          } else if (exception === 'parsererror') {
            console.log('Requested JSON parse failed.');
            console.log(jqXHR);
          } else if (exception === 'timeout') {
            console.log('Time out error.');
          } else if (exception === 'abort') {
            console.log('Ajax request aborted.');
          } else {
            console.log('Uncaught Error.\n' + jqXHR.responseText);
          }
        }
      });
    }
    /**
     * when the AJAX request is successful this function is called
     * <br/><br/>will trigger a custom event to notify any listeners
     * <br/><br/>will also trigger the next request in the queue, if any exist
     */
    function deliveryUpdated(json) {
      $("#preloader").fadeOut();

      status.updatingDeliveryCharges = false;
      if (!json) return;
      if (!json.errorMessage) {
        //$(document).trigger(Salmon.Global.MobileCheckout.Summary.updateValues(json));
        Salmon.Global.MobileCheckout && Salmon.Global.MobileCheckout.Summary.updateValues(json)
      } else {
        Salmon.Global.MobileCheckout && Salmon.Global.MobileCheckout.Summary.updateValues(new Salmon.Global.ErrorMessage(json.errorMessage))
      }
      //$(document).trigger(Salmon.Global.CustomEvents.mobileDeliveryUpdated, json);
      $(document).dequeue(queueName);
    }
  }

  /**
   * initialise each instance of the delivery update form
   * @function
   * @private
   * @memberOf Salmon.Global.DeliveryUpdate
   */
  function init() {
    var forms = $('form.deliveryUpdate');
    for (var i = forms.length - 1; i >= 0; i--) {
      new DeliveryUpdateMobileForm(forms[i]);
    }
  }

  this.DeliveryUpdateMobileForm = DeliveryUpdateMobileForm;
});

Salmon = Salmon || {};
Salmon.Global = Salmon.Global || {};

Salmon.Global.ErrorMessage = (function(message) {
  // console.log(message); 

  if (!message) return;
  if (typeof message !== "string") return;
  if (message === "") return;

  if (!Adoro.Dialogue) {
    alert(message);
  } else {
    var // $dialogue = $(document.createElement("div")).addClass("ajaxError"),
      $container = $(document.createElement("div")).addClass("ajaxErrorContainer"),
      $message = $(document.createElement("p")).html(message);
    /* ,
			$ok = $(document.createElement("div")).addClass("ok").append("<a href='#close'>OK</a>"); */

    /*
    $ok.bind("click", function() {
    	Adoro.Dialogue.hideDialogue();
    	return false;
    });
    */

    // $dialogue.append($container.append($message).append($ok));
    $container.append($message);

    // Adoro.Dialogue.setHtml($dialogue.get(0));
    Adoro.Dialogue.setHtml($container.get(0));
    Adoro.Dialogue.showDialogue();
  }
});

var Salmon = Salmon || {};
Salmon.Global = Salmon.Global || {};
Salmon.Global.ExpressCheckout = Salmon.Global.ExpressCheckout || {};

/**
 * Will respond to the "Salmon.Global.CustomEvents.expressDeliveryUpdated" event and call the necessary
 * ExpressCheckout methods to control the user interface.
 * @author Pawel Magrian
 * @class Singleton
 * @static
 * @requires 
 * 	jQuery1.4.2.js
 * 	<br/>Salmon.Global.CustomEvents.js
 * 	<br/>Salmon.Global.ExpressCheckout.*.js
 */
Salmon.Global.ExpressCheckout.Controller = new (function() {
	$(document).bind(Salmon.Global.CustomEvents.expressDeliveryUpdated, function(e, json) {
		
		
		if(!json.errorMessage) {
			Salmon.Global.ExpressCheckout.Summary.updateValues(json);
		} else {
			new Salmon.Global.ErrorMessage(json.errorMessage);
		}
	});
});
var Salmon = Salmon || {};
Salmon.Global = Salmon.Global || {};
Salmon.Global.ExpressCheckout = Salmon.Global.ExpressCheckout || {};

/**
 * This controls the UI element for the summary of what's in the user's basket. This value can be updated using this control
 * @author Pawel Magrian
 * @name Summary
 * @class Singleton
 * @static
 * @constructor
 * @memberOf Salmon.Global.ExpressCheckout
 * @requires 
 * 	jQuery1.4.2.js
 */
Salmon.Global.ExpressCheckout.Summary = new (function() {
	// the root DOM element
	var $root;
	var shipping; 
	var total; 
	var totalOnCard;
	var ukVatAppliedTotal;
	var cardBalanceName = 'cardBalance';
	var cardAmountName = 'cardAmount';
	var voucherAmountName = 'voucherAmount';
	var selectedDeliveryAddressIdInput;
	var cardBalance;
	var cardBalanceTop;
	var cardAmount;
	var cardAmountBottom;
	var cardAmountTop;
	var voucherAmount;
	var voucherAmoutTop;
	var voucherAmountBottom;
	var i = 1;
	var j = 1;
	/**
	 * initialise onDomReady by finding dom element
	 * @function
	 * @private
	 * @memberOf Salmon.Global.ExpressCheckout.Summary
	 */
	function init() {
		shipping = $("span#totalShipping");
		total = $("span#totalToPayAmount");
		totalOnCard = $("span#selectedTotalToPay");
		ukVatAppliedTotal = $("span#ukVatAppliedTotal");
		totalBalance = $('span#totalBalanceToPay');
		cardBalanceTop = $('#cardBalanceTop');
		cardBalance =$('#cardBalance');
		cardAmount = $('#cardAmount');
		cardAmountBottom = $('#cardAmountBottom');
		cardAmountTop = $('#cardAmountTop');
		selectedDeliveryAddressIdInput = $('input[name="selectedDeliveryAddressId"]');
		voucherAmount = $('#voucherAmount');
		voucherAmountTop = $('#voucherAmountTop');
		voucherAmountBottom = $('#voucherAmountBottom');
	}
	
	/**
	 * update the html for the summary paragraph
	 * @function
	 * @name updateHtml
	 * @memberOf Salmon.Global.ExpressCheckout.Summary
	 * @param {String} html The string of html to update the element with when a product is added to basket
	 */	
	function updateValues(json) {
		i = 1;
		j = 1;
		if(!json) return;
		if(!isEmpty(shipping)) {
			$(shipping).html(json.totalShippingCharge);
		}
		if(!isEmpty(total)) {
			$(total).html(json.totalOrder);
		}
		if(!isEmpty(totalOnCard)) {
			$(totalOnCard).html(json.totalToPay);
		}
		if(!isEmpty(ukVatAppliedTotal)) {
			$(ukVatAppliedTotal).html(json.ukVatAppliedTotal);
		}
		
		if(!isEmpty(totalBalance)) {
			$(totalBalance).html(json.totalToPay);
		}

		if (!isEmpty(cardBalance)){
			$(cardBalance).html(json.cardBalance);
			$(cardBalanceTop).html(json.cardBalance);
		}

		if (!isEmpty(cardAmount)){
			$(cardAmount).html(json.cardAmount);
			$(cardAmountBottom).html(json.cardAmount);
			$(cardAmountTop).html(json.cardAmount);
		}

		if (!isEmpty(voucherAmount)){
			$(voucherAmount).html(json.voucherAmount);
			$(voucherAmountTop).html(json.voucherAmount);
			$(voucherAmountBottom).html(json.voucherAmount);
		}

		while (json[cardAmountName + i]) {
			$('#' + cardAmountName + i).html(json[cardAmountName + i]);
			$('#' + cardAmountName + 'Bottom' + i).html(json[cardAmountName + i]);
			$('#' + cardAmountName + 'Top' + i).html(json[cardAmountName + i]);
			$('#' + cardBalanceName + i).html(json[cardBalanceName + i]);
			$('#' + cardBalanceName + 'Top' + i).html(json[cardBalanceName + i]);
			i++;
		}

		while (json[voucherAmountName + j]) {
			$('#' + voucherAmountName + j).html(json[voucherAmountName + j]);
			j++;
		}

		if (json.selectedDeliveryAddressId && selectedDeliveryAddressIdInput.length > 0) {
			selectedDeliveryAddressIdInput.val(json.selectedDeliveryAddressId);
		}

		//Refresh the page if to pay is more than 0 and payment section was not generated
		if ($('#payNow .selectedPayment').length == 0 && parseFloat( json['totalToPay'].replace('&pound;','').replace('£','') ) > 0) {
			var url = window.location.protocol +'//'+ window.location.host + window.location.pathname + window.location.search + '&forceRefresh=true';
			if ($('input[name="gameShippingOptions"]').val().length > 0) url += '&gameShippingOptions=' + $('input[name="gameShippingOptions"]').val();
			if ($('input[name="additionalShippingOptions"]').val().length > 0) url += '&additionalShippingOptions=' + $('input[name="additionalShippingOptions"]').val();


			window.location.href = url;
		}
	}
	
	function isEmpty(str) {
	    return (!str || 0 === str.length);
	}
	
	$(init);
	
	this.updateValues = updateValues;
});	
var Salmon = Salmon || {};
Salmon.Global = Salmon.Global || {};
Salmon.Global.FeatureToggles = new(function() {
  var featureObj = {},
    getFeature = function(featureName) {
      if (typeof featureObj[featureName] != 'undefined') return featureObj[featureName];
    };

  if (typeof Game != 'undefined' && typeof Game.featureToggles != 'undefined') featureObj = Game.featureToggles;
  return {
    getFeature: getFeature
  };
});

var Salmon = Salmon || {};
Salmon.Global = Salmon.Global || {};
Salmon.Global.Fixes = Salmon.Global.Fixes || {};
/**
 * Fixes
 * @author Serge Radkevics
 * @name Fixes
 * @class Singleton
 * @static
 * @constructor
 * @memberOf Salmon.Global
 * @requires 
 *  jQuery1.3.1.js
 *  <br/>Adoro.DropDownMenu.js
 */

Salmon.Global.Fixes.isTouchSupported = function() {

  var msTouchEnabled = window.navigator.msMaxTouchPoints;
  var generalTouchEnabled = "ontouchstart" in document.createElement("div");

  if (msTouchEnabled || generalTouchEnabled) {
    return true;
  }
  return false;
};





Salmon.Global.Fixes.FooterSignUp = new(function() {
  $(document).ready(function() {


    var isNewHeader = Salmon.Global.FeatureToggles.getFeature('NewHeaderAndFooter');
    var $newsletter = (isNewHeader) ? $('footer .comminitySection') : $('#footer .newsletter');


    if ($newsletter.length > 0) {
      var $input = (isNewHeader) ? $newsletter.find('input') : $newsletter.find('#logonEmailId');
      var $submit = (isNewHeader) ? $newsletter.find('#submitEmail') : $newsletter.find('#signUpBtn');
      var requestUrl = '/webapp/wcs/stores/servlet/NewsLetterEmailInterface?',
        validateEmail = function(email) {
          var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
          return re.test(email);
        },

        urlSubmit = function() {
          var val = $input.val(),
            error = false;


          $newsletter.find('.error').remove();
          if (val === '')
            error = 'Please enter email';
          else
          if (!validateEmail(val))
            error = 'Please enter a valid email address';

          if (!error) {
            $.get(requestUrl + 'email=' + val, function(res) {
              console.log(res);
              res = JSON.parse(res.replace('/*', '').replace('*/', ''));
              if (res.success) {
                $submit.remove();
                $input.before('<h3>Your email was successfully added</h3>')
                  .remove();
              } else {
                $input.before('<h3 class="error">Error occured</h3>');
              }
            });
          } else {
            $input.before('<span class="error">' + error + "</span>");
          }
        };

      if (isNewHeader) {
        $(document).on('click', '#footer #submitEmail', function() {
          urlSubmit();
        });
      } else {
        $(document).on('click', '#footer #signUpBtn', function() {
          urlSubmit();
        });
      }

    }
  });
});





Salmon.Global.Fixes.GenerateAJAXHeader = function() {

    var $rewardMessageContainer,
        $miniBasketContainer,
        $itemCount,
        $linksContainer,
        storeId,
        langId,
        rewardUrl = '/webapp/wcs/stores/servlet/AjaxInitialView',
        NewUserInfoHeaderTop = Salmon.Global.FeatureToggles.getFeature('NewUserInfoHeaderTop'),
        result,
        generateAccountMenu = function(){	
            if (result.userInfo.isLoggedIn == 'true') {
                var linksContainerHtml = '',
                    html = '',
                    userLinks = result.userInfo.loggedInUserLinks;
                linksContainerHtml += '<span class="greeting">Hello ' + result.userInfo.userName + '</span>';
                if (typeof result.rewardInfo != 'undefined' && typeof result.walletInfo == 'undefined') {
                  linksContainerHtml += '<span class="rewardPoints"><a href="' + result.rewardInfo.rewardCardURL + '">' + result.rewardInfo.rewardCardMessage + '</a></span>';
                } else {
                  if (typeof result.walletInfo.walletCardURL != 'undefined')
                    linksContainerHtml += '<span class="rewardPoints"><a href="' + result.walletInfo.walletCardURL + '">' + result.walletInfo.walletMessage + '</a></span>';
                  else
                    linksContainerHtml += '<span class="rewardPoints"><a href="#">' + result.walletInfo.walletMessage + '</a></span>';
                }
                $linksContainer.html(linksContainerHtml).addClass('loggedIn');
                html += '<div class="links">';
                for (var i in userLinks) {
                	if (userLinks[i].newTab) {
                		html += '<a href="' + userLinks[i].url + '" target="_blank">' + userLinks[i].title + '</a>';
                	} else {
                		html += '<a href="' + userLinks[i].url + '">' + userLinks[i].title + '</a>';
                	}
                }
                html += '<a class="logoff" href="' + result.userInfo.logoffLink.url + '">' + result.userInfo.logoffLink.title + '</a>';
                $rewardMessageContainer.html(html);
            }
        },
         generateAccountMenuOld = function(){
            if (result.userInfo.isLoggedIn == 'true') {
                var html = '',
                    userLinks = result.userInfo.loggedInUserLinks;
                html += '<span class="greeting">Hello ' + result.userInfo.userName + '</span>';
                html += '<span class="rewardPoints"><a href="' + result.rewardInfo.rewardCardURL + '">' + result.rewardInfo.rewardCardMessage + '</a></span>';
                html += '<div class="links">';
                for (var i in userLinks) {
                   html += '<a href="' + userLinks[i].url + '">' + userLinks[i].title + '</a>';
                }
                html += '<a class="logoff" href="' + result.userInfo.logoffLink.url + '">' + result.userInfo.logoffLink.title + '</a>';
                $rewardMessageContainer.html(html);
            }
        },
        generateMiniBasket = function(){
            var amountOfItems = parseInt(result.orderInfo.orderQuantity),
                html = '';
            $miniBasketContainer.parent().find('span.text').text(amountOfItems);
            if (amountOfItems > 0) {
                var items = result.orderInfo.itemsList.slice(0, parseInt(Game.xcomreg.miniBasketItems));
                for (var i in items){
                    var item = items[i];
                    html += '<a href="' + item.productURL + '" class="item">';
                        if (typeof GameCloudinary === "object") {
                          html += '<img data-src="' + item.packshotUrl +'" class="cloudinaryImg" alt="' + item.productName + '" />';
                        } else {
                          html += '<img src="' + item.packshotUrl +'" alt="' + item.productName + '" />';
                        };
                        html += '<div>';
                            html += '<h3>'  + item.productName + '</h3>';
                            html += '<div class="bottom">';
                                html += '<span class="qty">Qty: ' + item.qty +'</span>';
                                html += '<span class="price">' + item.price + '</span>';
                            html += '</div>';
                        html += '</div>';
                    html +='</a>';
                }
                html +='<div class="totals">';
                    html += '<span class="total">Total: ' + result.orderInfo.totalValue + '</span>';
                    html += '<a class="btn primary" href="' + result.orderInfo.basketUrl + '">View basket</a>';
                html += '</div>';
            } else {
                html += '<p class="empty">0 items</p>';
            }
            $miniBasketContainer.html(html);
            
            if (typeof GameCloudinary === "object") {
              GameCloudinary.doDelayedCloudinaryInit();
            };
        },
        hideMiniBasket = function(){
          $miniBasketContainer.parent().find('span.text').text('');
          $miniBasketContainer.remove();
        },
        initialiseRendering = function(){
          if (NewUserInfoHeaderTop)
              generateAccountMenu();
          else
              generateAccountMenuOld();
          
          if (typeof result.orderInfo.miniBasketHidden != 'undefined')
            hideMiniBasket();
          else
            generateMiniBasket();
        },
        checkIfOrderconf = function(){
        	orderConfirmationServelet = 'OrderShippingBillingConfirmationView';
            newCheckoutOrderConfirmationServelet = 'CheckOutConfirmationView';
            return document.location.pathname.indexOf(orderConfirmationServelet) != -1 || document.location.pathname.indexOf(newCheckoutOrderConfirmationServelet) != -1;
        }


    $(document).ready(function() {


        if ($('header').hasClass('checkout')) return;
        
        $rewardMessageContainer = $('header .accountDropdown');
        $miniBasketContainer = $('header .dropdownCart');
        $linksContainer = $('.myAccountContainer .linksContainer');

        storeId = $('input[name="storeId"]').val();
        langId = $('input[name="langId"]').val();
        if (typeof Game != 'undefined' && typeof Game.featureToggles != 'undefined')
            $rewardMessageContainer.addClass('loading');
        if (storeId === undefined || storeId === 'undefined') {
            storeId = '10151';
            console.log('Undefined storeId reverting to default 10151');
        }
        if (langId === undefined || langId === 'undefined') {
            langId = '44';
            console.log('Undefined langId reverting to default 44');
        }
        // GAME-5594, if Order Conf page, get the Order with "P" status 
        // the ajaxInitialReponse variable (initialized in NewRelicHeader.jsp) contains the completed order
        if (checkIfOrderconf() || typeof ajaxInitialReponse == 'undefined') {
          $.get(rewardUrl + '?storeId=' + storeId + '&langId=' + langId, function(res) {
              result = res;
              initialiseRendering();
          });
        } else {
          result = ajaxInitialReponse;
          initialiseRendering();
        }
        

    });
};


var singleAjaxCallFeautre = Salmon.Global.FeatureToggles.getFeature('SingleAjaxCallHeader');

if (singleAjaxCallFeautre)
  Salmon.Global.Fixes.GenerateAJAXHeader();
else
  (typeof Salmon.Global.Fixes.AJAXLoadHeader != 'undefined' ) && Salmon.Global.Fixes.AJAXLoadHeader();







Salmon.Global.NewHeaderFooter = (function() {


  var
  // $menuLinks = $('.toggleContainer > .dropdownToggle'),
  // $menuItems = $('.menuContainer > *'),
  // headerHeight = $('header nav').height(),
  // $searchResults = $('#searchResults'),
  // $searchInput = $('#locateStoreHeader #searchInput'),
    $postcodeInput = $('#locateStoreHeader #storeLocInputHeader'),
    $postcodeSubmit = $('#locateStoreHeader .findStore'),
    // typingTimer,
    $hoverLinks = $('header .departmentContainer > a, header .formatContainer > a'),
    isTouch = (function() {
      return 'ontouchstart' in window || 'onmsgesturechange' in window;
    })(),
    postcodeDropdownValidation = function() {
      var validate = function(val) {
        if (typeof val != 'undefined' && val.length > 0)
          $postcodeSubmit.removeClass('disabled');
        else
          $postcodeSubmit.addClass('disabled');
      };
      validate($postcodeInput.val());
      $postcodeInput.on('keyup', function() {
        validate($postcodeInput.val());
      });
    },
    footerController = function() {
      var $footer = $('footer'),
        $footerLinks = $('footer nav > a'),
        $footerSections = $('footer .sections section'),
        $closeButtons = $('footer .sections .close'),
        footerHeight = $('footer').height(),
        openSection = function($section) {
          $section.addClass('opened');
          /*TweenLite.to($section, 0.5, {
              top: parseInt($section.outerHeight() * -1) + "px",
              ease: Power4.easeInOut,
              onComplete: function() {

              }
          });*/

          $section.animate({
            top: parseInt(($section.outerHeight() * -1) ,10) + "px"
          }, 200, function() {

          });
        },
        closeSection = function($section) {
          /*TweenLite.to($section, 0.2, {
              top: footerHeight + "px",
              onComplete: function() {
                  $section.removeClass('opened');
              }
          });*/

          $section.animate({
            top: footerHeight + 'px'
          }, 200, function() {
            $section.removeClass('opened');
          });
          $('body').off('click.closeFooter');
        };


      $footerLinks.on('click', function(e) {
        var $section = $footerSections.eq($.inArray(this, $footerLinks)),
          $selectedSection = $footerSections.filter('.opened');
        e.preventDefault();
        closeSection($selectedSection);
        $footerLinks.filter('.current').removeClass('current');
        $(this).addClass('current');
        if ($section[0] != $selectedSection[0]) openSection($section);
        $('body').on('click.closeFooter', function(e) {
          if (!$footer.is(e.target) && $footer.has(e.target).length === 0) {
            closeSection($section);
          }
        });
      });


      $closeButtons.on('click', function(e) {
        e.preventDefault();
        closeSection($(this).parent().parent());
        $footerLinks.filter('.current').removeClass('current');
      });

      window.addEventListener("orientationchange", function() {
        $('footer section').each(function() {
          closeSection($(this));
        });
      }, false);
    };

  if (isTouch) {
    $hoverLinks.on('touchend', function() {
      var $leftCol = $(this).parent().find('.dropdownMenu .leftCol');
      $leftCol.find('> div > a').eq(0).trigger('hover');
    });
  }


  postcodeDropdownValidation();
  footerController();
})();

var Salmon = Salmon || {};
Salmon.Global = Salmon.Global || {};


Salmon.Global.GlobalNav = new(function() {
  $('li.consoleOptions').on('mouseenter', function(e){
    $(this).find('>a').addClass('selected');
    $(this).find('>ul').addClass('show');
  });
  $('li.consoleOptions').on('mouseleave',function(e){
    $(this).find('>a').removeClass('selected');
    $(this).find('>ul').removeClass('show');
  });

});

Salmon.Global.IORecSliders = (function() {

  var IOSliderParams = ['ZoneID', 'ProductID', 'CategoryID', 'Randomize', 'SearchTerm', 'AttributeValue'],

	IOSlider = function($container, isLast, predefinedArgs, callback) {

	  this.$container = $container;
	  this.predefinedArgs = predefinedArgs;
	  this.callback = callback;
	  this.ioArgs = [];
	  // For some recs websphere calls callback function twice, to avoid it we need to check if it was called before
	  this.populated = false;
	  this.style = this.$container.data('displaystyle');
	  this.init(isLast);
	},
	verticalHTML = '<a class="rec" href="%Url%" data-condition="%Condition%"> <div class="image"> <img src="%Packshot%"> </div> <div> <h3>%Title%</h3> <span class="platformLogo %Category%"></span> <div class="rating rating%Rating%">&nbsp;</div> <span class="price">&pound;%Price%</span> </div> </a>',
	horizontalHTML = '<li class="slide"><div class="image"><a class="rec" href="%Url%" data-condition="%Condition%"> <img src="%Packshot%"></a></div> <div> <a class="rec" href="%Url%"><h3>%Title%</h3></a> <span class="platformLogo %Category%"></span> <div class="rating rating%Rating%">&nbsp;</div> <span class="price">&pound;%Price%</span><a class="buy btn primary addToBasket" href="%BuyUrl%">ADD TO BASKET</a></div> </li>',
	verticalHTMLCloudinary = '<a class="rec" href="%Url%" data-condition="%Condition%"> <div class="image"> <img data-src="%Packshot%" class="cloudinaryImg"> </div> <div> <h3>%Title%</h3> <span class="platformLogo %Category%"></span> <div class="rating rating%Rating%">&nbsp;</div> <span class="price">&pound;%Price%</span> </div> </a>',
	horizontalHTMLCloudinary = '<li class="slide"><div class="image"><a class="rec" href="%Url%" data-condition="%Condition%"> <img data-src="%Packshot%" class="cloudinaryImg"></a></div> <div> <a class="rec" href="%Url%"><h3>%Title%</h3></a> <span class="platformLogo %Category%"></span> <div class="rating rating%Rating%">&nbsp;</div> <span class="price">&pound;%Price%</span><a class="buy btn primary addToBasket" href="%BuyUrl%">ADD TO BASKET</a></div> </li>',
	$sliders = $('.IORecsSlider'),
	constructBuyUrl = function(catEntryId, partNumber){
		var buyParams = {
				'base' : '/webapp/wcs/stores/servlet/OrderChangeServiceItemAdd?',
				'queryParams': {
					storeId: '10151',
					langId: '44',
					quantity: 1,
					errorViewName: 'AjaxActionErrorResponse',
					URL: 'AjaxMiniShoppingBagView',
					catEntryId_1: catEntryId,
					partNumber: partNumber

				}
		}
		var buyUrl = buyParams.base;

	 	for (var key in buyParams.queryParams) {
	 		buyUrl += key + '=' + buyParams.queryParams[key] + '&';
	 	}

	 	return buyUrl;


	},
	IOProto = IOSlider.prototype;

  IOProto.init = function(isLast) {
	var self = this;
	self.generateArgs();
	Salmon.Global.uiBlocker.insertLoader(self.$container);
	//Setup function in a global scope based on zone Id, which will be used as callback for cmDisplayRecs
	window[this.ioArgs[0] + "_zp"] = function(recommendedIds, zoneId, symbolic, targetId, targetCat, recAttributes, targetAttr, zoneHeader) {
	  //adding SKU's into main attribute array. we need to check if ratings are setup at position 17 first
	  for (var i in recAttributes ) {
	  	if (recAttributes[i].length == 17)
	  		recAttributes[i][17] = recommendedIds[i];
	  	else
	  		recAttributes[i][18] = recommendedIds[i];
	  }
	  var ioZoneCountReturnName = 'IOCountReturn_' + zoneId,
		ioZonePopulateName = 'IOPopulate_' + zoneId + '_';

	  if (typeof window[ioZoneCountReturnName] != 'undefined')
		window[ioZoneCountReturnName]++;
	  else
		window[ioZoneCountReturnName] = 1;

	  ioZonePopulateName = ioZonePopulateName + window[ioZoneCountReturnName].toString();

	  if (typeof window[ioZonePopulateName] == 'function') window[ioZonePopulateName](recommendedIds, zoneId, symbolic, targetId, targetCat, recAttributes, targetAttr, zoneHeader);
	};

	var _zoneId = this.ioArgs[0],
	  ioZoneCountName = 'IOCount_' + _zoneId,
	  // ioZoneCountReturnName = 'IOCountReturn_' + _zoneId,
	  ioZonePopulateName = 'IOPopulate_' + _zoneId + '_';

	if (typeof window[ioZoneCountName] != 'undefined')
	  window[ioZoneCountName]++;
	else
	  window[ioZoneCountName] = 1;

	window[ioZonePopulateName + window[ioZoneCountName].toString()] = function(recommendedIds, zoneId, symbolic, targetId, targetCat, recAttributes, targetAttr, zoneHeader) {
	  if (!self.populated) {
		self.targetAttributes = targetAttr;
		self.generateProductRecs(recAttributes);
		Salmon.Global.uiBlocker.removeLoader(self.$container);
		self.populated = true;

		if (typeof self.$container.data('usetitle') != 'undefined' && zoneHeader.length > 0) self.$container.parent().find('h2').text(zoneHeader);
	  }
	};

	if (self.ioArgs.length > 0) {
	  cmRecRequest.apply(window, self.ioArgs);
	  if (isLast) cmDisplayRecs();
	} else {
	  self.$container.hide();
	}
  };
  IOProto.generateArgs = function() {
	if (typeof this.predefinedArgs == 'undefined') {
	  for (var i in IOSliderParams) {
	  	var dataName = IOSliderParams[i].toLowerCase();
		if (typeof this.$container.data(dataName) != 'undefined') {
			if (IOSliderParams[i].toLowerCase() == 'productid' && this.$container.data(IOSliderParams[i].toLowerCase()) == 'currentProductId')
				this.ioArgs.push(Game.CurrentPage.PageInfo.ProductMediaID)
			else
				this.ioArgs.push(this.$container.data(IOSliderParams[i].toLowerCase()));
		}
	  }
	} else {
	  for (var i in IOSliderParams) {
		if (typeof this.predefinedArgs[IOSliderParams[i]] != 'undefined') this.ioArgs.push(this.predefinedArgs[IOSliderParams[i]]);
	  }
	}
  };

  IOProto.generateProductRecObject = function(params) {
	var obj = {
	  Title: (params[0].length > 30) ? params[0].slice(0, 29) + '...' : params[0],
	  Url: (params[3].indexOf('?') == -1) ? params[3] + '?cm_vc=' + this.ioArgs[0] : params[3] + '&cm_vc=' + this.ioArgs[0],
	  Packshot: params[4],
	  Category: params[6].replace(/ /g, ''),
	  Condition: (params[13] == 'PreOwned') ? 'Pre-owned' : 'New',
	  Price: parseFloat(params[10]).toFixed(2),
	  isExclusive: (params[8] == "Y"),
	  isFranchise: (params[11].replace(/[^a-zA-Z0-9]/g, '') == this.targetAttributes[11].replace(/[^a-zA-Z0-9]/g, '')),
	  BuyUrl: constructBuyUrl(params[15], (params.length == 19) ? params[18] : params[17])
	};

	if (params.length == 19)
	  obj.Rating = params[17];
	else
	  obj.Rating = 'Hide';

	return obj;
  };

  IOProto.generateProductRecs = function(recsParams) {
	var recObjectsExclusive = [],
	  recObjectsNotExclusive = [];


	//Business logic: if exclusive goes in first array, otherwise if same franchise goes in the back if not - in front of second array
	if (recsParams.length === 0) {
	  if (this.$container.parent().parent().hasClass('recs')) {
		  if ($('.section.perfectPartners .perfectPartnerProducts ').length > 0 ) {
		  	$('.section.perfectPartners .recs').hide();
		  } else {
		  	$('.section.perfectPartners').hide();
		  }
	  } else {
	  	this.$container.hide();
	  }

	  // Hide whole sidebar section on PDP
	  if (!$('body').hasClass('basketOverlayOpen')) {
			if (this.$container.parent().hasClass('freqBought')) this.$container.parent().hide();
			if (this.$container.parent().hasClass('recommendation')) this.$container.parent().hide();
	  };


	}
  for (var i in recsParams) {
    // var recParams = recsParams[i],
    // isExclusive = (recParams[8] == "Y"),
    // isFranchise = (recParams[11].replace(/[^a-zA-Z0-9]/g, '') == this.targetAttributes[11].replace(/[^a-zA-Z0-9]/g, '')),
    // recObject = this.generateProductRecObject(recParams);

    recObjectsExclusive.push(this.generateProductRecObject(recsParams[i]));

    // if (isExclusive) {
    // recObjectsExclusive.unshift(recObject);
    // } else {
    // if (isFranchise)
    //   recObjectsNotExclusive.push(recObject);
    // else
    //   recObjectsNotExclusive.unshift(recObject);
    // }
  }

	this.generateProductRecsHtml(recObjectsExclusive.concat(recObjectsNotExclusive));
  };
  IOProto.generateProductRec = function(recObject) {

  var html;
  if (typeof GameCloudinary === 'undefined') {
  	html = (this.style == 'vertical') ? verticalHTML : horizontalHTML;
  } else {
  	html = (this.style == 'vertical') ? verticalHTMLCloudinary : horizontalHTMLCloudinary;
  };

	for (var i in recObject) {
	  var find = '%' + i + '%';
	  var re = new RegExp(find, 'g');

	  html = html.replace(re, recObject[i]);
	  html = html.replace('%' + i + '%', recObject[i]);
	}

	return html;
  };

  IOProto.generateProductRecsHtml = function(recsArray) {
	for (var i in recsArray) {
	  this.$container.append(this.generateProductRec(recsArray[i]));
	}

	if (this.style == 'slider') {
	  this.$container.html('<div class="carouselPrev icon sliderControl"><span>Prev</span></div><div class="carouselNext icon sliderControl"><span>Next</span></div><div class="slidesWindow"><ul class="slides">' + this.$container.html() + '</ul></div>');
	  this.$container.addClass('IOsliderContainer');
	  var sliderOptions = {
		fullWidth: false,
		elements: {
		  sliderContainer: this.$container
		}
	  }

	  if (typeof Game.CurrentPage != 'undefined' && (Game.CurrentPage.PageName == 'pdp' || Game.CurrentPage.PageName == 'pdpPackage')) {
	  	sliderOptions.slidesToFit = ($(window).width() < 1025) ? ($(window).width() < 800 ? 2 : 3) : 5;
	  }
	  var packSliderSlider = new Salmon.Global.SimpleSlider.newSlider(sliderOptions);
	}
	if (typeof this.$container.data('addtobasket') == 'undefined' || this.$container.data('addtobasket') == 'false') {
		this.$container.addClass('noAddToBasket');

    if ($('.cloudinaryImg').length) {
        var isGameCloudinaryLoaded = false;
        var checkGameCloudinaryLoaded = setInterval(function(){

            if (typeof GameCloudinary === 'object') {
                isGameCloudinaryLoaded = true;
            };

            if (isGameCloudinaryLoaded) {
                clearInterval(checkGameCloudinaryLoaded);
                GameCloudinary.doDelayedCloudinaryInit();
            };

        }, 100);
    };

	};
	if (typeof this.callback == 'function') {
		this.callback();
	};


  };

  $sliders.each(function(index) {
		var slider = new IOSlider($(this), (index == $sliders.length - 1));
  });


  return {
	IOSlider: IOSlider
  };
})();



Salmon.Global.IORecsDoubleSlider = (function() {

  $(document).on('click', '.ioContainer.double h2 span', function() {
	var index = $.inArray(this, $(this).parent().find('span'));
	$(this).parent().find('.active').removeClass('active');
	$(this).parent().parent().find('.IOsliderContainer.active').removeClass('active');
	$(this).addClass('active');
	$(this).parent().parent().find('.IOsliderContainer').eq(index).addClass('active');
  });

})();

/*Here is some of Game's code which needed adding here re: GAME-3202*/
$(function() {
	if ($( '#pgProductDetails').length) {
		setTimeout(function(){
			$('.IORecsSliderNew a.addToBasket').each(function(){
				$(this).attr('href', $(this).attr('href') + 'cm_vc=Prod_2');
			});
		}, 1500);
	}
});

var Salmon = Salmon || {};
Salmon.Global = Salmon.Global || {};
Salmon.Global.MiniBasket = Salmon.Global.MiniBasket || {};

/**
 * Will respond to the "Salmon.Global.CustomEvents.productAddedToBasket" event and call the necessary
 * MiniBasket methods to control the user interface.
 * @author Adam Silver
 * @class Singleton
 * @static
 * @requires 
 *  jQuery1.4.2.js* Salmon.Global.CustomEvents.js

 *  Salmon.Global.MiniBasket.*.js
 **/
Salmon.Global.MiniBasket.Controller = new(function() {
  $(document).bind(Salmon.Global.CustomEvents.productAddedToBasket, function(e, json) {


    if (!json.errorMessage) {
      // Salmon.Global.MiniBasket.RecentlyAdded.updateHtml(json.smallRecentlyAddedHtml);

      if (json.coremetrics) {
        Salmon.Global.MiniBasket.RecentlyAdded.callCoremetrics(json.coremetrics);
      }

      if (!Salmon.Global.FeatureToggles.getFeature('NewHeaderAndFooter')) Salmon.Global.MiniBasket.RecentlyAdded.show(json.smallRecentlyAddedHtml);
      Salmon.Global.MiniBasket.ItemsList.updateHtml(json.itemsListHtml);
      Salmon.Global.MiniBasket.Summary.updateHtml(json.orderQuantity);

      $(this).trigger(Salmon.Global.CustomEvents.customProductAddedToBasket, json);
    } else {
      if (!Salmon.Global.FeatureToggles.getFeature('NewHeaderAndFooter')) new Salmon.Global.ErrorMessage(json.errorMessage);
    }
  });
});

var Salmon = Salmon || {};
Salmon.Global = Salmon.Global || {};
Salmon.Global.MiniBasket = Salmon.Global.MiniBasket || {};

/**
 * This controls the UI element that shows the list of products in the users basket. This UI element
 * is shown and hidden on certain mouse events. The list of products can be updated.
 * @author Adam Silver
 * @name ItemsList
 * @class Singleton
 * @static
 * @constructor
 * @memberOf Salmon.Global.MiniBasket
 * @requires 
 * 	jQuery1.4.2.js
 * 	<br/>Salmon.Global.MiniBasket.RecentlyAdded.js
 */
Salmon.Global.MiniBasket.ItemsList = new(function() {

  var rootSelector,
    miniShoppingBagRootSelector;
    // cssHideClass = "hide";

  /**
   * initialise onDomReady by finding dom elements and binding events
   * @function
   * @private
   * @inner
   * @memberOf Salmon.Global.MiniBasket.ItemsList
   */
  function init() {
    miniShoppingBagRootSelector = "#miniShoppingBagWrapper";

    if (Salmon.Global.FeatureToggles.getFeature('NewHeaderAndFooter'))
      rootSelector = '.dropdownMenu.dropdownCart.basket';
    else
      rootSelector = "#miniShoppingBagWrapper .shoppingBagSummary";
  }

  /**
   * update the html for the items list
   * @name updateHtml
   * @function
   * @memberOf Salmon.Global.MiniBasket.ItemsList
   * @param {String} html The string of html to update the element with when a product is added to basket
   */
  function updateHtml(html) {
    if (typeof $(rootSelector) === "undefined") return;
    if (typeof html !== "string") return;

    if ($(html).find("div.product").length > 0) {
      $(miniShoppingBagRootSelector).parent().addClass("miniShoppingBagHasItems");
    } else {
      $(miniShoppingBagRootSelector).parent().removeClass("miniShoppingBagHasItems");
    }

    $(rootSelector).empty().append(html);
  }

  $(init);

  this.updateHtml = updateHtml;
});

var Salmon = Salmon || {};
Salmon.Global = Salmon.Global || {};
Salmon.Global.MiniBasket = Salmon.Global.MiniBasket || {};

/**
 * This component will show the most recently added product in their basket. This functionality occurs once the user
 * successfully adds a product to their basket, and acts as an acknowledgement to the user.
 * @author Adam Silver
 * @name RecentlyAdded
 * @class Singleton
 * @static
 * @constructor
 * @memberOf Salmon.Global.MiniBasket
 * @requires 
 * 	jQuery1.4.2.js
 **/

Salmon.Global.MiniBasket.RecentlyAdded = new(function() {
  // var $root,
  //   hideDuration = 500,
  //   cssHideClass = "hide",
  //   cssFixedClass = "fixedRecentlyAdded",
  //   timeout;
    var open = false;

  /**
   * initialise onDomReady by finding/creating dom elements
   * @function
   * @private
   * @memberOf Salmon.Global.MiniBasket.RecentlyAdded
  function init() {
  	console.log('Salmon.Global.MiniBasket.RecentlyAdded.updateHtml.init!'); 

  	$root = (function() {
  		var div = document.createElement("div");
  		var wrapper = $('.wrapper')[0]; 

  		div.id = 'addToBasketMerchandising';
  		$(div).addClass("recentlyAdded");
  		$(div).addClass(cssHideClass);
  		$(wrapper).prepend(div); 

  		return $(div);
  	}());
  			
  	*/
  /*
  		if (Salmon.Components) {
  			if (Salmon.Components.Corners) {
  				new Salmon.Components.Corner($root, ["br", "bl"]);
  			}
  		}
  		*/
  /*
  	}
  	*/

  /**
   * Allows the user to update the html inside the recently added panel so that the most recent product is represented.
   * @function
   * @name Salmon.Global.MiniBasket.RecentlyAdded.updateHtml
   * @memberOf Salmon.Global.MiniBasket.RecentlyAdded
   * @param {String} html The string of html to update the element with when a product is added to basket
   *
  function updateHtml(html) {
  	console.log('Salmon.Global.MiniBasket.RecentlyAdded.updateHtml!'); 
  	
  	if(!$root) return;
  	if(!html) return;

  	$root.empty().append(html);

  	var closeControl = document.createElement('div'); 
  	var closeControlA = document.createElement('a'); 
  	var closeControlSpan = document.createElement('span'); 

  	closeControlA.href = '#'; 
  	closeControlA.appendChild(closeControlSpan);
  	closeControl.appendChild(closeControlA);
  	closeControl.id = 'closeControl'; 

  	$root.append(closeControl);
  	$(closeControlA).bind('click', hide); 
  	$root.find('li.continue').children('a').bind('click', hide); 
  }
  **/

  function callCoremetrics(script) {
    var $script = $(script);
    for (var i = 0; i < $script.length; i++) {
      if ($script[i].innerHTML) {
        var scriptHtml = $script[i].innerHTML.replace("<!--", "").replace("//-->", "").replace(/^\s*/, "").replace(/\s*$/, "");
        if (scriptHtml.indexOf("cmSet") !== 0) {
          // alert(scriptHtml);
          eval(scriptHtml);
        }
      }
    }
  }

  /*
   * simpler open function to bring in line with PDP
  function show() {
  	console.log('open the overlay!'); 
  	
  	open = true;

  	$root.removeClass(cssHideClass);
  	$root.css("opacity", "1");
  	
  	document.getElementById('overlay').style.display = 'block'; 
  	
  	Salmon.Global.AnimateScrollTo(document.body);
  }
  **/

  /*
   * open function using Adoro
   **/
  function show(content) {
    // console.log('open the overlay via Adoro!'); 

    open = true;

    Adoro.Dialogue.setHtml('<div class="basketAddedContent">' + content + '</div>');
    Adoro.Dialogue.showDialogue({
      callback: function() {
        if ($('#dialogue #warranty').length > 0) {

          //initialize warranties
          Salmon.Global.Warranties.AddToBasketOverlay();
          if ($('#dialogue #warranty .inner').length > 0) {
            setInterval(function() {
              $('#dialogue #warranty').addClass('open');
            }, 700);
          }

        }
      },
      extraHeight: -156
    });
    // expand warraties section if exist
    /*if ($('#dialogue #warranty').length > 0) {
    	$('#dialogue #warranty').addClass('open');
    	//$('#dialogue').css('top',parseInt($('#dialogue').css('top')) - 156);
    }*/
    // add event listener for 'keep item' action
    $('div.price-increase li.keep a').bind('click', showDefaultOptions);

    // add event listener for 'continue' action
    $('div.checkoutInfo li.continue a').bind('click', hide);

    // also close overlay when clicking on background
    $('#overlay').bind('click', hide);
  }

  /*
   * show the default options when required
   **/
  function showDefaultOptions(e) {

    $(this).parents('div').find('.orderDetails .mpStatus').css('display', 'none');
    $(this).parentsUntil('ul').parent().css('display', 'none');
    $(this).parentsUntil('ul').parent().siblings().css('display', 'block');

    e.preventDefault();
  }

  /*))
   * close function using Adoro
   **/
  function hide(e) {
    // console.log('close the overlay via Adoro!'); 

    open = false;

    Adoro.Dialogue.setHtml('');
    Adoro.Dialogue.hideDialogue();

    e.preventDefault();
  }

  /**
   * hide the recently added element after the configurable time
   * @function
   * @private
   * @memberOf Salmon.Global.MiniBasket.RecentlyAdded
  function hide() {
  	$root.animate(
  		{"opacity": "0"}, 
  		{duration: 
  			hideDuration, 
  			complete: function() {
  				open = false;
  				$root.addClass(cssHideClass);
  				$root.removeClass(cssFixedClass)
  				$(window).unbind("scroll");
  				document.getElementById('overlay').style.display = 'none'; 
  			}
  		}
  	);
   }
  **/

  /**
   * This can be used to check whether the recently added panel is open or not and is 
   * used within Salmon.Global.MiniBasket.ItemsList.js
   * @name isOpen
   * @memberOf Salmon.Global.MiniBasket.RecentlyAdded
   * @function
   * @return {Boolean} True if RecentlyAdded is showing, otherwise false
   **/
  function isOpen() {
    return open;
  }

  // $(init);

  // this.updateHtml = updateHtml;
  this.callCoremetrics = callCoremetrics;
  this.show = show;
  this.isOpen = isOpen;
});

var Salmon = Salmon || {};
Salmon.Global = Salmon.Global || {};
Salmon.Global.MiniBasket = Salmon.Global.MiniBasket || {};

/**
 * This controls the UI element for the summary of what's in the user's basket. This value can be updated using this control
 * @author Adam Silver
 * @name Summary
 * @class Singleton
 * @static
 * @constructor
 * @memberOf Salmon.Global.MiniBasket
 * @requires 
 * 	jQuery1.4.2.js
 */
Salmon.Global.MiniBasket.Summary = new(function() {
  // the root DOM element
  var rootSelector;

  /**
   * initialise onDomReady by finding dom element
   * @function
   * @private
   * @memberOf Salmon.Global.MiniBasket.Summary
   */
  function init() {
    if (Salmon.Global.FeatureToggles.getFeature('NewHeaderAndFooter'))
      rootSelector = '#basketLink .text';
    else
      rootSelector = "#miniShoppingBagWrapper .basketQty";
  }

  /**
   * update the html for the summary paragraph
   * @function
   * @name updateHtml
   * @memberOf Salmon.Global.MiniBasket.Summary
   * @param {String} html The string of html to update the element with when a product is added to basket
   */
  function updateHtml(quantity) {
    if (!quantity) return;
    $(rootSelector).html(parseInt(quantity, 10));
  }

  $(init);
  this.updateHtml = updateHtml;
});

Salmon.Global.Modal = (function() {
  var $body = $('body'),
    openModal = function(content, id, loader) {

      var loaderHtml = '';

      if (typeof loader !== "undefined" || loader !== false) {
        loaderHtml = '<div class="loader"></div>';
      }
      if (content) {
        var options = {
            'class': 'modal',
            html: '<div class="modalContent">' + loaderHtml + '<span class="closeModal">X</span>' + content + '</div>'
          },
          $modal;

        if (typeof id != 'undefined') options.id = id;

        // var $content = $(content);

        $modal = $('<div />', options);
        $body.append($modal);
        
        if(!$('#pgProductDetails').length) {
        	 var $modalContent = $modal.find('.modalContent');
             $modalContent.css('top', ((parseInt($(window).height(), 10) - parseInt($modalContent.outerHeight(), 10)) / 2));
        }

        $modal.addClass('opened').addClass(id);

        if (typeof GameCloudinary !== 'undefined') {
          setTimeout(function(){

            if ($('.cloudinaryImg').length > 0) {
              GameCloudinary.init();
            }

          },500);
        }

        var $loader = $modal.find('.loader');

        $loader.fadeOut();

        $modal.on('click', function(e) {
          if (e.target !== this && !$(e.target).hasClass('closeModal')) {
            return;
          } else {
            $(this).fadeOut(function() {
              $('body').removeClass('paypalCreditOverlay');
              $(this).remove();
            });
          }
        });
      }
    },
    closeModal = function() {
      $('.modal').fadeOut(function() {
        $('.modal').remove();
      });
    };


  return {
    openModal: openModal,
    closeModal: closeModal
  };
})();

var Salmon = Salmon || {};
Salmon.Global = Salmon.Global || {};
Salmon.Global.OrderSummaryPanel = Salmon.Global.OrderSummaryPanel || {};

/**
 * This component will show the most recently added product in their basket. This functionality occurs once the user
 * successfully adds a product to their basket, and acts as an acknowledgement to the user.
 * @author Pawel Magrian
 * @name RecentlyAdded
 * @class Singleton
 * @static
 * @constructor
 * @memberOf Salmon.Global.OrderSummaryPanel
 * @requires 
 * 	jQuery1.4.2.js
 */
Salmon.Global.OrderSummaryPanel.BasketSummaryUpdated = new(function() {
  var $root,
    hideDuration = 500,
    cssHideClass = "hide",
    cssFixedClass = "fixedRecentlyAdded",
    // timeout,
    open = false;

  /**
   * initialise onDomReady by finding/creating dom elements
   * @function
   * @private
   * @memberOf Salmon.Global.OrderSummaryPanel.BasketSummaryUpdated
   */
  function init() {
    $root = (function() {
      var div = document.createElement("div");
      var wrapper = $('.wrapper')[0];

      div.id = 'addToBasketMerchandising';
      $(div).addClass("recentlyAdded");
      $(div).addClass(cssHideClass);
      $(wrapper).prepend(div);

      return $(div);
    }());

    if (Salmon.Components) {
      if (Salmon.Components.Corners) {
        new Salmon.Components.Corner($root, ["br", "bl"]);
      }
    }
  }

  /*
   * If user enters the panel while it is showing kill the timeout function
   * @name recentlyAdded_mouseEnter
   * @private
   * @function
   * @memberOf Salmon.Global.OrderSummaryPanel.BasketSummaryUpdated
   * @param e the event object
  function recentlyAdded_mouseEnter(e) {
  	 clearTimeout();
  }
   
  function recentlyAdded_mouseLeave(e) {
  	hide();
  }
  */

  /**
   * Allows the user to update the html inside the recently added panel so that the most recent product is represented.
   * @function
   * @name Salmon.Global.OrderSummaryPanel.BasketSummaryUpdated.updateHtml
   * @memberOf Salmon.Global.OrderSummaryPanel.BasketSummaryUpdated
   * @param {String} html The string of html to update the element with when a product is added to basket
   */
  function updateHtml(html) {
    if (!$root) return;
    if (!html) return;

    $root.empty().append(html);

    var closeControl = document.createElement('div');
    var closeControlA = document.createElement('a');
    var closeControlSpan = document.createElement('span');

    closeControlA.href = '#';
    closeControlA.appendChild(closeControlSpan);
    closeControl.appendChild(closeControlA);
    closeControl.id = 'closeControl';

    $root.append(closeControl);
    $(closeControlA).bind('click', hide);
    $root.find('li.continue').children('a').bind('click', hide);

    // also close overlay when clicking on background
    $('#overlay').bind('click', hide);
  }

  function callCoremetrics(script) {
    var $script = $(script);
    for (var i = 0; i < $script.length; i++) {
      if ($script[i].innerHTML) {
        var scriptHtml = $script[i].innerHTML.replace("<!--", "").replace("//-->", "").replace(/^\s*/, "").replace(/\s*$/, "");
        if (scriptHtml.indexOf("cmSet") !== 0) {
          // alert(scriptHtml);
          eval(scriptHtml);
        }
      }
    }
  }

  /*
   * Will show the most recently added product panel for a configurable amount of time. The configurable amount of time is 
   * currently set inside this JavaScript file.
   * @function
   * @name Salmon.Global.OrderSummaryPanel.BasketSummaryUpdated.show
   * @memberOf Salmon.Global.OrderSummaryPanel.BasketSummaryUpdated
  function show() {
  	open = true;
  	clearTimeout();
  	$root.removeClass(cssHideClass);
  	$root.css("opacity", "1");
  	
  	var height = (document.getElementById("header")) ? $(document.getElementById("header")).outerHeight() : 0,
  		scroll = window.scrollY || $(window).scrollTop();
  	
  	if (scroll > height) {
  		$root.addClass(cssFixedClass);
  	}
  	
  	$(window).bind("scroll", function() {
  		if ($(this).scrollTop() <= height) {
  			$root.removeClass(cssFixedClass);
  		} else {
  			$root.addClass(cssFixedClass);
  		}
  	});
  	
  	if (Salmon.Components) {
  		if (Salmon.Components.Corners) {
  			new Salmon.Components.Corner($root, ["br", "bl"]);
  		}
  	}
  	
  	timeout = window.setTimeout(hide, hideDelay);
  }
  */

  /*
   * simpler open function to bring in line with PDP
   **/
  function show() {
    open = true;

    $root.removeClass(cssHideClass);
    $root.css("opacity", "1");

    document.getElementById('overlay').style.display = 'block';

    Salmon.Global.AnimateScrollTo(document.body);
  }

  /*
  function clearTimeout() {
  	window.clearTimeout(timeout);
  }
  */

  /**
   * hide the recently added element after the configurable time
   * @function
   * @private
   * @memberOf Salmon.Global.OrderSummaryPanel.BasketSummaryUpdated
   */
  function hide() {
    $root.animate({ "opacity": "0" }, {
      duration: hideDuration,
      complete: function() {
        open = false;
        $root.addClass(cssHideClass);
        $root.removeClass(cssFixedClass);
        $(window).unbind("scroll");
        document.getElementById('overlay').style.display = 'none';
      }
    });
  }

  /**
   * This can be used to check whether the recently added panel is open or not and is 
   * used within Salmon.Global.OrderSummaryPanel.ItemsList.js
   * @name isOpen
   * @memberOf Salmon.Global.OrderSummaryPanel.BasketSummaryUpdated
   * @function
   * @return {Boolean} True if RecentlyAdded is showing, otherwise false
   */
  function isOpen() {
    return open;
  }

  $(init);

  this.updateHtml = updateHtml;
  this.callCoremetrics = callCoremetrics;
  this.show = show;
  this.isOpen = isOpen;
});

var Salmon = Salmon || {};
Salmon.Global = Salmon.Global || {};
Salmon.Global.OrderSummaryPanel = Salmon.Global.OrderSummaryPanel || {};

/**
 * Will respond to the "Salmon.Global.CustomEvents.anonDeliveryUpdated" event and call the necessary
 * OrderSummaryPanel methods to control the user interface.
 * @author Pawel Magrian
 * @class Singleton
 * @static
 * @requires 
 * 	jQuery1.4.2.js
 * 	<br/>Salmon.Global.CustomEvents.js
 * 	<br/>Salmon.Global.OrderSummaryPanel.*.js
 */
Salmon.Global.OrderSummaryPanel.Controller = new(function() {
  $(document).bind(Salmon.Global.CustomEvents.anonDeliveryUpdated, function(e, json) {
    // check if Adoro is an object - if it's mobile site then Adoro is not defined
    if (typeof Adoro == 'object') {
      if (Adoro.Dialogue) {
        Adoro.Dialogue.hideDialogue();
      }
    }

    if (!json.errorMessage) {
      Salmon.Global.OrderSummaryPanel.Summary.updateValues(json);
    } else {
      new Salmon.Global.ErrorMessage(json.errorMessage);
    }
  });
});

var Salmon = Salmon || {};
Salmon.Global = Salmon.Global || {};
Salmon.Global.OrderSummaryPanel = Salmon.Global.OrderSummaryPanel || {};

/**
 * This controls the UI element for the summary of what's in the user's basket. This value can be updated using this control
 * @author Pawel Magrian
 * @name Summary
 * @class Singleton
 * @static
 * @constructor
 * @memberOf Salmon.Global.OrderSummaryPanel
 * @requires 
 * 	jQuery1.4.2.js
 */
Salmon.Global.OrderSummaryPanel.Summary = new(function() {
  // the root DOM element
  // var $root;
  var shipping;
  var total;
  var description;
  var value;
  var ukVatAppliedTotal;
  /* jshint -W069 */
  var isNewCheckout = Game.featureToggles['NewCHECKOUT'] === true;
  /**
   * initialise onDomReady by finding dom element
   * @function
   * @private
   * @memberOf Salmon.Global.OrderSummaryPanel.Summary
   */
  function init() {
    // find shipping value for desktop site
    if (isNewCheckout) {
      shipping = $('#orderSummary .shipping .value');
      total = $('#orderSummary .total .value');
    } else {
      shipping = $("#secondary li.shipping span.value");

      // find total value for desktop site
      total = $("#secondary li.total span.value");


    }


    ukVatAppliedTotal = $('.ukVatAppliedTotal');

    if (description === null || value === null) return;
  }

  /**
   * update the html for the summary paragraph
   * @function
   * @name updateHtml
   * @memberOf Salmon.Global.OrderSummaryPanel.Summary
   * @param {String} html The string of html to update the element with when a product is added to basket
   */
  function updateValues(json) {
    if (!json) return;
    $(shipping).html(json.totalShippingCharge);
    $(total).html(json.totalToPay);
    if (json.ukVatAppliedTotal) ukVatAppliedTotal.html(json.ukVatAppliedTotal);
    if (json.sSupplierId !== null && json.sSubgroup !== null && json.sDesc !== null && json.sCost !== null) {
      description = $("#secondary ul.basketItems p.delivery span.description_" + json.sSupplierId + "_" + json.sSubgroup);
      value = $("#secondary ul.basketItems p.delivery span.value_" + json.sSupplierId + "_" + json.sSubgroup);
      if (description !== null && value !== null) {
        $(description).html(json.sDesc);

        if (json.gameSubgrId == json.sSupplierId) {
          $(value).html("");
        } else if (json.sDesc !== "") {
          $(value).html("&pound;" + json.sCost);
        }
      }
    }
  }

  $(init);

  this.updateValues = updateValues;
});

var Salmon = Salmon || {};
Salmon.Global = Salmon.Global || {};

/**
 * Primary navigation drop down menu for the categories
 * @author Adam Silver
 * @name PrimaryNav
 * @class Singleton
 * @static
 * @constructor
 * @memberOf Salmon.Global
 * @requires 
 * 	jQuery1.3.1.js
 * 	<br/>Adoro.DropDownMenu.js
 */
Salmon.Global.PrimaryNav = new(function() {
  $(init);

  /**
   * Once the DOM is ready create a new instance of Adoro.DropDownMenu
   * @name init
   * @function
   * @private
   */
  function init() {
    var ul = $("#primaryNav ul").get(0);
    if (!ul) return;
    // the "off" cssClass will hide the elements off screen
    // do not change this for an equivalent display: none hiding as the keyboard accessibility will break
    var dropDownMenu = new Adoro.DropDownMenu(ul, { cssHideClass: "off", subMenuType: "div" });
  }
});

var Salmon = Salmon || {};
Salmon.Global = Salmon.Global || {};

/**
 * Setup file for general handling of AJAX requests including showing
 * loading indicators and error messages
 * @class Singleton
 * @constructor
 * @static
 */
Salmon.Global.RequestName = "";
Salmon.Global.Request = function() {
  var $document = $(document);

  $document.ajaxError(function() {
    Salmon.Global.StatusIndicator.showIndicator("An error has occured");
    window.setTimeout(function() {
      Salmon.Global.StatusIndicator.hideIndicator();
    }, 1500);
  });

  $document.ajaxSend(function() {
    if (Salmon.Global.RequestName === "avail") {
      Salmon.Global.RequestName = "";
    } else {
      Salmon.Global.StatusIndicator.showIndicator();
    }
  });

  $document.ajaxStop(function() {
    Salmon.Global.StatusIndicator.hideIndicator();
  });

  /*
  function Request() {
  	// effectively use this as a wrapper so that we 
  	// can have common functionality for all Salmon ajax request
  	
  	var loadingText = Salmon.StoreText["loadingText"] || "Loading text"; 
  		
  	function beforeSendBase() {
  		Salmon.Global.StatusIndicator.showIndicator(loadingText);
  		//if beforeSend();
  	}
  	
  	function completeBase() {
  		Salmon.Global.StatusIndicator.hideIndicator();
  		// do some common stuff for Salmon
  	}
  	
  	function successBase() {
  		// do some common stuff for Salmon		
  	}	
  	
  	function errorBase() {
  		// do some common stuff for Salmon		
  	}
  	
  	return $.ajax({
  		url: options.url,
  		beforeSend: beforeSendBase,
  		complete: completeBase,
  		success: successBase,
  		error: errorBase
  	});
  }
	
  return Request;	
  */
};
if (!Salmon.Global.FeatureToggles.getFeature('NewHeaderAndFooter')) Salmon.Global.Request();

Salmon.Global.SimpleSlider = function() {

  var isPDP = function() {

		if(!Game.CurrentPage) return false;
    	if( typeof Game.CurrentPage.PageName !== 'undefined') {
  		  return Game.CurrentPage.PageName=='pdp';
    	} else {
    		return false;
  	}
  }

  var config = {
    transitionDuration: 300,
    pager: false,
    playVideoButtonClass: 'playVideoButton',
    closeVideoButtonClass: 'closeVideo',
    fullWidth: false,
    slidesToFit: 5,
    resize: true,
    isPDP: isPDP(),
    defaultSwipeParams: {
      triggerOnTouchEnd: true,
      allowPageScroll: "horizontal",
      threshold: 175,
      excludedElements: []
    }
  };

  var _private = {
    windowWidth: $(window).width(),
    speed: 2000,
    isAnimating: 1
  };

  var newSlider = function(options) {
    this.options = $.extend({}, config, options);
    this.sliderCurrentPosition = 0;
    this.currentSlide = 0;
    this.isAnimating = false;
    this.init();
    this.interacted = false;
  };
  var proto = newSlider.prototype;

  proto.init = function() {
    this.setupElements();
    this.setupWidths();
    if (this.$elements.slides.length > this.options.slidesToFit) {
      this.setupEvents();
      this.setupClones();
    } else if (this.$elements.slides.length == 1) {
      this.$elements.windowContainer.width(this.slideWidth);
    }

    if (typeof GameCloudinary === 'object') {
      GameCloudinary.doDelayedCloudinaryInit();
    };

  };
  proto.setupClones = function() {
    for (var i = 0; i < this.options.slidesToFit; i++) {
      var $slide = this.$elements.slides.eq(i).clone();
      $slide.addClass('clone').appendTo(this.$elements.slidesContainer);
    }
    for (var i = this.maxSlides - 1; i > this.maxSlides - this.options.slidesToFit - 1; i--) {
      var $slide = this.$elements.slides.eq(i).clone();
      $slide.addClass('clone').prependTo(this.$elements.slidesContainer);
    }
    this.$elements.slidesContainer.css('left', this.options.slidesToFit * this.slideWidth * -1);
  };

  proto.setupElements = function() {
    this.$elements = {};
    this.$elements.window = $(window);
    this.$elements.mainContainer = (typeof this.options.elements.sliderContainer == 'object') ? this.options.elements.sliderContainer : $(this.options.elements.sliderContainer);
    this.$elements.slidesContainer = this.$elements.mainContainer.find('.slides');
    this.$elements.windowContainer = this.$elements.mainContainer.find('.slidesWindow');
    this.$elements.slides = this.$elements.slidesContainer.find('.slide');
    this.$elements.sliderControlPrev = this.$elements.mainContainer.find('.carouselPrev');
    this.$elements.sliderControlNext = this.$elements.mainContainer.find('.carouselNext');
    this.maxSlides = this.$elements.slides.length;
  };

  proto.setupWidths = function() {
    this.wWidth = this.$elements.window.width();
    if (this.options.fullWidth) {
      this.scrollStep = this.wWidth;
      this.slideWidth = this.wWidth;
      this.$elements.slides.width(this.wWidth);
    } else {
      if(config.isPDP) {

        if (this.$elements.mainContainer.hasClass('thumbSliderContainer')) {
          this.slideWidth='90';
        } else {
          this.slideWidth='150';
        }

      } else {
    	  if (typeof this.options.containerWidth != 'undefined') {
	        this.slideWidth = (this.options.containerWidth * 0.9) / this.options.slidesToFit;
	      } else {
	        this.slideWidth = (this.$elements.mainContainer.width() * 0.9) / this.options.slidesToFit;
	      }

        this.slideWidth = parseFloat(this.slideWidth).toFixed(0) - 1;
      }
      this.$elements.slides.width(this.slideWidth);

      if (this.$elements.windowContainer.closest('.IORecsSlider').length) {
        this.$elements.windowContainer.width('100%');
      } else {
        this.$elements.windowContainer.width(this.slideWidth * this.options.slidesToFit);
      }

      this.scrollStep = this.slideWidth;
    }

  };

  proto.setupEvents = function() {
    var self = this;
    this.$elements.sliderControlNext.bind('click', function() {
      if (!self.isAnimating) {
        self.currentSlide++;
        self.moveSlider();
        self.interacted = true;
      }
    });
    this.$elements.sliderControlPrev.bind('click', function() {
      if (!self.isAnimating) {
        self.currentSlide--;
        self.moveSlider();
        self.interacted = true;
      }
    });
    this.$elements.window.on('orientationchange', function() {
      self.setupWidths();
      self.$elements.mainContainer.find('.clone').width(this.wWidth);
    });


    self.options.defaultSwipeParams.swipe = function(event, direction, distance, duration, fingerCount, fingerData) {
      self.swiped(direction, distance, duration, fingerCount, fingerData);
    };
    self.$elements.slidesContainer.swipe(self.options.defaultSwipeParams);
  };

  proto.swiped = function(direction) {
    var self = this;
    if (!self.isAnimating) {
      switch (direction) {
        case 'left':
          self.currentSlide++;
          break;
        case 'right':
          self.currentSlide--;
          break;
      }

      self.moveSlider();
      self.interacted = true;
    }

  };

  proto.adjustCurrentSlide = function() {
    var self = this;
    if (self.currentSlide == self.maxSlides) {
      self.$elements.slidesContainer.css('left', this.options.slidesToFit * this.slideWidth * -1);
      self.currentSlide = 0;
    }
    if (self.currentSlide == (self.options.slidesToFit + 1) * -1) {
      self.$elements.slidesContainer.css('left', this.options.slidesToFit * this.slideWidth * -1);
      self.currentSlide = 0;
    }


  };
  proto.moveSlider = function() {
    var self = this;
    if (!this.isAnimating) {
      this.isAnimating = true;
      var animateObj = {
        left: (this.currentSlide == self.options.slidesToFit * -1) ? 0 : (this.currentSlide + this.options.slidesToFit) * self.scrollStep * -1
      };
      this.$elements.slidesContainer.animate(animateObj, this.options.transitionDuration, function() {
        self.isAnimating = false;
        self.adjustCurrentSlide();
      });
      if (this.options.pager) {
        if (self.currentSlide != self.maxSlides) {
          this.$elements.pager.find('li').removeClass('active');
          this.$elements.pager.find('li').eq(this.currentSlide).addClass('active');
        } else {
          this.$elements.pager.find('li').removeClass('active');
          this.$elements.pager.find('li').eq(0).addClass('active');
        }
      }

      if (this.options.pager) {
        this.$elements.pager.find('li').removeClass('active');
        this.$elements.pager.find('li').eq(this.slideCounter).addClass('active');
      }

      _private.isAnimating = 0;

    }
  };

  proto.resetSlider = function() {
    this.setupElements();
    this.setupWidths();
  };
  // proto.windowEvents = function() { };
  return {
    newSlider: newSlider
  };
};

Salmon.Global.SimpleSlider = Salmon.Global.SimpleSlider();

var Salmon = Salmon || {};
Salmon.Global = Salmon.Global || {};

/**
 * Primary navigation drop down menu for the social navidgation menus
 * @author Adam Silver/TK Modded
 * @name SocialNav
 * @class Singleton
 * @static
 * @constructor
 * @memberOf Salmon.Global
 * @requires 
 * 	jQuery1.3.1.js
 * 	<br/>Adoro.DropDownMenu.js
 */
Salmon.Global.SocialNav = new(function() {
  $(init);

  /**
   * Once the DOM is ready create a new instance of Adoro.DropDownMenu
   * @name init
   * @function
   * @private
   */
  function init() {
    var ul = document.getElementById("socialNav");
    if (!ul) return;
    // the "off" cssClass will hide the elements off screen
    // do not change this for an equivalent display: none hiding as the keyboard accessibility will break
    var dropDownMenu = new Adoro.DropDownMenu(ul, { cssHideClass: "off", subMenuType: "div" });
  }
});

var Salmon = Salmon || {};
Salmon.Global = Salmon.Global || {};
Salmon.Global.StatusIndicator = function() {

  $(init);

  var $root = null;

  var $innerDiv = null;

  var cssHideClass = "hide";

  var defaultText = "Loading...";

  function init() {
    $root = (function() {
      var div = document.createElement("div");
      var $div = $(div);
      $div.attr("id", "statusIndicator");
      $div.addClass(cssHideClass);
      $div.append('<div>' + defaultText + '</div>');
      if (Configuration.StatusIndicator) {
        var loader = document.createElement("div"),
          loadingImage = new Image();

        loader.className = "loader";
        loadingImage.src = Configuration.StatusIndicator.image;
        loader.appendChild(loadingImage);
        $div.append(loader);
      }
      $("body").append(div);
      $innerDiv = $div.find("div:first");
      return $div;
    }());

  }

  function showIndicator(message) {
    if ($root !== null) {
      if ($root.hasClass(cssHideClass)) {
        if (message) updateText(message);
        $root.css({ "opacity": "1" });
        if (Configuration.StatusIndicator) {
          if (Configuration.StatusIndicator.startAnimate) {
            Configuration.StatusIndicator.startAnimate($root);
          }
        }
        $root.removeClass(cssHideClass);
      }
    }
  }

  function updateText(text) {
    if (text) {
      $innerDiv.html(text);
    } else {
      $innerDiv.html(defaultText);
    }
  }

  function hideIndicator() {
    $root.animate({ "opacity": "0" }, {
      complete: function() {
        $root.addClass(cssHideClass);
        updateText(defaultText);
        if (Configuration.StatusIndicator) {
          if (Configuration.StatusIndicator.stopAnimate) {
            Configuration.StatusIndicator.stopAnimate($root);
          }
        }
      }
    });
  }

  this.showIndicator = showIndicator;
  this.hideIndicator = hideIndicator;

  return this;
};

if (!Salmon.Global.FeatureToggles.getFeature('NewHeaderAndFooter')) Salmon.Global.StatusIndicator = Salmon.Global.StatusIndicator();

var Salmon = Salmon || {};
Salmon.Global = Salmon.Global || {};
Salmon.Global.Tabs = Salmon.Global.Tabs || {};


/**
 * Tabbing component. 
 * @fileOverview Salmon Tabs
 * @author Steve Uprichard
 * @name Tabs
 * @class (singleton) Represents the tabbing component
 * @static
 * @constructor
 * @memberOf Salmon.Global
 * @requires jQuery1.3.1.js
 */
Salmon.Global.Tabs = function(container, options) {

  var options = options || {},
    activeTab = null,
    tabs = null,
    config = {
      tabActiveClass: options.tabActiveClass || "active",
      hidePanelClass: options.hidePanelClass || "off",
      panelClass: options.panelClass || "panel",
      selectedTabIndex: options.selectedTabIndex || 0
    };

  init();
  return tabs;

  function init() {
    for (var i = 0; i < container.length; i++) {
      var tabSet = [];
      tabs = $(container[i]).find("ul.tabs li");
      if (tabs.length > 0) {
        var activeTabs = tabs.filter(".active");

        tabs.each(function(idx) {
          if ($(this).hasClass(config.tabActiveClass) || (activeTabs.length === 0 && idx === 0)) {
            config.selectedTabIndex = idx;
          }
          $(this).find("> a").each(function() {
            tabSet.push(new Tab(this));
          });
        });
        var tc = new tabController(tabSet);
        $("." + config.panelClass).addClass(config.hidePanelClass);
        tc.click(config.selectedTabIndex);
      }
    }
  }

  function tabController(tabs) {
    for (var i = 0; i < tabs.length; i++) {
      $(tabs[i].anchor).bind("click", function(x) {
        return function() {
          if (activeTab !== null)
            activeTab.setInactive();
          tabs[x].setActive();
          activeTab = tabs[x];
          return false;
        };
      }(i));
    }

    function click(index) {
      $(tabs[index].anchor).trigger("click");
    }

    this.click = click;
  }

  function Tab(tab) {

    var state = null,
      anchor = tab;

    function setActive() {
      if (this.state === null) {
        $(this.anchor).parent().addClass(config.tabActiveClass);
        this.state = config.tabActiveClass;
        var panel = this.anchor.href.split("#")[1];
        $("#" + panel).removeClass(config.hidePanelClass);
      }
    }

    function setInactive() {
      if (this.state === config.tabActiveClass) {
        $(this.anchor).parent().removeClass(config.tabActiveClass);
        this.state = null;
        var panel = this.anchor.href.split("#")[1];
        $("#" + panel).addClass(config.hidePanelClass);
      }
    }

    this.anchor = anchor;
    this.state = state;
    this.setActive = setActive;
    this.setInactive = setInactive;
    return this;
  }
};

Salmon = Salmon || {};
Salmon.Global = Salmon.Global || {};

Salmon.Global.ipaddress = null;

Salmon.Global.PrintPage = new(function() {
  init();

  function init() {
    $(document).ready(function() {


      if ($('.printLink').length > 0) {
        if ($('.printLink').find('a').length > 0) {
          $('.printLink').find('a').bind('click', function() {
            window.print();
          });
        }
      }
    });
  }
});

Salmon.Global.CreateCookie = function(name, value, days) {
  var expires;
  if (days) {
    var date = new Date();
    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
    expires = "; expires=" + date.toGMTString();
  } else expires = "";
  document.cookie = name + "=" + value + expires + "; path=/";
};

Salmon.Global.ReadCookie = function(name) {
  var nameEQ = name + "=";
  var ca = document.cookie.split(';');
  for (var i = 0; i < ca.length; i++) {
    var c = ca[i];
    while (c.charAt(0) == ' ') c = c.substring(1, c.length);
    if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
  }
  return null;
};

Salmon.Global.ReadCookieStartsWith = function(name) {
  var nameEQ = name + "=";
  var ca = document.cookie.split(';');
  for (var i = 0; i < ca.length; i++) {
    var c = ca[i];
    while (c.charAt(0) == ' ') c = c.substring(1, c.length);
    var isMatch = c.match(nameEQ);
    if (isMatch !== null) {
      return c.substring(isMatch[0].length, c.length);
    }
  }
  return null;
};

Salmon.Global.EraseCookie = function(name) {
  Salmon.Global.CreateCookie(name, "", -1);
};

Salmon.Global.SearchReferrer = new(function() {
  $(document).ready(function() {
    var referrers = {
      local: { url: "/localhost/", qs: "p" },
      google: { url: "/^http:\/\/(\w+\.)?google\.", qs: "q" },
      yahoo: { url: "/^http:\/\/(\w+\.)?yahoo\.", qs: "p" },
      bing: { url: "/^http:\/\/(\w+\.)?bing\.", qs: "q" }
    };

    for (var search in referrers) {
      if (document.referrer.search(referrers[search].url) != -1 && document.referrer.indexOf("?") != -1) {
        var loc = document.referrer;
        var qs = loc.substring(loc.search(referrers[search].qs + "="), loc.length);
        var cutPoint = qs.indexOf("&") == -1 ? qs.length : qs.indexOf("&");
        qs = qs.substring((referrers[search].qs.length + 1), cutPoint);
        Salmon.Global.CreateCookie("SALMON_EXT_SEARCH", qs);
        break;
      }
    }
  });
});

Salmon.Global.AnimateScrollTo = (function(node) {
  if (!node) return;
  var $node = $(node);

  if ($node.length > 0) {
    $("body, html").animate({ scrollTop: $($node[0]).offset().top });
  }
});

/*
 * this is specific to the lister page -
 * should be made more generic as below
 **/
Salmon.Global.Truncator = (function(node, options) {
  $(node).find('a').each(function() {
    // find if there is overflow content
    // use the parent div because it has a min height set on it
    var rect = this.parentNode.getBoundingClientRect();
    var maxHeight = rect.bottom - rect.top;

    // if so make a duplicate of the content and truncate it
    if (this.scrollHeight > maxHeight + 2) {
      var truncNode = this.cloneNode(true);
      truncNode.className += ' truncated';
      this.className += ' full';
      this.parentNode.appendChild(truncNode);

      while (truncNode.scrollHeight > maxHeight + 2) {
        if (truncNode.textContent) {
          truncNode.textContent = truncNode.textContent.substr(0, truncNode.textContent.length - 1);
        } else {
          truncNode.innerText = truncNode.innerText.substr(0, truncNode.innerText.length - 1);
        }
      }

      if (truncNode.textContent) {
        truncNode.innerHTML = truncNode.textContent.substr(0, truncNode.textContent.length - 5) + ' &#8230;';
      } else {
        truncNode.innerHTML = truncNode.innerText.substr(0, truncNode.innerText.length - 5) + ' &#8230;';
      }
    }
  });
});

/*
 * more generic text truncator
 **/
Salmon.Global.TextTruncator = (function(nodes, options) {
  $(nodes).each(function() {
    // find if there is overflow content
    var rect = this.getBoundingClientRect();
    var maxHeight = rect.bottom - rect.top;
    var truncateLen = 5;
    var extraChars = '';

    // if so truncate it
    if (this.scrollHeight > maxHeight + 2) { // allow a couple of extra pixels for browser rounding errors
      while (this.scrollHeight > maxHeight + 2) {
        if (this.textContent) {
          this.textContent = this.textContent.substr(0, this.textContent.length - 1);
        } else {
          this.innerText = this.innerText.substr(0, this.innerText.length - 1);
        }
      }

      if (options && options.extraChars) {
        truncateLen += options.extraChars.length;

        for (var i = 0; i < options.extraChars.length; i++) {
          extraChars += options.extraChars[i];
        }
      }

      if (this.textContent) {
        this.innerHTML = this.textContent.substr(0, this.textContent.length - truncateLen) + ' &#8230;' + extraChars;
      } else {
        this.innerHTML = this.innerText.substr(0, this.innerText.length - truncateLen) + ' &#8230;' + extraChars;
      }
    }
  });
});

Salmon.Global.ButtonTrigger = (function(input, button) {
  if (!input || !button) return;

  var $input = $(input),
    $button = $(button);

  init();

  function init() {
    $input.bind("keydown", function(event) {
      if (event.keyCode == 13) {
        event.preventDefault();
        $button.trigger("click");
      }
    });
  }
});

Salmon.Global.FixedFooter = (new function() {
  var fixedFooter,
    fixedSocial,
    footerHeight,
    socialHeight;

  $(init);

  function init() {
    fixedFooter = document.getElementById("footerFixedWrapper") || null;
    fixedSocial = document.getElementById("socialMyGamestation") || null;

    if (!fixedFooter | !fixedSocial) return;

    var ua = navigator.userAgent,
      isAndroidOrIDevice = /iPad/i.test(ua) || /iPhone/i.test(ua) || /iPod/i.test(ua) || /Android/i.test(ua);

    if (isAndroidOrIDevice) {
      setHeights();
      positionFooter();
      bindEvents();
    }
  }

  function setHeights() {
    footerHeight = $(fixedFooter).outerHeight();
    socialHeight = $(fixedSocial).outerHeight();
  }

  function bindEvents() {
    $("body").bind("touchend", function(e) {
      e.preventDefault();
      setTimeout(function() {
        positionFooter();
      }, 100);
    });

    var orientationEvent = ("orientationchange" in window) ? "orientationchange" : "resize";
    $(window).bind(orientationEvent, function() {
      setTimeout(function() {
        positionFooter();
      }, 100);
    });
  }

  function positionFooter() {
    var screenHeight = window.innerHeight;
    $(fixedFooter).css({
      "bottom": "auto",
      "left": 0,
      "position": "absolute",
      "top": (window.scrollY + screenHeight - footerHeight) + "px"
    });

    $(fixedSocial).css({
      "bottom": "auto",
      "position": "absolute",
      "right": 0,
      "top": (window.scrollY + screenHeight - socialHeight) + "px"
    });
  }
});

Salmon.Global.Validation = (function() {

  var config = {
      defaultValidators: {
        'email': function(val) {
          return /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(val);
        },
        'postcode': function(val) {
          return /^[A-Z]{1,2}[0-9R][0-9A-Z]? ?[0-9][ABD-HJLNP-UW-Z]{2}$/.test(val.replace(/ /g, '').toUpperCase());
        },
        'password': function(val) {
          return /^(?=(.*[a-z]){1,})(?=(.*[\d]){1,}).{6,}$/.test(val);
        },
        'passwordMatch': function(arr) {
          return arr[0] === arr[1];
        },
        'phone': function(val) {
          return /^(?=.*[0-9])[- +()0-9]+$/.test(val);
        }
      }
    },

    Validation = function($el, options) {
      this.$el = $el;
      this.options = $.extend({}, config, options);

      if (options.hasOwnProperty('ajaxFields')) this.validateAjax(options.ajaxFields);
    };


  var proto = Validation.prototype;


  proto.insertErrorMessage = function($field, message) {
    var fieldName = $field.attr('name'),
      $errorMessage = $('<span />', {
        class: "fieldError",
        text: message,
        'data-for': fieldName
      });
    if (typeof this.options.addErorMessageToParent !== 'undefined' && this.options.addErorMessageToParent === true)
      $field.parent().append($errorMessage);
    else
      $field.after($errorMessage);
  };

  proto.manageErrorMessage = function($field, message) {

    var self = this,
      fieldName = $field.attr('name'),
      $errorMessage = $('.fieldError[data-for="' + fieldName + '"]');

    if (message) {
      if ($errorMessage.length === 0) {
        self.insertErrorMessage($field, message);
        $field.addClass('errorInput');
      } else {
        $errorMessage.text(message);

      }

    } else {
      if (!$field.hasClass('ajaxFail')) {
        $field.removeClass('errorInput');
        $errorMessage.fadeOut(function() {
          $errorMessage.remove();
        });
      }
    }
  };

  proto.validateSpecialRule = function($field) {
    var self = this,
      // $errorMessage = $('.fieldError[data-for="' + fieldName + '"]'),
      fieldName = $field.attr('name'),
      fieldValue = $field.val(),
      errorMessage = '';

    if (self.options.specificValidationRules && typeof self.options.specificValidationRules[fieldName] != 'undefined') {
      for (var i in self.options.specificValidationRules[fieldName]) {
        var ruleObj = self.options.specificValidationRules[fieldName][i],
          rule = (typeof ruleObj.rule == 'function') ? ruleObj.rule : self.options.defaultValidators[ruleObj.rule],
          additionalField = self.options.specificValidationRules[fieldName][i].additionalField;
        if (additionalField !== undefined) {
          fieldValue = [fieldValue, $("#" + additionalField).val()];
        }

        try {
          if (!ruleObj.ajax) {
            if (!rule(fieldValue)) {
              errorMessage = ruleObj.errorMessage;
              break;
            }
          } else {
            if (!rule(fieldValue)) {
              errorMessage = ruleObj.errorMessage;
              break;
            }
          }

        } catch (err) {
          console.log('Cannot find specification for default rule "' + rule + '"');
        }


      }
    }

    return errorMessage;
  };


  proto.validateField = function($field) {

    var self = this,
      errorMessage = '',
      fieldName = $field.attr('name'),
      // fieldValue = $field.val(),
      isRequired = $field.hasClass('required') || $field.parent().hasClass('required') || $field.parent().parent().hasClass('required'),
      isAjaxLoading = $field.hasClass('loading'),
      isValueNull = ($field.val().length === 0 || $field.val() == -1 || $field.val() == 'noSelection' || $field.val() == ' '),
      fieldTitle = (typeof $field.attr('placeholder') != 'undefined') ? $field.attr('placeholder') : $field.parent().parent().find('label[for="' + fieldName + '"]').text();
    if (fieldTitle.length === 0) fieldTitle = $field.parent().parent().find('.indicator label').text();
    fieldTitle = fieldTitle.replace('(required)', '');
    fieldTitle = fieldTitle.replace(':', '');


    if (isAjaxLoading) {
      $field.on('ajaxSuccess', function() {
        self.validateField($field);
      });
      return false;
    }

    if (isRequired && isValueNull)
      errorMessage = ((typeof $field.data('validationname') != "undefined") ? $field.data('validationname') : fieldTitle) + ' is required';
    else
      errorMessage = self.validateSpecialRule($field);


    if (typeof ajax == 'undefined') self.manageErrorMessage($field, errorMessage);

    return (!errorMessage) ? true : false;
  };

  proto.validateFields = function($fields) {
    var self = this,
      valid = true;

    $fields.each(function() {
      var $field = $(this),
        isVisible = $field.is(':visible');

      //If some field before was not valid, we dont want to change valid variable as well as we dont want to validate hidden fields
      if (isVisible) valid = (self.validateField($field) && valid) ? true : false;
    });
    if (this.$el.find('.fieldError').length > 0) valid = false;
    return valid;
  };

  proto.validateAjax = function(ajaxRules) {
    var self = this;
    for (var key in ajaxRules) {
      var rule = ajaxRules[key],
        $field = self.$el.find('[name="' + key + '"]'),
        sendRequest = function() {
          $field.addClass('loading');
          $field.removeClass('ajaxFail').removeClass('ajaxSuccess');
          $.get(rule.url + '?' + rule.requestKey + '=' + $field.val(), {}, function(res) {
            $field.removeClass('loading');
            if (JSON.parse(res)[rule.responseKey] == rule.requiredResponse) {
              self.manageErrorMessage($field);
              $field.addClass('ajaxSuccess');
            } else {
              $field.addClass('ajaxFail');
              self.manageErrorMessage($field, rule.errorMessage);
            }
            $field.trigger('ajaxReturned');
          });
        };

      $field.on('blur', function() {

        if (self.validateField($field, true)) sendRequest();
      });
    }
  };

  proto.setupChangeEvents = function($fields) {
    var self = this;
    // var isAjax = self.options.hasOwnProperty('ajaxFields');
    $fields.each(function() {
      var $field = $(this);

      $field.on('change', function() {
        self.validateField($field);
      });


    });
  };
  proto.extendRules = function(extendedRules) {
    var self = this;
    for (var i in extendedRules) {
      if (typeof self.options.specificValidationRules[i] != "undefined") {
        self.options.specificValidationRules[i] = self.options.specificValidationRules[i].concat(extendedRules[i]);
      } else {
        self.options.specificValidationRules[i] = extendedRules[i];
      }
    }
  };
  proto.validate = function(extendedRules, dontScrollToFields) {
    var self = this;

    if (typeof extendedRules != "undefined") {
      self.extendRules(extendedRules);
    }
    if (self.$el.is('form, div, section')) {
      var $fields = self.$el.find('*[data-validate="true"]');
      if (!self.validateFields($fields)) {
        self.setupChangeEvents($fields);
        self.$el.find('.errorInput').eq(0).focus();
        if (!dontScrollToFields) $("html, body").animate({ scrollTop: self.$el.find('.fieldError').eq(0).offset().top - 150 });
        return false;
      } else {
        return true;
      }
    } else if (self.$el.is('input, select, textarea')) {
      return self.validateField(self.$el);
    }

  };

  proto.showErrorMessage = function(fieldName, errorMessage) {
    var self = this;
    self.manageErrorMessage($('input[name="' + fieldName + '"]'), errorMessage);
  };


  proto.hideErrorMessage = function(fieldName) {
    var self = this;
    self.manageErrorMessage($('input[name="' + fieldName + '"]'));
  };


  proto.validateOnClick = function($el) {
    var self = this;
    $el.on('click', function(e) {
      if (!self.validate() && typeof self.validate() !== 'undefined') e.preventDefault();
    });
  };


  return Validation;
})();

var Salmon = Salmon || {};
Salmon.Global = Salmon.Global || {};
Salmon.Global.Warranties = Salmon.Global.Warranties || {};
/**
 * Warranties
 * @author Serge Radkevics
 * @name Fixes
 * @class Singleton
 * @static
 * @constructor
 * @memberOf Salmon.Global
 * @requires 
 * 	jQuery1.3.1.js
 * 	<br/>Adoro.DropDownMenu.js
 */
Salmon.Global.Warranties.Controller = new(function() {

  $(document).bind(Salmon.Global.CustomEvents.warrantyAddedToTheBasket, function(e, json) {
    if (!json.errorMessage) {
      if (json.coremetrics) {
        Salmon.Global.MiniBasket.RecentlyAdded.callCoremetrics(json.coremetrics);
      }

      //Salmon.Global.MiniBasket.RecentlyAdded.show(json.smallRecentlyAddedHtml);
      Salmon.Global.MiniBasket.ItemsList.updateHtml(json.itemsListHtml);
      Salmon.Global.MiniBasket.Summary.updateHtml(json.orderQuantity);

    } else {
      new Salmon.Global.ErrorMessage(json.errorMessage);
    }
  });
});

Salmon.Global.Warranties.AddWarrantyToTheBasket = function(url, callback) {

  var status = {
      addingToBasket: false
    },

    queueName = "AddToBasket",

    addProductToBasket = function() {
      if (status.addingToBasket) {
        $(document).queue(queueName, function() {
          sendRequest();
        });
      } else {
        sendRequest();
      }
    },

    sendRequest = function() {

      status.addingToBasket = true;

      return $.ajax({
        url: url.split('?')[0],
        data: url.split('?')[1],
        dataType: "json",
        success: productAdded,
        error: ajaxError
      });
    },
    ajaxError = function() {
      callback('error');
    },
    productAdded = function(json) {
      status.addingToBasket = false;
      if (!json) return;

      $(document).trigger(Salmon.Global.CustomEvents.warrantyAddedToTheBasket, json);
      $(document).dequeue(queueName);
      if (typeof callback === 'function') callback(json);



    };



  addProductToBasket();

};
Salmon.Global.Warranties.WarrantiesTermsOverlay = function() {
  $(document).ready(function() {
    var $overlay = $('#overlay'),
      $overlayInner, $closeLink,
      openOverlay = function($link) {
        $overlay.show();
        $overlayInner = $link.parent().find('.warrantyOverlayInner');

        $overlayInner.show();
        $closeLink = $overlayInner.find('.close');

        $overlay.on('click', closeOverlay);
        $closeLink.on('click', function(e) {
          e.preventDefault();
          closeOverlay();
        });
      },

      closeOverlay = function() {
        $overlay.hide();
        $overlayInner.hide();

        $overlay.off('click');
        $closeLink.off('click');


      };


    $('.warrantyOverlayLink').on('click', function(e) {
      e.preventDefault();
      openOverlay($(this));
    });

  });
};

Salmon.Global.Warranties.AddToBasketOverlay = function() {
  var showSuccessOverlay = function() {
      var $overlay = $('#dialogue #warrantySuccess'),
        $close = $overlay.find('.close');

      if ($overlay.hasClass('error')) {
        $overlay.html($overlay.data('successMessage')).removeClass('error');
      }
      $overlay.fadeIn();
      $close.on('click', function(e) {
        e.preventDefault();
        $overlay.fadeOut();
      });
      setInterval(function() {
        $overlay.fadeOut();
      }, 2500);

    },
    showErrorOverlay = function() {
      var $overlay = $('#dialogue #warrantySuccess'),
        $close = $overlay.find('.close');
      $overlay.data('successMessage', $overlay.html()).addClass('error');
      $overlay.html('Sorry, warranty is out of stock');
      $overlay.fadeIn();
      $close.on('click', function(e) {
        e.preventDefault();
        $overlay.fadeOut();
      });
      setInterval(function() {
        $overlay.fadeOut();
      }, 2500);

    },
    hideWarranties = function(button) {
      if ($('#dialogue #warranty .inner').length > 1) {
        $(button).parent().parent().fadeOut(function() {
          $(this).remove();
        });
      } else {
        $('#dialogue #warranty').height(0);
        $('#dialogue').css('top', parseInt($('#dialogue').css('top'), 10) + 106);
      }
    },
    updateOverlay = function(json) {
      $('#dialogue .orderDetails .orderSum').html(json.orderSum);
      $('#dialogue .orderDetails .basketNumber').text(parseInt(json.orderQuantity, 10) + " " + $('#dialogue .orderDetails .basketNumber').text().split(' ')[1]);
    },

    init = function() {

      //Add initial href value for Add warranty button
      $('.selectWarrantyLength').each(function() {
        $(this).parent().parent().find('.addWarrantyToTheBasket').attr('href', $(this).val());
      });


      //bind select boxes to chage href
      $(document).on('click', '.selectWarrantyLength', function() {
        $(this).parent().parent().find('.addWarrantyToTheBasket').attr('href', $(this).val());
      });

      //bind add warranty button
      $(document).on('click', '.addWarrantyToTheBasket', function(e) {
        e.preventDefault();
        var button = this;
        Salmon.Global.Warranties.AddWarrantyToTheBasket($(this).attr('href'), function(json) {
          if (json != 'error') {
            showSuccessOverlay();
            hideWarranties(button);
            updateOverlay(json);
          } else {
            showErrorOverlay();

          }
        });
      });

      //remove warranties on "may be later" button click
      $(document).on('click', '#warranty .later', function(e) {
        e.preventDefault();
        hideWarranties(this);
      });
    };

  init();
};

Salmon = Salmon || {};
Salmon.Global = Salmon.Global || {};

Salmon.Global.WasNowPrice = new(function() {
  var url = '';

  try {
    if (
      typeof InitialActions.xcomregValues.wasNowPriceUrl !== 'undefined' &&
      InitialActions.xcomregValues.wasNowPriceUrl !== ''
    ) {
      url = InitialActions.xcomregValues.wasNowPriceUrl;
    } else {
      console.warn('Error in InitialActions.xcomregValues.wasNowPriceUrl');
    }
  } catch (err) {
    console.warn('Error in InitialActions.xcomregValues.wasNowPriceUrl', err);
  }

  var makeRequest = function() {
      if (url) {
        $.ajax({
          url: url + '/' + $('input[name="wasNowParams"]').val(),
          type: "GET",
          dataType: "jsonp",
          jsonpCallback: "Salmon.Global.WasNowPrice.responseSuccess"
        });
      }
    },
    processRequest = function(json) {
		for (var i in json.skus) {
	        var sku = json.skus[i];
	        var $placeholders = $('.WasNow' + sku.sku);
	        var content = '';
	        var	savePrice = parseFloat(sku.wasPrice) - parseFloat(sku.nowPrice);

	        content += '<price>Save &pound;' + savePrice.toFixed(2) + ' </price>';
	        content += '<price>Was &pound;' + sku.wasPrice + '</price>';

	        $placeholders.each(function() {
	          $(this).show()
	            .html(content);
	        });
	    }

    },
    init = function() {
      makeRequest();
      //leave below in for testing
      //var response = '{"skus":[{"sku":425112,"wasPrice":129.99000,"nowPrice":99.99000,"wasFromDate":"30/09/2013 14:17:00","wasToDate":"23/09/2014 11:45:00"},{"sku":425112,"wasPrice":89.99000,"nowPrice":50.00000,"wasFromDate":"05/03/2014 16:49:00","wasToDate":"23/09/2014 11:45:00"}]}';
      //processRequest(JSON.parse(response));
    };

  this.responseSuccess = function(json) {
    processRequest(json);
  };

  if (Game && Game.CurrentPage && Game.CurrentPage.PageName == 'pdp') $(init);

});

var Salmon = Salmon || {};
Salmon.Global = Salmon.Global || {};
Salmon.Global.Widgets = Salmon.Global.Widgets || {};
Salmon.Global.Widgets.BalanceChecker = (function() {
  var storeId,
    requestUrl = '/webapp/wcs/stores/servlet/AjaxRewardCardWidgetView?storeId=',
    widgetObj = function($widget) {
      var init = function() {
          getWidgetHtml();
        },
        getWidgetHtml = function() {
          storeId = ($('input[name="storeId"]').val().length > 0) ? $('input[name="storeId"]').val() : '10151';
          $.getJSON(requestUrl + storeId, function(json) {
            $widget.html(json.rewardCardHtml);
          });
        };
      init();
    };

  $(document).ready(function() {
    $('.rewardWidget').each(function() {
      var widget = new widgetObj($(this));
    });
  });
})();

/*jshint multistr: true */
var Salmon = Salmon || {};
Salmon.Global = Salmon.Global || {};
Salmon.Global.Widgets = Salmon.Global.Widgets || {};
Salmon.Global.Widgets.BalanceChecker = (function() {
  var widgetHtml = '<div class="innerContainer">\
						<h2>Gift Card Balance Checker</h2>\
						<div class="inputContainers">\
							<div class="inputContainer card">\
								<span class="message"> Enter gift card number </span>\
								<div class="inputs">\
									<input type="text" class="cardNumber" maxlength="4"/>\
									<input type="text" class="cardNumber" maxlength="4"/>\
									<input type="text" class="cardNumber" maxlength="4"/>\
									<input type="text" class="cardNumber" maxlength="4"/>\
									<input type="text" class="cardNumber small" maxlength="3" />\
								</div>\
							</div>\
							<div class="inputContainer pin">\
								<span class="message"> Enter PIN</span>\
								<input type="text" class="pinNumber" maxlength="4"/>\
								<a href="#" class="showBalance">Show My Balance</a>\
							</div>\
						</div>\
						<div class="resultContainer">\
							<span class="title">Your GAME Gift Card Balance</span>\
							<span class="message">You have &pound;<span class="amount"></span> to spend with GAME</span>\
						</div>\
					</div>',
    errorMessages = {
      cardNumber: 'Card number should be numeric and 19 digits long',
      pinNumber: 'PIN number should be 4 characters long',
      invalidNumber: 'Invalid card number or PIN'
    },

    storeId,
    requestUrl = '/webapp/wcs/stores/servlet/GetVoucherAccountInterface?storeId=',
    widgetObj = function($widget) {
      var $inputs, $cardInputs, $pinInput, $submitButton, $resultContainer, $resultAmount, $innerContainer,
        init = function() {
          $widget.html(widgetHtml);
          setupDomVars();
          eventHandlers();
        },
        setupDomVars = function() {
          $inputs = $widget.find('input');
          $innerContainer = $widget.find('.innerContainer');
          $cardInputs = $widget.find('input.cardNumber');
          $pinInput = $widget.find('input.pinNumber');
          $submitButton = $widget.find('.showBalance');
          $resultContainer = $widget.find('.resultContainer');
          $resultAmount = $resultContainer.find('.amount');


        },
        eventHandlers = function() {

          $submitButton.on('click', sendRequest);
          $cardInputs.on({
            'keyup': function() {
              var $input = $(this),
                index = $.inArray(this, $cardInputs),
              val = $input.val(),
                maxLength = $input.hasClass('small') ? 3 : 4;
              if (val.length >= maxLength)
                if (!$input.hasClass('small'))
                  $($cardInputs[index + 1]).focus();
                else
                  $pinInput.focus();
            },
            'keydown': function(e) {
              console.log(e.which);
              if (isNaN(String.fromCharCode(e.which)) && e.which != '8' &&
                e.which != '46' &&
                e.which != '103' &&
                e.which != '104' &&
                e.which != '105' &&
                e.which != '100' &&
                e.which != '102' &&
                e.which != '97' &&
                e.which != '98' &&
                e.which != '101' &&
                e.which != '99' &&
                e.which != '96' &&
                e.which != '9') e.preventDefault();
            }
          });
          $inputs.on({
            'keyup': function() {
              if ($(this).hasClass('cardNumber')) {
                if (getCardNumberFromInputs().length == 19)
                  $cardInputs.each(function() {
                    $(this).removeClass('error');
                  });
              } else {
                if ($(this).val().length == 4)
                  $(this).removeClass('error');
              }
            }
          });
        },
        getCardNumberFromInputs = function() {
          var cardNumber = '';
          $cardInputs.each(function() { cardNumber += $(this).val(); });
          return cardNumber;
        },
        showError = function(errorFields) {
          $innerContainer.find('span.error').remove();
          var errorMessage = '';
          if (errorFields.length == 2) {
            errorMessage = errorMessages.cardNumber + '<br/>' + errorMessages.pinNumber;

            for (var i in errorFields) {
              $('.' + errorFields[i]).each(function() {
                $(this).addClass('error');
              });
            }
          } else {
            errorMessage = errorMessages[errorFields[0]];
            $('.' + errorFields[0]).each(function() {
              $(this).addClass('error');
            });
          }

          $innerContainer.prepend('<span class="error">' + errorMessage + '</span>');
        },
        checkParams = function(params) {
          var errorFields = [];
          if (params.pan.length != 19 || isNaN(params.pan)) errorFields.push('cardNumber');
          if (params.pin.length != 4) errorFields.push('pinNumber');

          if (errorFields.length === 0)
            return true;
          else
            showError(errorFields);
          return false;
        },
        sendRequest = function(e) {
          e.preventDefault();
          if ($(this).hasClass('clear')) {
            clearFields();
          } else {
            var params = {
              pan: getCardNumberFromInputs(),
              pin: $pinInput.val()
            };
            storeId = ($('input[name="storeId"]').val().length > 0) ? $('input[name="storeId"]').val() : '10151';
            if (checkParams(params))
              $.ajax({
                type: "POST",
                url: requestUrl + storeId,
                data: params,
                success: requestSuccess
              });
          }
        },
        clearFields = function() {
          $inputs.each(function() {
            $(this).val('');
          });
          $resultContainer.slideToggle();
          $($cardInputs[0]).focus();
          $submitButton.removeClass('clear').text('Show My Balance');
        },
        requestSuccess = function(res) {
          res = JSON.parse(res);
          $innerContainer.find('span.error').remove();
          $inputs.each(function() {
            $(this).removeClass('error');
          });
          $submitButton.addClass('clear').text('Check Another');
          if (typeof res.balance !== 'undefined') {
            $resultAmount.text(res.balance);
          } else {
            $resultAmount.parent().html(errorMessages.invalidNumber);
          }

          if (!$resultContainer.is(':visible')) $resultContainer.slideToggle();
        };
      init();
    };



  $(document).ready(function() {
    $('.balanceCheckerWidget').each(function() {
      var widget = new widgetObj($(this));
    });
  });
})();
